{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "correct-saskatchewan",
   "metadata": {},
   "source": [
    "# DATA"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 238,
   "id": "exact-shame",
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "Ref=pd.read_csv('Ref.csv')\n",
    "Ref[\"CO\"] = 1000 * Ref[\"CO\"]\n",
    "Ref['Date'] = pd.to_datetime(Ref['Date_Time'])\n",
    "Ref=Ref.set_index('Date')\n",
    "Ref.drop('Date_Time',axis = 1, inplace = True)\n",
    "Ref=Ref.resample('5min').mean()\n",
    "Ref=Ref[76463:137376]\n",
    "Ref_CO=Ref['CO'].to_list()\n",
    "Ref_NO2=Ref['NO2'].to_list()\n",
    "Ref_SO2=Ref['SO2'].to_list()\n",
    "Ref_O3=Ref['O3'].to_list()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 239,
   "id": "norwegian-yellow",
   "metadata": {},
   "outputs": [],
   "source": [
    "import random\n",
    "import pandas as pd\n",
    "import scipy.io\n",
    "import numpy as np\n",
    "data = pd.read_csv('CO.txt', header = None,low_memory=False)\n",
    "data.columns=['WE','AE','Temp','RH','Time']\n",
    "Time=data['Time'].to_list()\n",
    "time=[]\n",
    "for i in range(len(Time)):\n",
    "    time.append(float(abs(Time[i])))\n",
    "Time=np.array(time)\n",
    "Date=pd.to_datetime(Time-719529,unit='d').round('s')\n",
    "data['Date'] = Date.tolist()\n",
    "data=data.set_index('Date')\n",
    "data.drop('Time',axis = 1, inplace = True)\n",
    "data=data.resample('5min').mean()\n",
    "Data_CO=data\n",
    "Data_CO['Ref']=Ref_CO\n",
    "WE=Data_CO['WE'].to_list()\n",
    "AE=Data_CO['AE'].to_list()\n",
    "signal=np.array(WE)-np.array(AE)\n",
    "Data_CO['Net Signal']=signal\n",
    "Data_CO['Month']=Data_CO.index.month\n",
    "Data_CO['Day_of_week']=Data_CO.index.dayofweek\n",
    "Data_CO['Day']=Data_CO.index.day\n",
    "Data_CO['Hour']=Data_CO.index.hour\n",
    "CO_Data=Data_CO\n",
    "CO_Data=CO_Data[(CO_Data[CO_Data.columns] >= 0).all(axis=1)]\n",
    "CO_Data=CO_Data.dropna()\n",
    "data = pd.read_csv('Conc_CO.txt', header = None,low_memory=False)\n",
    "data.columns=['Lab1','Temp','RH','Time','Ref']\n",
    "Time=data['Time'].to_list()\n",
    "time=[]\n",
    "for i in range(len(Time)):\n",
    "    time.append(float(abs(Time[i])))\n",
    "Time=np.array(time)\n",
    "Date=pd.to_datetime(Time-719529,unit='d').round('s')\n",
    "data['Date'] = Date.tolist()\n",
    "data=data.set_index('Date')\n",
    "data.drop('Time',axis = 1, inplace = True)\n",
    "data=data.resample('5min').mean()\n",
    "Data_CO=data\n",
    "signal=np.array(WE)-np.array(AE)\n",
    "Data_CO['Net Signal']=signal\n",
    "Data_CO['Month']=Data_CO.index.month\n",
    "Data_CO['Day_of_week']=Data_CO.index.dayofweek\n",
    "Data_CO['Day']=Data_CO.index.day\n",
    "Data_CO['Hour']=Data_CO.index.hour\n",
    "CO_Data=Data_CO\n",
    "CO_Data=CO_Data.resample('5min').mean()\n",
    "CO_Data=CO_Data[(CO_Data[CO_Data.columns] >= 0).all(axis=1)]\n",
    "CO_Data=CO_Data.dropna() \n",
    "CO_Data.shape\n",
    "CO_Data=CO_Data.resample('h').mean()\n",
    "CO_Data=CO_Data.dropna()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 240,
   "id": "contained-jacksonville",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Lab1</th>\n",
       "      <th>Temp</th>\n",
       "      <th>RH</th>\n",
       "      <th>Ref</th>\n",
       "      <th>Net Signal</th>\n",
       "      <th>Month</th>\n",
       "      <th>Day_of_week</th>\n",
       "      <th>Day</th>\n",
       "      <th>Hour</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Date</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2019-10-03 15:00:00</th>\n",
       "      <td>535.086842</td>\n",
       "      <td>29.421250</td>\n",
       "      <td>52.411845</td>\n",
       "      <td>341.897275</td>\n",
       "      <td>152.440810</td>\n",
       "      <td>10.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>15.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2019-10-03 16:00:00</th>\n",
       "      <td>592.411938</td>\n",
       "      <td>29.211333</td>\n",
       "      <td>53.102667</td>\n",
       "      <td>261.288900</td>\n",
       "      <td>137.737333</td>\n",
       "      <td>10.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>16.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2019-10-07 10:00:00</th>\n",
       "      <td>610.622636</td>\n",
       "      <td>32.490426</td>\n",
       "      <td>36.890977</td>\n",
       "      <td>164.459300</td>\n",
       "      <td>119.947159</td>\n",
       "      <td>10.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>7.0</td>\n",
       "      <td>10.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2019-10-07 11:00:00</th>\n",
       "      <td>307.626618</td>\n",
       "      <td>34.926112</td>\n",
       "      <td>35.013036</td>\n",
       "      <td>211.526835</td>\n",
       "      <td>56.895186</td>\n",
       "      <td>10.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>7.0</td>\n",
       "      <td>11.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2019-10-07 12:00:00</th>\n",
       "      <td>384.296094</td>\n",
       "      <td>35.954278</td>\n",
       "      <td>32.022579</td>\n",
       "      <td>224.669739</td>\n",
       "      <td>69.308199</td>\n",
       "      <td>10.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>7.0</td>\n",
       "      <td>12.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                           Lab1       Temp         RH         Ref  Net Signal  \\\n",
       "Date                                                                            \n",
       "2019-10-03 15:00:00  535.086842  29.421250  52.411845  341.897275  152.440810   \n",
       "2019-10-03 16:00:00  592.411938  29.211333  53.102667  261.288900  137.737333   \n",
       "2019-10-07 10:00:00  610.622636  32.490426  36.890977  164.459300  119.947159   \n",
       "2019-10-07 11:00:00  307.626618  34.926112  35.013036  211.526835   56.895186   \n",
       "2019-10-07 12:00:00  384.296094  35.954278  32.022579  224.669739   69.308199   \n",
       "\n",
       "                     Month  Day_of_week  Day  Hour  \n",
       "Date                                                \n",
       "2019-10-03 15:00:00   10.0          3.0  3.0  15.0  \n",
       "2019-10-03 16:00:00   10.0          3.0  3.0  16.0  \n",
       "2019-10-07 10:00:00   10.0          0.0  7.0  10.0  \n",
       "2019-10-07 11:00:00   10.0          0.0  7.0  11.0  \n",
       "2019-10-07 12:00:00   10.0          0.0  7.0  12.0  "
      ]
     },
     "execution_count": 240,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "CO_Data1=CO_Data[3:]\n",
    "CO_Data1.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 241,
   "id": "express-indication",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "60913"
      ]
     },
     "execution_count": 241,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import pandas as pd\n",
    "import scipy.io\n",
    "import numpy as np\n",
    "data = pd.read_csv('O3.txt', header = None,low_memory=False)\n",
    "data.columns=['AE','WE','Temp','RH','Time']\n",
    "Time=data['Time'].to_list()\n",
    "time=[]\n",
    "for i in range(len(Time)):\n",
    "    time.append(float(abs(Time[i])))\n",
    "Time=np.array(time)\n",
    "Date=pd.to_datetime(Time-719529,unit='d').round('s')\n",
    "data['Date'] = Date.tolist()\n",
    "data=data.set_index('Date')\n",
    "data.drop('Time',axis = 1, inplace = True)\n",
    "data=data.resample('5min').mean()\n",
    "Data_O3=data\n",
    "Data_O3['Ref']=Ref_O3\n",
    "WE=Data_O3['WE'].to_list()\n",
    "AE=Data_O3['AE'].to_list()\n",
    "signal=np.array(WE)-np.array(AE)\n",
    "Data_O3['Net Signal']=signal\n",
    "Data_O3['Month']=Data_O3.index.month\n",
    "Data_O3['Day_of_week']=Data_O3.index.dayofweek\n",
    "Data_O3['Day']=Data_O3.index.day\n",
    "Data_O3['Hour']=Data_O3.index.hour\n",
    "O3_Data=Data_O3\n",
    "O3_Data=O3_Data[(O3_Data[O3_Data.columns] >= 0).all(axis=1)]\n",
    "O3_Data=O3_Data.dropna()\n",
    "data = pd.read_csv('Conc_O3.txt', header = None,low_memory=False)\n",
    "data.columns=['Lab1','Temp','RH','Time','Ref']\n",
    "Time=data['Time'].to_list()\n",
    "time=[]\n",
    "for i in range(len(Time)):\n",
    "    time.append(float(abs(Time[i])))\n",
    "Time=np.array(time)\n",
    "Date=pd.to_datetime(Time-719529,unit='d').round('s')\n",
    "data['Date'] = Date.tolist()\n",
    "data=data.set_index('Date')\n",
    "data.drop('Time',axis = 1, inplace = True)\n",
    "data=data.resample('5min').mean()\n",
    "Data_O3=data\n",
    "signal=np.array(WE)-np.array(AE)\n",
    "Data_O3['Net Signal']=signal\n",
    "Data_O3['Month']=Data_O3.index.month\n",
    "Data_O3['Day_of_week']=Data_O3.index.dayofweek\n",
    "Data_O3['Day']=Data_O3.index.day\n",
    "Data_O3['Hour']=Data_O3.index.hour\n",
    "O3_Data=Data_O3\n",
    "O3_Data=O3_Data[(O3_Data[O3_Data.columns] >= 0).all(axis=1)]\n",
    "O3_Data=O3_Data.dropna() \n",
    "O3_Data=O3_Data.resample('h').mean()\n",
    "O3_Data=O3_Data.dropna()\n",
    "O3_Data.head()\n",
    "\n",
    "ref_O3=Data_O3['Ref'].to_list()\n",
    "len(ref_O3)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 242,
   "id": "maritime-effects",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Lab1</th>\n",
       "      <th>Temp</th>\n",
       "      <th>RH</th>\n",
       "      <th>Ref</th>\n",
       "      <th>Net Signal</th>\n",
       "      <th>Month</th>\n",
       "      <th>Day_of_week</th>\n",
       "      <th>Day</th>\n",
       "      <th>Hour</th>\n",
       "      <th>Ref_O3</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Date</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2019-10-02 11:55:00</th>\n",
       "      <td>460.448301</td>\n",
       "      <td>26.378438</td>\n",
       "      <td>58.063437</td>\n",
       "      <td>15.230400</td>\n",
       "      <td>7.850000</td>\n",
       "      <td>10</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>11</td>\n",
       "      <td>46.094860</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2019-10-02 12:10:00</th>\n",
       "      <td>1364.583446</td>\n",
       "      <td>25.500000</td>\n",
       "      <td>48.612609</td>\n",
       "      <td>6.665136</td>\n",
       "      <td>37.815652</td>\n",
       "      <td>10</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>12</td>\n",
       "      <td>55.810810</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2019-10-02 12:15:00</th>\n",
       "      <td>224.159154</td>\n",
       "      <td>25.765087</td>\n",
       "      <td>48.441408</td>\n",
       "      <td>6.642805</td>\n",
       "      <td>12.275893</td>\n",
       "      <td>10</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>12</td>\n",
       "      <td>57.907075</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2019-10-02 12:20:00</th>\n",
       "      <td>82.998996</td>\n",
       "      <td>26.120078</td>\n",
       "      <td>47.716553</td>\n",
       "      <td>2.844210</td>\n",
       "      <td>13.152720</td>\n",
       "      <td>10</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>12</td>\n",
       "      <td>58.880540</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2019-10-02 15:45:00</th>\n",
       "      <td>566.301152</td>\n",
       "      <td>30.418466</td>\n",
       "      <td>50.153181</td>\n",
       "      <td>10.084125</td>\n",
       "      <td>9.323533</td>\n",
       "      <td>10</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>15</td>\n",
       "      <td>40.068225</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                            Lab1       Temp         RH        Ref  Net Signal  \\\n",
       "Date                                                                            \n",
       "2019-10-02 11:55:00   460.448301  26.378438  58.063437  15.230400    7.850000   \n",
       "2019-10-02 12:10:00  1364.583446  25.500000  48.612609   6.665136   37.815652   \n",
       "2019-10-02 12:15:00   224.159154  25.765087  48.441408   6.642805   12.275893   \n",
       "2019-10-02 12:20:00    82.998996  26.120078  47.716553   2.844210   13.152720   \n",
       "2019-10-02 15:45:00   566.301152  30.418466  50.153181  10.084125    9.323533   \n",
       "\n",
       "                     Month  Day_of_week  Day  Hour     Ref_O3  \n",
       "Date                                                           \n",
       "2019-10-02 11:55:00     10            2    2    11  46.094860  \n",
       "2019-10-02 12:10:00     10            2    2    12  55.810810  \n",
       "2019-10-02 12:15:00     10            2    2    12  57.907075  \n",
       "2019-10-02 12:20:00     10            2    2    12  58.880540  \n",
       "2019-10-02 15:45:00     10            2    2    15  40.068225  "
      ]
     },
     "execution_count": 242,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import pandas as pd\n",
    "import scipy.io\n",
    "import numpy as np\n",
    "data = pd.read_csv('NO2.txt', header = None,low_memory=False)\n",
    "data.columns=['WE','AE','Temp','RH','Time']\n",
    "Time=data['Time'].to_list()\n",
    "time=[]\n",
    "for i in range(len(Time)):\n",
    "    time.append(float(abs(Time[i])))\n",
    "Time=np.array(time)\n",
    "Date=pd.to_datetime(Time-719529,unit='d').round('s')\n",
    "data['Date'] = Date.tolist()\n",
    "data=data.set_index('Date')\n",
    "data.drop('Time',axis = 1, inplace = True)\n",
    "data=data.resample('5min').mean()\n",
    "Data_NO2=data\n",
    "Data_NO2['Ref']=Ref_NO2\n",
    "WE=Data_NO2['WE'].to_list()\n",
    "AE=Data_NO2['AE'].to_list()\n",
    "signal=np.array(WE)-np.array(AE)\n",
    "Data_NO2['Net Signal']=signal\n",
    "Data_NO2['Month']=Data_NO2.index.month\n",
    "Data_NO2['Day_of_week']=Data_NO2.index.dayofweek\n",
    "Data_NO2['Day']=Data_NO2.index.day\n",
    "Data_NO2['Hour']=Data_NO2.index.hour\n",
    "NO2_Data=Data_NO2\n",
    "NO2_Data=NO2_Data[(NO2_Data[NO2_Data.columns] >= 0).all(axis=1)]\n",
    "NO2_Data=NO2_Data.dropna()\n",
    "data = pd.read_csv('Conc_NO2.txt', header = None,low_memory=False)\n",
    "data.columns=['Lab1','Temp','RH','Time','Ref']\n",
    "Time=data['Time'].to_list()\n",
    "time=[]\n",
    "subscript = str.maketrans(\"0123456789\", \"₀₁₂₃₄₅₆₇₈₉\") \n",
    "for i in range(len(Time)):\n",
    "    time.append(float(abs(Time[i])))\n",
    "Time=np.array(time)\n",
    "Date=pd.to_datetime(Time-719529,unit='d').round('s')\n",
    "data['Date'] = Date.tolist()\n",
    "data=data.set_index('Date')\n",
    "data.drop('Time',axis = 1, inplace = True)\n",
    "data=data.resample('5min').mean()\n",
    "Data_NO2=data\n",
    "signal=np.array(WE)-np.array(AE)\n",
    "Data_NO2['Net Signal']=signal\n",
    "Data_NO2['Month']=Data_NO2.index.month\n",
    "Data_NO2['Day_of_week']=Data_NO2.index.dayofweek\n",
    "Data_NO2['Day']=Data_NO2.index.day\n",
    "Data_NO2['Hour']=Data_NO2.index.hour\n",
    "Data_NO2['Ref_O3']=ref_O3\n",
    "NO2_Data=Data_NO2\n",
    "NO2_Data=NO2_Data[(NO2_Data[NO2_Data.columns] >= 0).all(axis=1)]\n",
    "NO2_Data=NO2_Data.dropna()\n",
    "NO2_Data.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 243,
   "id": "recognized-watch",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(36821, 10)"
      ]
     },
     "execution_count": 243,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import pandas as pd\n",
    "import scipy.io\n",
    "import numpy as np\n",
    "Ref_O3=10*np.array(Ref_O3)\n",
    "data = pd.read_csv('O3.txt', header = None,low_memory=False)\n",
    "data.columns=['AE','WE','Temp','RH','Time']\n",
    "Time=data['Time'].to_list()\n",
    "time=[]\n",
    "for i in range(len(Time)):\n",
    "    time.append(float(abs(Time[i])))\n",
    "Time=np.array(time)\n",
    "Date=pd.to_datetime(Time-719529,unit='d').round('s')\n",
    "data['Date'] = Date.tolist()\n",
    "data=data.set_index('Date')\n",
    "data.drop('Time',axis = 1, inplace = True)\n",
    "data=data.resample('5min').mean()\n",
    "Data_O3=data\n",
    "Data_O3['Ref']=Ref_O3\n",
    "WE=Data_O3['WE'].to_list()\n",
    "AE=Data_O3['AE'].to_list()\n",
    "signal=np.array(WE)-np.array(AE)\n",
    "Data_O3['Net Signal']=signal\n",
    "Data_O3['Month']=Data_O3.index.month\n",
    "Data_O3['Day_of_week']=Data_O3.index.dayofweek\n",
    "Data_O3['Day']=Data_O3.index.day\n",
    "Data_O3['Hour']=Data_O3.index.hour\n",
    "O3_Data=Data_O3\n",
    "O3_Data=O3_Data[(O3_Data[O3_Data.columns] >= 0).all(axis=1)]\n",
    "O3_Data=O3_Data.dropna()\n",
    "data = pd.read_csv('Conc_O3.txt', header = None,low_memory=False)\n",
    "data.columns=['Lab1','Temp','RH','Time','Ref']\n",
    "Time=data['Time'].to_list()\n",
    "time=[]\n",
    "for i in range(len(Time)):\n",
    "    time.append(float(abs(Time[i])))\n",
    "Time=np.array(time)\n",
    "Date=pd.to_datetime(Time-719529,unit='d').round('s')\n",
    "data['Date'] = Date.tolist()\n",
    "data=data.set_index('Date')\n",
    "data.drop('Time',axis = 1, inplace = True)\n",
    "data=data.resample('5min').mean()\n",
    "Data_O3=data\n",
    "signal=np.array(WE)-np.array(AE)\n",
    "Data_O3['Net Signal']=signal\n",
    "Data_O3['Month']=Data_O3.index.month\n",
    "Data_O3['Day_of_week']=Data_O3.index.dayofweek\n",
    "Data_O3['Day']=Data_O3.index.day\n",
    "Data_O3['Hour']=Data_O3.index.hour\n",
    "ref_NO2=Data_NO2['Ref'].to_list()\n",
    "Data_O3['Ref_NO2']=ref_NO2\n",
    "O3_Data=Data_O3\n",
    "O3_Data=O3_Data[(O3_Data[O3_Data.columns] >= 0).all(axis=1)]\n",
    "O3_Data=O3_Data.dropna()\n",
    "\n",
    "O3_Data.shape"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "joint-doctor",
   "metadata": {},
   "source": [
    "#  New Dataset"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 244,
   "id": "developmental-crack",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(5049, 7)"
      ]
     },
     "execution_count": 244,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import random\n",
    "import pandas as pd\n",
    "import scipy.io\n",
    "import numpy as np\n",
    "data = pd.read_csv('CO_2.txt', header = None,low_memory=False)\n",
    "data.columns=['C1','C2','C3','C4','Temp','RH','Ref','Time']\n",
    "Time=data['Time'].to_list()\n",
    "time=[]\n",
    "for i in range(len(Time)):\n",
    "    time.append(float(abs(Time[i])))\n",
    "Time=np.array(time)\n",
    "Date=pd.to_datetime(Time-719529,unit='d').round('s')\n",
    "data['Date'] = Date.tolist()\n",
    "data=data.set_index('Date')\n",
    "data.drop('Time',axis = 1, inplace = True)\n",
    "\n",
    "data=data[['C1','Temp','RH','Ref']]\n",
    "Data_CO=data\n",
    "Data_CO['Month']=Data_CO.index.month\n",
    "Data_CO['Day_of_week']=Data_CO.index.dayofweek\n",
    "#Data_CO['Day']=Data_CO.index.day\n",
    "Data_CO['Hour']=Data_CO.index.hour\n",
    "CO_Data=Data_CO\n",
    "CO_Data=CO_Data[(CO_Data[CO_Data.columns] >= 0).all(axis=1)]\n",
    "CO_Data=CO_Data.dropna()\n",
    "CO_Data=CO_Data[:3446]\n",
    "CO_Data=CO_Data.resample('h').mean()\n",
    "CO_Data.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 245,
   "id": "understood-restriction",
   "metadata": {},
   "outputs": [],
   "source": [
    "Temp1=CO_Data['Temp'].to_list()\n",
    "RH1=CO_Data['RH'].to_list()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 246,
   "id": "sporting-flash",
   "metadata": {},
   "outputs": [],
   "source": [
    "CO_Data1.tail()\n",
    "CO_Data1=CO_Data1.resample('h').mean()\n",
    "CO_Data1['Temp1']=Temp1\n",
    "CO_Data1['RH1']=RH1\n",
    "CO_Data1=CO_Data1.dropna()\n",
    "Temp=CO_Data1['Temp'].to_list()\n",
    "RH=CO_Data1['RH'].to_list()\n",
    "Temp2=CO_Data1['Temp1'].to_list()\n",
    "RH2=CO_Data1['RH1'].to_list()\n",
    "\n",
    "ind=[i for i in range(len(Temp))]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 247,
   "id": "seeing-tourism",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.legend.Legend at 0x129bf8e50>"
      ]
     },
     "execution_count": 247,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.plot(ind, RH, color='green')\n",
    "plt.plot(ind, RH2, color='red')\n",
    "plt.ylabel('RH')\n",
    "plt.xlabel('Hours')\n",
    "plt.legend(['Sensor','Station'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 282,
   "id": "convinced-dealer",
   "metadata": {},
   "outputs": [],
   "source": [
    "NO2_Data1=NO2_Data.resample('h').mean()\n",
    "NO2_Data1=NO2_Data1[28:]\n",
    "NO2_Data1['Temp1']=Temp1\n",
    "NO2_Data1['RH1']=RH1\n",
    "NO2_Data1=NO2_Data1.dropna()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 283,
   "id": "swiss-flesh",
   "metadata": {},
   "outputs": [],
   "source": [
    "O3_Data1=O3_Data.resample('h').mean()\n",
    "O3_Data1=O3_Data1[28:]\n",
    "O3_Data1['Temp1']=Temp1\n",
    "O3_Data1['RH1']=RH1\n",
    "O3_Data1=O3_Data1.dropna()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 284,
   "id": "handmade-manual",
   "metadata": {},
   "outputs": [],
   "source": [
    "CO_Data=CO_Data1\n",
    "NO2_Data=NO2_Data1\n",
    "O3_Data=O3_Data1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 285,
   "id": "vital-wales",
   "metadata": {},
   "outputs": [],
   "source": [
    "def MBE(true,pred):\n",
    "    true=np.array(true)\n",
    "    pred=np.array(pred)\n",
    "    mbe=np.mean(true-pred)\n",
    "    return mbe\n",
    "def CRMSE(true,pred):\n",
    "    true=np.array(true)\n",
    "    pred=np.array(pred)\n",
    "    crmse=np.sqrt(np.mean(((true-np.mean(true))-(pred-np.mean(pred)))**2))\n",
    "    if np.std(pred)>np.std(true):\n",
    "        crmse=crmse\n",
    "    else:\n",
    "        crmse=-crmse\n",
    "    return crmse\n",
    "\n",
    "def sMAE(true,pred):\n",
    "    true=np.array(true)\n",
    "    pred=np.array(pred)\n",
    "    smae=np.mean(abs(true-pred)/((abs(true)+abs(pred))/2))\n",
    "    return smae"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 286,
   "id": "focal-directory",
   "metadata": {},
   "outputs": [],
   "source": [
    "def sMAE(true,pred):\n",
    "    true=np.array(true)\n",
    "    pred=np.array(pred)\n",
    "    mae=sum(abs(pred-true))/len(pred)\n",
    "    nmae=mae/np.mean(true)\n",
    "    return 1-nmae"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 287,
   "id": "limiting-rouge",
   "metadata": {},
   "outputs": [],
   "source": [
    "from scipy.stats import chi2\n",
    "p = np.array([ 0.9])\n",
    "df=np.array(range(1,10000))\n",
    "chi = [0]+list(chi2.isf(p, df))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 288,
   "id": "prime-surge",
   "metadata": {},
   "outputs": [],
   "source": [
    "def precision(pred,true):\n",
    "    pred=list(pred)\n",
    "    true=list(true)\n",
    "    for i in range(len(true)):\n",
    "        if true[i]==0:\n",
    "            true.pop(i)\n",
    "            pred.pop(i)\n",
    "    pred=np.array(pred)\n",
    "    true=np.array(true)\n",
    "    d=((pred-true)/true)*100\n",
    "    n=len(pred)\n",
    "    A=np.sqrt((n-1)/chi[n-1])\n",
    "    cv=np.sqrt(((n*sum(d**2)-(sum(d))**2)/(n*(n-1))))*A\n",
    "    return cv"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 289,
   "id": "fixed-tiger",
   "metadata": {},
   "outputs": [],
   "source": [
    "def IOA(pred,true):\n",
    "    true=np.array(true)\n",
    "    pred=np.array(pred)\n",
    "    frac=sum(abs(true-pred))/sum((abs(pred-np.mean(true))+abs(true-np.mean(true))))\n",
    "    d=1-frac\n",
    "    return d  "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 290,
   "id": "latest-malaysia",
   "metadata": {},
   "outputs": [],
   "source": [
    "def bias(pred,true):\n",
    "    pred=np.array(pred)\n",
    "    true=np.array(true)\n",
    "    bias=abs(np.mean(pred-true)/np.mean(true))*100\n",
    "    return bias  "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 291,
   "id": "challenging-municipality",
   "metadata": {},
   "outputs": [],
   "source": [
    "def REF(pred,y_test,alpha):\n",
    "    import random\n",
    "    cal=np.array(pred)\n",
    "    ref=np.array(y_test.to_list())\n",
    "    ref_mean=np.mean(ref)\n",
    "    cal_mean=np.mean(cal)\n",
    "    prec=np.array([20 for i in range(len(ref))])\n",
    "    u=np.maximum(prec,0.001*ref)\n",
    "    #cal=np.log(cal)\n",
    "    #ref=np.log(ref)\n",
    "    sx_s=(1/len(ref))*sum((ref-ref_mean)**2)\n",
    "    sy_s=(1/len(cal))*sum((cal-cal_mean)**2)\n",
    "    sxy=(1/len(cal))*sum((cal-cal_mean)*(ref-ref_mean))\n",
    "    beta_1=((sy_s-alpha*sx_s)+np.sqrt((sy_s-sx_s)**2+4*alpha*sxy**2))/(2*sxy)\n",
    "    beta_0=cal_mean-beta_1*ref_mean\n",
    "    RSS=sum((cal-beta_0-beta_1*ref)**2-(beta_1**2+alpha)*u**2)\n",
    "    du_s=RSS/(len(cal)-2)\n",
    "    Beta_1=((sy_s-alpha*sx_s-du_s)+np.sqrt((sy_s-alpha*sx_s-du_s)**2+4*alpha*sxy**2))/(2*sxy)\n",
    "    Beta_0=cal_mean-Beta_1*ref_mean\n",
    "    P1=(RSS/(len(cal)-2))\n",
    "    P2=(Beta_1**2+alpha)*u**2+(-2*Beta_1**2+2*Beta_1-1)*u**2\n",
    "    P3=(Beta_0+(Beta_1-1)*ref)**2\n",
    "    P=[]\n",
    "    for i in range(len(P3)):\n",
    "        P.append(P1+P2[i]+P3[i])\n",
    "    for i in range(len(P)):\n",
    "        if P[i]<0:\n",
    "            P[i]=random.randint(1,100)\n",
    "    u_cal=(2*np.sqrt(np.array(P))/cal)*100\n",
    "    #u_cal=((2*np.sqrt((RSS/(len(cal)-2))+(1-(beta_1-1)**2)*(0.08*ref)**2+(Beta_0+(Beta_1-1)*ref)**2))/cal)*100\n",
    "    return u_cal  "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 292,
   "id": "portuguese-catholic",
   "metadata": {},
   "outputs": [],
   "source": [
    "def REF2(pred,y_test,alpha,LV):\n",
    "    import random\n",
    "    cal=np.array(pred)\n",
    "    ref=np.array(y_test.to_list())\n",
    "    ref_mean=np.mean(ref)\n",
    "    cal_mean=np.mean(cal)\n",
    "    prec=np.array([20 for i in range(len(ref))])\n",
    "    u=0.001*ref\n",
    "    #cal=np.log(cal)\n",
    "    #ref=np.log(ref)\n",
    "    sx_s=(1/len(ref))*sum((ref-ref_mean)**2)\n",
    "    sy_s=(1/len(cal))*sum((cal-cal_mean)**2)\n",
    "    sxy=(1/len(cal))*sum((cal-cal_mean)*(ref-ref_mean))\n",
    "    #beta_1=((sy_s-sx_s)+np.sqrt((sy_s-sx_s)**2+4*sxy**2))/(2*sxy)\n",
    "    beta_1=((sy_s-alpha*sx_s)+np.sqrt((sy_s-sx_s)**2+4*alpha*sxy**2))/(2*sxy)\n",
    "    beta_0=cal_mean-beta_1*ref_mean\n",
    "    RSS=sum((cal-beta_0-beta_1*ref)**2-(beta_1**2+alpha)*(0.001*LV)**2)\n",
    "    du_s=RSS/(len(cal)-2)\n",
    "    #Beta_1=((sy_s-sx_s-du_s)+np.sqrt((sy_s-sx_s-du_s)**2+4*sxy**2))/(2*sxy)\n",
    "    Beta_1=((sy_s-alpha*sx_s-du_s)+np.sqrt((sy_s-alpha*sx_s-du_s)**2+4*alpha*sxy**2))/(2*sxy)\n",
    "    Beta_0=cal_mean-Beta_1*ref_mean\n",
    "    P1=(RSS/(len(cal)-2))\n",
    "    P2=(Beta_1**2+alpha)*(0.001*LV)**2+(-2*Beta_1**2+2*Beta_1-1)*(0.001*LV)**2\n",
    "    P3=(Beta_0+(Beta_1-1)*LV)**2\n",
    "    P=P1+P2+P3\n",
    "    if P<0:\n",
    "        P=random.randint(1,100)\n",
    "    u_cal=(2*np.sqrt(P)/(Beta_0+Beta_1*LV))*100\n",
    "    #u_cal=((2*np.sqrt((RSS/(len(cal)-2))+(1-(beta_1-1)**2)*0.1+(Beta_0+(Beta_1-1)*ref)**2))/cal)*100\n",
    "    return u_cal  "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 293,
   "id": "comic-plenty",
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.linear_model import ElasticNet, Lasso,  BayesianRidge, LassoLarsIC\n",
    "from sklearn.ensemble import RandomForestRegressor,  GradientBoostingRegressor\n",
    "from sklearn.kernel_ridge import KernelRidge\n",
    "from sklearn.pipeline import make_pipeline\n",
    "from sklearn.preprocessing import RobustScaler\n",
    "from sklearn.base import BaseEstimator, TransformerMixin, RegressorMixin, clone\n",
    "from sklearn.model_selection import KFold, cross_val_score, train_test_split\n",
    "from sklearn.metrics import mean_squared_error\n",
    "import xgboost as xgb\n",
    "import lightgbm as lgb"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 294,
   "id": "completed-friendship",
   "metadata": {},
   "outputs": [],
   "source": [
    "lasso = make_pipeline(RobustScaler(), Lasso(alpha =0.0005, random_state=1))\n",
    "ENet = make_pipeline(RobustScaler(), ElasticNet(alpha=0.0005, l1_ratio=.9, random_state=3))\n",
    "KRR = KernelRidge(alpha=0.6, kernel='polynomial', degree=2, coef0=2.5)\n",
    "GBoost = GradientBoostingRegressor(n_estimators=3000, learning_rate=0.05,\n",
    "                                   max_depth=4, max_features='sqrt',\n",
    "                                   min_samples_leaf=15, min_samples_split=10, \n",
    "                                   loss='huber', random_state =5)\n",
    "model_lgb = lgb.LGBMRegressor(objective='regression',num_leaves=5,\n",
    "                              learning_rate=0.05, n_estimators=720,\n",
    "                              max_bin = 55, bagging_fraction = 0.8,\n",
    "                              bagging_freq = 5, feature_fraction = 0.2319,\n",
    "                              feature_fraction_seed=9, bagging_seed=9,\n",
    "                              min_data_in_leaf =6, min_sum_hessian_in_leaf = 11)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 295,
   "id": "attempted-possession",
   "metadata": {},
   "outputs": [],
   "source": [
    "n_folds = 5\n",
    "\n",
    "def rmsle_cv(model):\n",
    "    kf = KFold(n_folds, shuffle=True, random_state=42).get_n_splits(train.values)\n",
    "    rmse= np.sqrt(-cross_val_score(model, train.values, y_train, scoring=\"neg_mean_squared_error\", cv = kf))\n",
    "    return(rmse)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 296,
   "id": "attached-hammer",
   "metadata": {},
   "outputs": [],
   "source": [
    "class AveragingModels(BaseEstimator, RegressorMixin, TransformerMixin):\n",
    "    def __init__(self, models):\n",
    "        self.models = models\n",
    "        \n",
    "    # we define clones of the original models to fit the data in\n",
    "    def fit(self, X, y):\n",
    "        self.models_ = [clone(x) for x in self.models]\n",
    "        \n",
    "        # Train cloned base models\n",
    "        for model in self.models_:\n",
    "            model.fit(X, y)\n",
    "\n",
    "        return self\n",
    "    \n",
    "    #Now we do the predictions for cloned models and average them\n",
    "    def predict(self, X):\n",
    "        predictions = np.column_stack([\n",
    "            model.predict(X) for model in self.models_\n",
    "        ])\n",
    "        return np.mean(predictions, axis=1)   "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 297,
   "id": "rational-daisy",
   "metadata": {},
   "outputs": [],
   "source": [
    "class StackingAveragedModels(BaseEstimator, RegressorMixin, TransformerMixin):\n",
    "    def __init__(self, base_models, meta_model, n_folds=5):\n",
    "        self.base_models = base_models\n",
    "        self.meta_model = meta_model\n",
    "        self.n_folds = n_folds\n",
    "   \n",
    "    # We again fit the data on clones of the original models\n",
    "    def fit(self, X, y):\n",
    "        self.base_models_ = [list() for x in self.base_models]\n",
    "        self.meta_model_ = clone(self.meta_model)\n",
    "        kfold = KFold(n_splits=self.n_folds, shuffle=True, random_state=156)\n",
    "        \n",
    "        # Train cloned base models then create out-of-fold predictions\n",
    "        # that are needed to train the cloned meta-model\n",
    "        out_of_fold_predictions = np.zeros((X.shape[0], len(self.base_models)))\n",
    "        for i, model in enumerate(self.base_models):\n",
    "            for train_index, holdout_index in kfold.split(X, y):\n",
    "                instance = clone(model)\n",
    "                self.base_models_[i].append(instance)\n",
    "                instance.fit(X[train_index], y[train_index])\n",
    "                y_pred = instance.predict(X[holdout_index])\n",
    "                out_of_fold_predictions[holdout_index, i] = y_pred\n",
    "                \n",
    "        # Now train the cloned  meta-model using the out-of-fold predictions as new feature\n",
    "        self.meta_model_.fit(out_of_fold_predictions, y)\n",
    "        return self\n",
    "   \n",
    "    #Do the predictions of all base models on the test data and use the averaged predictions as \n",
    "    #meta-features for the final prediction which is done by the meta-model\n",
    "    def predict(self, X):\n",
    "        meta_features = np.column_stack([\n",
    "            np.column_stack([model.predict(X) for model in base_models]).mean(axis=1)\n",
    "            for base_models in self.base_models_ ])\n",
    "        return self.meta_model_.predict(meta_features)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 298,
   "id": "featured-virus",
   "metadata": {},
   "outputs": [],
   "source": [
    "stacked_averaged_models = StackingAveragedModels(base_models = (ENet, GBoost, KRR),\n",
    "                                                 meta_model = lasso)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 299,
   "id": "assisted-abuse",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(557, 11)"
      ]
     },
     "execution_count": 299,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df1=[x for _, x in CO_Data.groupby('Month')]\n",
    "data_oct=df1[4]\n",
    "#data_oct=data_oct.sample(frac=1)\n",
    "data_nov=df1[5]\n",
    "#data_nov=data_nov.sample(frac=1)\n",
    "data_dec=df1[6]\n",
    "#data_dec=data_dec.sample(frac=1)\n",
    "data_jan=df1[0]\n",
    "#data_jan=data_jan.sample(frac=1)\n",
    "data_feb=df1[1]\n",
    "#data_feb=data_feb.sample(frac=1)\n",
    "data_mar=df1[2]\n",
    "#data_mar=data_mar.sample(frac=1)\n",
    "data_apr=df1[3]\n",
    "#data_apr=data_apr.sample(frac=1)\n",
    "data=[data_oct,data_nov,data_dec,data_jan,data_feb,data_mar]\n",
    "data_oct.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 300,
   "id": "viral-smell",
   "metadata": {},
   "outputs": [],
   "source": [
    "data_Oct=data_oct.resample('h').mean()\n",
    "data_Oct=data_Oct.dropna()\n",
    "data_Nov=data_nov.resample('h').mean()\n",
    "data_Nov=data_Nov.dropna()\n",
    "data_Dec=data_dec.resample('h').mean()\n",
    "data_Dec=data_Dec.dropna()\n",
    "data_Jan=data_jan.resample('h').mean()\n",
    "data_Jan=data_Jan.dropna()\n",
    "data_Feb=data_feb.resample('h').mean()\n",
    "data_Feb=data_Feb.dropna()\n",
    "data_Mar=data_mar.resample('h').mean()\n",
    "data_Mar=data_Mar.dropna()\n",
    "data_Apr=data_apr.resample('h').mean()\n",
    "data_Apr=data_Apr.dropna()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 301,
   "id": "prospective-detection",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[<matplotlib.lines.Line2D at 0x12cfbbbe0>]"
      ]
     },
     "execution_count": 301,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "Temp=data_Jan['RH'].to_list()\n",
    "len(Temp)\n",
    "\n",
    "ind=[i for i in range(len(Temp))]\n",
    "plt.plot(ind,Temp)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 302,
   "id": "experienced-acting",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Lab1</th>\n",
       "      <th>Temp</th>\n",
       "      <th>RH</th>\n",
       "      <th>Ref</th>\n",
       "      <th>Net Signal</th>\n",
       "      <th>Month</th>\n",
       "      <th>Day_of_week</th>\n",
       "      <th>Day</th>\n",
       "      <th>Hour</th>\n",
       "      <th>Ref_O3</th>\n",
       "      <th>Temp1</th>\n",
       "      <th>RH1</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Date</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2020-02-19 14:00:00</th>\n",
       "      <td>12.459923</td>\n",
       "      <td>15.451345</td>\n",
       "      <td>73.134562</td>\n",
       "      <td>16.232382</td>\n",
       "      <td>22.984666</td>\n",
       "      <td>2.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>19.0</td>\n",
       "      <td>14.0</td>\n",
       "      <td>21.418763</td>\n",
       "      <td>12.55</td>\n",
       "      <td>81.77</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2020-02-17 00:00:00</th>\n",
       "      <td>20.458047</td>\n",
       "      <td>8.655529</td>\n",
       "      <td>73.496020</td>\n",
       "      <td>16.638557</td>\n",
       "      <td>25.085423</td>\n",
       "      <td>2.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>17.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>13.491730</td>\n",
       "      <td>7.42</td>\n",
       "      <td>79.80</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2020-02-15 18:00:00</th>\n",
       "      <td>26.684077</td>\n",
       "      <td>11.408306</td>\n",
       "      <td>69.947722</td>\n",
       "      <td>12.747974</td>\n",
       "      <td>26.996082</td>\n",
       "      <td>2.0</td>\n",
       "      <td>5.0</td>\n",
       "      <td>15.0</td>\n",
       "      <td>18.0</td>\n",
       "      <td>28.181829</td>\n",
       "      <td>10.44</td>\n",
       "      <td>76.69</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2020-02-20 23:00:00</th>\n",
       "      <td>27.760694</td>\n",
       "      <td>12.535813</td>\n",
       "      <td>72.356844</td>\n",
       "      <td>27.285899</td>\n",
       "      <td>27.094741</td>\n",
       "      <td>2.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>20.0</td>\n",
       "      <td>23.0</td>\n",
       "      <td>7.657992</td>\n",
       "      <td>10.70</td>\n",
       "      <td>80.04</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2020-02-25 19:00:00</th>\n",
       "      <td>48.565612</td>\n",
       "      <td>13.419181</td>\n",
       "      <td>70.362762</td>\n",
       "      <td>24.118271</td>\n",
       "      <td>33.512992</td>\n",
       "      <td>2.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>25.0</td>\n",
       "      <td>19.0</td>\n",
       "      <td>14.579480</td>\n",
       "      <td>13.20</td>\n",
       "      <td>76.41</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                          Lab1       Temp         RH        Ref  Net Signal  \\\n",
       "Date                                                                          \n",
       "2020-02-19 14:00:00  12.459923  15.451345  73.134562  16.232382   22.984666   \n",
       "2020-02-17 00:00:00  20.458047   8.655529  73.496020  16.638557   25.085423   \n",
       "2020-02-15 18:00:00  26.684077  11.408306  69.947722  12.747974   26.996082   \n",
       "2020-02-20 23:00:00  27.760694  12.535813  72.356844  27.285899   27.094741   \n",
       "2020-02-25 19:00:00  48.565612  13.419181  70.362762  24.118271   33.512992   \n",
       "\n",
       "                     Month  Day_of_week   Day  Hour     Ref_O3  Temp1    RH1  \n",
       "Date                                                                          \n",
       "2020-02-19 14:00:00    2.0          2.0  19.0  14.0  21.418763  12.55  81.77  \n",
       "2020-02-17 00:00:00    2.0          0.0  17.0   0.0  13.491730   7.42  79.80  \n",
       "2020-02-15 18:00:00    2.0          5.0  15.0  18.0  28.181829  10.44  76.69  \n",
       "2020-02-20 23:00:00    2.0          3.0  20.0  23.0   7.657992  10.70  80.04  \n",
       "2020-02-25 19:00:00    2.0          1.0  25.0  19.0  14.579480  13.20  76.41  "
      ]
     },
     "execution_count": 302,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df2=[x for _, x in NO2_Data.groupby('Month')]\n",
    "data_oct2=df2[4]\n",
    "data_oct2=data_oct2.sample(frac=1)\n",
    "data_nov2=df2[5]\n",
    "data_nov2=data_nov2.sample(frac=1)\n",
    "data_dec2=df2[6]\n",
    "data_dec2=data_dec2.sample(frac=1)\n",
    "data_jan2=df2[0]\n",
    "data_jan2=data_jan2.sample(frac=1)\n",
    "data_feb2=df2[1]\n",
    "data_feb2=data_feb2.sample(frac=1)\n",
    "data_mar2=df2[2]\n",
    "data_mar2=data_mar2.sample(frac=1)\n",
    "data_apr2=df2[3]\n",
    "data_apr2=data_apr2.sample(frac=1)\n",
    "data=[data_oct2,data_nov2,data_dec2,data_jan2,data_feb2,data_mar2]\n",
    "data_feb2.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 303,
   "id": "natural-chocolate",
   "metadata": {},
   "outputs": [],
   "source": [
    "data_Oct2=data_oct2.resample('h').mean()\n",
    "data_Oct2=data_Oct2.dropna()\n",
    "data_Nov2=data_nov2.resample('h').mean()\n",
    "data_Nov2=data_Nov2.dropna()\n",
    "data_Dec2=data_dec2.resample('h').mean()\n",
    "data_Dec2=data_Dec2.dropna()\n",
    "data_Jan2=data_jan2.resample('h').mean()\n",
    "data_Jan2=data_Jan2.dropna()\n",
    "data_Feb2=data_feb2.resample('h').mean()\n",
    "data_Feb2=data_Feb2.dropna()\n",
    "data_Mar2=data_mar2.resample('h').mean()\n",
    "data_Mar2=data_Mar2.dropna()\n",
    "data_Apr2=data_apr2.resample('h').mean()\n",
    "data_Apr2=data_Apr2.dropna()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 304,
   "id": "controlled-removal",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Lab1</th>\n",
       "      <th>Temp</th>\n",
       "      <th>RH</th>\n",
       "      <th>Ref</th>\n",
       "      <th>Net Signal</th>\n",
       "      <th>Month</th>\n",
       "      <th>Day_of_week</th>\n",
       "      <th>Day</th>\n",
       "      <th>Hour</th>\n",
       "      <th>Ref_NO2</th>\n",
       "      <th>Temp1</th>\n",
       "      <th>RH1</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Date</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2020-02-19 17:00:00</th>\n",
       "      <td>69.251361</td>\n",
       "      <td>15.153357</td>\n",
       "      <td>70.067777</td>\n",
       "      <td>26.467372</td>\n",
       "      <td>5.383249</td>\n",
       "      <td>2.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>19.0</td>\n",
       "      <td>17.0</td>\n",
       "      <td>20.911023</td>\n",
       "      <td>13.87</td>\n",
       "      <td>74.51</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2020-02-28 22:00:00</th>\n",
       "      <td>58.254571</td>\n",
       "      <td>13.481567</td>\n",
       "      <td>86.937659</td>\n",
       "      <td>4.401883</td>\n",
       "      <td>9.982515</td>\n",
       "      <td>2.0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>28.0</td>\n",
       "      <td>22.0</td>\n",
       "      <td>28.713088</td>\n",
       "      <td>12.14</td>\n",
       "      <td>94.57</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2020-02-27 05:00:00</th>\n",
       "      <td>29.008167</td>\n",
       "      <td>9.288472</td>\n",
       "      <td>87.395094</td>\n",
       "      <td>3.780944</td>\n",
       "      <td>14.747071</td>\n",
       "      <td>2.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>27.0</td>\n",
       "      <td>5.0</td>\n",
       "      <td>15.227358</td>\n",
       "      <td>8.28</td>\n",
       "      <td>95.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2020-02-15 21:00:00</th>\n",
       "      <td>67.409873</td>\n",
       "      <td>11.393641</td>\n",
       "      <td>70.260506</td>\n",
       "      <td>27.902906</td>\n",
       "      <td>5.125010</td>\n",
       "      <td>2.0</td>\n",
       "      <td>5.0</td>\n",
       "      <td>15.0</td>\n",
       "      <td>21.0</td>\n",
       "      <td>13.021253</td>\n",
       "      <td>9.47</td>\n",
       "      <td>76.88</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2020-02-24 19:00:00</th>\n",
       "      <td>89.120927</td>\n",
       "      <td>12.548047</td>\n",
       "      <td>77.514024</td>\n",
       "      <td>21.970289</td>\n",
       "      <td>2.434405</td>\n",
       "      <td>2.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>24.0</td>\n",
       "      <td>19.0</td>\n",
       "      <td>18.018433</td>\n",
       "      <td>12.01</td>\n",
       "      <td>83.99</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                          Lab1       Temp         RH        Ref  Net Signal  \\\n",
       "Date                                                                          \n",
       "2020-02-19 17:00:00  69.251361  15.153357  70.067777  26.467372    5.383249   \n",
       "2020-02-28 22:00:00  58.254571  13.481567  86.937659   4.401883    9.982515   \n",
       "2020-02-27 05:00:00  29.008167   9.288472  87.395094   3.780944   14.747071   \n",
       "2020-02-15 21:00:00  67.409873  11.393641  70.260506  27.902906    5.125010   \n",
       "2020-02-24 19:00:00  89.120927  12.548047  77.514024  21.970289    2.434405   \n",
       "\n",
       "                     Month  Day_of_week   Day  Hour    Ref_NO2  Temp1    RH1  \n",
       "Date                                                                          \n",
       "2020-02-19 17:00:00    2.0          2.0  19.0  17.0  20.911023  13.87  74.51  \n",
       "2020-02-28 22:00:00    2.0          4.0  28.0  22.0  28.713088  12.14  94.57  \n",
       "2020-02-27 05:00:00    2.0          3.0  27.0   5.0  15.227358   8.28  95.00  \n",
       "2020-02-15 21:00:00    2.0          5.0  15.0  21.0  13.021253   9.47  76.88  \n",
       "2020-02-24 19:00:00    2.0          0.0  24.0  19.0  18.018433  12.01  83.99  "
      ]
     },
     "execution_count": 304,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df3=[x for _, x in O3_Data.groupby('Month')]\n",
    "data_oct3=df3[4]\n",
    "data_oct3=data_oct3.sample(frac=1)\n",
    "data_nov3=df3[5]\n",
    "data_nov3=data_nov3.sample(frac=1)\n",
    "data_dec3=df3[6]\n",
    "data_dec3=data_dec3.sample(frac=1)\n",
    "data_jan3=df3[0]\n",
    "data_jan3=data_jan3.sample(frac=1)\n",
    "data_feb3=df3[1]\n",
    "data_feb3=data_feb3.sample(frac=1)\n",
    "data_mar3=df3[2]\n",
    "data_mar3=data_mar3.sample(frac=1)\n",
    "data_apr3=df3[3]\n",
    "data_apr3=data_apr3.sample(frac=1)\n",
    "data=[data_oct3,data_nov3,data_dec3,data_jan3,data_feb3,data_mar3]\n",
    "data_feb3.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 305,
   "id": "black-antarctica",
   "metadata": {},
   "outputs": [],
   "source": [
    "data_Oct3=data_oct3.resample('h').mean()\n",
    "data_Oct3=data_Oct3.dropna()\n",
    "data_Nov3=data_nov3.resample('h').mean()\n",
    "data_Nov3=data_Nov3.dropna()\n",
    "data_Dec3=data_dec3.resample('h').mean()\n",
    "data_Dec3=data_Dec3.dropna()\n",
    "data_Jan3=data_jan3.resample('h').mean()\n",
    "data_Jan3=data_Jan3.dropna()\n",
    "data_Feb3=data_feb3.resample('h').mean()\n",
    "data_Feb3=data_Feb3.dropna()\n",
    "data_Mar3=data_mar3.resample('h').mean()\n",
    "data_Mar3=data_Mar3.dropna()\n",
    "data_Apr3=data_apr3.resample('h').mean()\n",
    "data_Apr3=data_Apr3.dropna()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 306,
   "id": "round-singer",
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.linear_model import LinearRegression\n",
    "lr = LinearRegression()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 307,
   "id": "peaceful-heritage",
   "metadata": {},
   "outputs": [],
   "source": [
    "from xgboost import  XGBRegressor\n",
    "from numpy import absolute\n",
    "from pandas import read_csv\n",
    "from sklearn.model_selection import cross_val_score\n",
    "from sklearn.model_selection import RepeatedKFold\n",
    "# create an xgboost regression model\n",
    "#n_estimators=10000, max_depth=5, eta=0.01, subsample=0.9,colsample_bytree=0.4,alpha=10\n",
    "model = XGBRegressor(n_estimators=10000, max_depth=5, eta=0.01, subsample=0.9, \n",
    "                     colsample_bytree=0.4,alpha=10)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "foreign-michael",
   "metadata": {},
   "source": [
    "# Mothly schemes"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "adult-interstate",
   "metadata": {},
   "source": [
    "# Oct 2019"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "capable-andrew",
   "metadata": {},
   "source": [
    "# RF"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 513,
   "id": "empirical-premium",
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.metrics import mean_absolute_error\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.linear_model import LinearRegression\n",
    "import sklearn.metrics as sm\n",
    "import matplotlib.pyplot as plt\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.linear_model import LinearRegression\n",
    "#from sklearn.metrics import mean_absolute_error as mae\n",
    "#from sklearn.metrics import mean_absolute_percentage_error\n",
    "import sklearn.metrics as sm\n",
    "import matplotlib.pyplot as plt\n",
    "import numpy as np\n",
    "from sklearn.ensemble import RandomForestRegressor\n",
    "  \n",
    " # create regressor object\n",
    "regressor = RandomForestRegressor(n_estimators = 500,min_samples_split= 2,min_samples_leaf= 1,max_features= 'sqrt', \n",
    "                                  random_state = 0,max_depth=None,bootstrap=False)\n",
    "\n",
    "\n",
    "X=data_Oct[['Net Signal','Temp1','RH1','Month','Day_of_week','Hour']]\n",
    "y=data_Oct['Ref']\n",
    "X_train, X_test, y_train, y_test=train_test_split(X,y,test_size=0.001, shuffle=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 514,
   "id": "atomic-grade",
   "metadata": {},
   "outputs": [],
   "source": [
    "Day=[2*i for i in range(1,21)]\n",
    "Rmse1_rf=[]\n",
    "RMSE1_rf=[]\n",
    "REU1=[]\n",
    "REU2=[]\n",
    "lv=2000\n",
    "L_y1=[]\n",
    "A1=[]\n",
    "M1=[]\n",
    "Bias=[]\n",
    "L=[]\n",
    "KK=[]\n",
    "D1=[]\n",
    "for i in range(1,10):\n",
    "    k=y_train[48*i:].to_list()\n",
    "    regressor.fit(X_train[:48*i], y_train[:48*i])\n",
    "    pred=regressor.predict(X_train[48*i:])\n",
    "    #model=stacked_averaged_models.fit(X_train[:48*i].values, y_train[:48*i])\n",
    "    #pred =model.predict(X_train[48*i:].values)\n",
    "    rmse=round(sm.r2_score(y_train[48*i:], pred), 2)\n",
    "    #mse=round(np.sqrt(sm.mean_squared_error(y_test, pred))/np.mean(y_test),2)\n",
    "    #rmse= mape=round(mean_absolute_percentage_error(y_test,pred),2)\n",
    "    #mse= mape=round(relative_mean_absolute_error(y_test,pred),2)\n",
    "    kk=round(np.corrcoef(y_train[48*i:], pred)[0, 1],2)\n",
    "    KK.append(kk)\n",
    "    mse=round(sMAE(y_train[48*i:], pred),2)\n",
    "    ind=[]\n",
    "    reu=REF(pred,y_train[48*i:],1)\n",
    "    re=REF2(pred,y_train[48*i:],1.3,lv)\n",
    "    U=np.sqrt(np.mean((0.25*np.array(y_train[48*i:]))**2))\n",
    "    #U=np.sqrt(np.mean((reu)**2))\n",
    "    RMSE=np.sqrt(np.mean((np.array(pred)-np.array(y_train[48*i:]))**2))\n",
    "    m=RMSE/(1*U)\n",
    "    b=(np.mean(pred)-np.mean(y_train[48*i:]))/np.mean(y_train[48*i:])\n",
    "    bias=(abs(b)*np.mean(y_train[48*i:])/(1.67*U))\n",
    "    l=1-(U/np.std(y_train[48*i:]))**2\n",
    "    d=IOA(y_train[48*i:], pred)\n",
    "    features=regressor.feature_importances_\n",
    "    Features.append(features)\n",
    "    D1.append(d)\n",
    "    L.append(l)\n",
    "    M1.append(m)\n",
    "    Bias.append(bias)\n",
    "    for i in range(len(reu)):\n",
    "        if reu[i]<30:\n",
    "            ind.append(i)\n",
    "    Rmse1_rf.append(mse)\n",
    "    RMSE1_rf.append(rmse)\n",
    "    REU1.append(reu)\n",
    "    L_y1.append(k)\n",
    "    REU2.append(round((len(ind)/len(reu))*100,2))\n",
    "    A1.append(re)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 515,
   "id": "thick-recipe",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[0.82, 0.84, 0.85, 0.86, 0.86, 0.86, 0.87, 0.86, 0.87]"
      ]
     },
     "execution_count": 515,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Rmse1_rf"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 516,
   "id": "common-portsmouth",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[0.81, 0.85, 0.87, 0.88, 0.88, 0.88, 0.89, 0.89, 0.88]"
      ]
     },
     "execution_count": 516,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "RMSE1_rf"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 517,
   "id": "moved-designation",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[0.746819534137138,\n",
       " 0.7496976843773016,\n",
       " 0.7532523760955868,\n",
       " 0.7569308084656091,\n",
       " 0.7635189563212044,\n",
       " 0.7666072103251881,\n",
       " 0.7678022804965046,\n",
       " 0.7758701919180353,\n",
       " 0.7663192205349536]"
      ]
     },
     "execution_count": 517,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "L"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 518,
   "id": "equal-radical",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[0.8762557952183853,\n",
       " 0.7737996490556973,\n",
       " 0.71305124405688,\n",
       " 0.7012963269579717,\n",
       " 0.7230374851967851,\n",
       " 0.7226875848251713,\n",
       " 0.6938604960965774,\n",
       " 0.711945920157279,\n",
       " 0.7310661422877555]"
      ]
     },
     "execution_count": 518,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "M1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 519,
   "id": "induced-entrepreneur",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[0.012615297237247322,\n",
       " 0.07348449663160482,\n",
       " 0.03839479243255392,\n",
       " 0.007025434463846232,\n",
       " 0.0017863364540289478,\n",
       " 0.010687233247903077,\n",
       " 0.012149223424522279,\n",
       " 5.3348952380622063e-05,\n",
       " 0.031340447714454184]"
      ]
     },
     "execution_count": 519,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Bias"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 522,
   "id": "least-uncertainty",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([0.69337902, 0.10217168, 0.06839326, 0.        , 0.02835822,\n",
       "       0.10769781])"
      ]
     },
     "execution_count": 522,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Features[8]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 521,
   "id": "modified-aquatic",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[0.91, 0.93, 0.94, 0.94, 0.94, 0.94, 0.94, 0.94, 0.94]"
      ]
     },
     "execution_count": 521,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "KK"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 324,
   "id": "bronze-apollo",
   "metadata": {},
   "outputs": [],
   "source": [
    "regressor.fit(X_train[:480], y_train[:480])\n",
    "pred=regressor.predict(X_train[480:])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 325,
   "id": "infinite-appreciation",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1.4000000000000004\n"
     ]
    }
   ],
   "source": [
    "lv=max\n",
    "A=[i for i in np.arange(1,3,0.1)]\n",
    "K=[]\n",
    "for i in A:\n",
    "    lv=max(y_train[480:])\n",
    "    k=REF2(pred,y_train[480:],i,lv)\n",
    "    K.append(k)\n",
    "for i in range(len(K)):\n",
    "    if K[i]==min(K):\n",
    "        print(A[i])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 377,
   "id": "continuous-adams",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[<matplotlib.lines.Line2D at 0x11eefa970>]"
      ]
     },
     "execution_count": 377,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.plot(A,K)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 394,
   "id": "mounted-founder",
   "metadata": {},
   "outputs": [],
   "source": [
    "X=data_Oct2[['Net Signal','Temp','RH','Month','Day_of_week','Day','Hour','Ref_O3']]\n",
    "y=data_Oct2['Ref']\n",
    "X_train, X_test, y_train, y_test=train_test_split(X,y,test_size=0.001, shuffle=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 395,
   "id": "informational-spirit",
   "metadata": {},
   "outputs": [],
   "source": [
    "Day=[2*i for i in range(1,21) ]\n",
    "Rmse1_rf2=[]\n",
    "RMSE1_rf2=[]\n",
    "M12=[]\n",
    "for i in range(1,10):\n",
    "    lr.fit(X_train[:48*i], y_train[:48*i])\n",
    "    pred=lr.predict(X_train[48*i:])\n",
    "    rmse=round(sm.r2_score(y_train[48*i:], pred), 2)\n",
    "    #mse=round(np.sqrt(sm.mean_squared_error(y_test, pred))/np.mean(y_test),2)\n",
    "    #rmse= mape=round(mean_absolute_percentage_error(y_test,pred),2)\n",
    "    #mse= mape=round(relative_mean_absolute_error(y_test,pred),2)\n",
    "    #rmse=round(np.corrcoef(y_test, pred)[0, 1],2)\n",
    "    mse=round(sMAE(y_train[48*i:], pred),2)\n",
    "    U=np.sqrt(np.mean((0.25*np.array(y_train[48*i:]))**2))\n",
    "    RMSE=np.sqrt(np.mean((np.array(pred)-np.array(y_train[48*i:]))**2))\n",
    "    m=RMSE/(1*U)\n",
    "    M12.append(m)\n",
    "    Rmse1_rf2.append(mse)\n",
    "    RMSE1_rf2.append(rmse)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 396,
   "id": "sensitive-allen",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[0.81, 0.81, 0.8, 0.81, 0.81, 0.82, 0.81, 0.82, 0.81]"
      ]
     },
     "execution_count": 396,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Rmse1_rf2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 397,
   "id": "fantastic-mailing",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[0.77, 0.78, 0.76, 0.78, 0.78, 0.81, 0.8, 0.82, 0.83]"
      ]
     },
     "execution_count": 397,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "RMSE1_rf2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 398,
   "id": "typical-scanner",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[0.8918987154146119,\n",
       " 0.8988138745957447,\n",
       " 0.910797137401033,\n",
       " 0.8754336822684581,\n",
       " 0.8681312697912759,\n",
       " 0.8278938435339536,\n",
       " 0.8467732040231097,\n",
       " 0.8306902545764285,\n",
       " 0.8317058304087671]"
      ]
     },
     "execution_count": 398,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "M12"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 399,
   "id": "prepared-manitoba",
   "metadata": {},
   "outputs": [],
   "source": [
    "X=data_Oct3[['Net Signal','Temp1','RH1','Month','Day_of_week','Day','Hour','Ref_NO2']]\n",
    "y=data_Oct3['Ref']\n",
    "X_train, X_test, y_train, y_test=train_test_split(X,y,test_size=0.001, shuffle=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 400,
   "id": "contemporary-chester",
   "metadata": {},
   "outputs": [],
   "source": [
    "Day=[2*i for i in range(1,21) ]\n",
    "Rmse1_rf3=[]\n",
    "RMSE1_rf3=[]\n",
    "M13=[]\n",
    "for i in range(1,10):\n",
    "    regressor.fit(X_train[:48*i], y_train[:48*i])\n",
    "    pred=regressor.predict(X_train[48*i:])\n",
    "    rmse=round(sm.r2_score(y_train[48*i:], pred), 2)\n",
    "    #mse=round(np.sqrt(sm.mean_squared_error(y_test, pred))/np.mean(y_test),2)\n",
    "    #rmse= mape=round(mean_absolute_percentage_error(y_test,pred),2)\n",
    "    #mse= mape=round(relative_mean_absolute_error(y_test,pred),2)\n",
    "    #rmse=round(np.corrcoef(y_test, pred)[0, 1],2)\n",
    "    mse=round(sMAE(y_train[48*i:], pred),2)\n",
    "    U=np.sqrt(np.mean((0.3*np.array(y_train[48*i:]))**2))\n",
    "    RMSE=np.sqrt(np.mean((np.array(pred)-np.array(y_train[48*i:]))**2))\n",
    "    m=RMSE/(1*U)\n",
    "    M13.append(m)\n",
    "    Rmse1_rf3.append(mse)\n",
    "    RMSE1_rf3.append(rmse)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 401,
   "id": "attempted-passion",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[0.73, 0.78, 0.82, 0.82, 0.83, 0.85, 0.85, 0.84, 0.86]"
      ]
     },
     "execution_count": 401,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Rmse1_rf3"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 402,
   "id": "surgical-venice",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[0.75, 0.83, 0.88, 0.89, 0.89, 0.92, 0.92, 0.89, 0.88]"
      ]
     },
     "execution_count": 402,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "RMSE1_rf3"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 403,
   "id": "frequent-blond",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[0.94148324003943,\n",
       " 0.7758340585901589,\n",
       " 0.6409801970738186,\n",
       " 0.6284674254830946,\n",
       " 0.6186052359738713,\n",
       " 0.5402426212549973,\n",
       " 0.5437515593421716,\n",
       " 0.5992704561604085,\n",
       " 0.5532990516112479]"
      ]
     },
     "execution_count": 403,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "M13"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "governmental-blues",
   "metadata": {},
   "source": [
    "# Nov 2019"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "incorrect-transmission",
   "metadata": {},
   "source": [
    "   #   RF"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 404,
   "id": "sound-limitation",
   "metadata": {},
   "outputs": [],
   "source": [
    "X=data_Nov[['Net Signal','Temp1','RH1','Month','Day_of_week','Day','Hour']]\n",
    "y=data_Nov['Ref']\n",
    "X_train, X_test, y_train, y_test=train_test_split(X,y,test_size=0.001,shuffle=True)\n",
    "A=np.array(y)/np.mean(y)\n",
    "A=sorted(A, reverse=True)\n",
    "sum2=sum(A[:100])\n",
    "mean2=np.std(y)/np.mean(y)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 405,
   "id": "central-equity",
   "metadata": {},
   "outputs": [],
   "source": [
    "Rmse2_rf=[]\n",
    "RMSE2_rf=[]\n",
    "REU2=[]\n",
    "L_y2=[]\n",
    "A2=[]\n",
    "M2=[]\n",
    "D2=[]\n",
    "for i in range(1,11):\n",
    "    k=y_train[48*i:].to_list()\n",
    "    regressor.fit(X_train[:48*i], y_train[:48*i])\n",
    "    pred=regressor.predict(X_train[48*i:])\n",
    "    reu=REF(pred,y_train[48*i:],1.3)\n",
    "    U=np.sqrt(np.mean((reu)**2))\n",
    "    #mse=round(sm.r2_score(y_test, pred), 2)\n",
    "    #mse=round(np.sqrt(sm.mean_squared_error(y_test, pred))/np.mean(y_test),2)\n",
    "    #rmse= mape=round(mean_absolute_percentage_error(y_test,pred),2)\n",
    "    #mse=round(relative_mean_absolute_error(y_test,pred)/np.mean(y_test),2)\n",
    "    #rmse=round(np.corrcoef(y_test, pred)[0, 1],2)\n",
    "    mse=round(sMAE(y_train[48*i:], pred),2)\n",
    "    rmse=round(sm.r2_score(y_train[48*i:], pred), 2)\n",
    "    U=np.sqrt(np.mean((0.25*np.array(y_train[48*i:]))**2))\n",
    "    #U=np.sqrt(np.mean((reu)**2))\n",
    "    RMSE=np.sqrt(np.mean((np.array(pred)-np.array(y_train[48*i:]))**2))\n",
    "    m=RMSE/(1*U)\n",
    "    d=IOA(y_train[48*i:], pred)\n",
    "    D2.append(d)\n",
    "    M2.append(m)\n",
    "    Rmse2_rf.append(mse)\n",
    "    RMSE2_rf.append(rmse)\n",
    "    reu=REF(pred,y_train[48*i:],1)\n",
    "    re=REF2(pred,y_train[48*i:],1.3,lv)\n",
    "    A2.append(re)\n",
    "    REU2.append(reu)\n",
    "    L_y2.append(k)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 406,
   "id": "herbal-shark",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[0.79, 0.83, 0.85, 0.88, 0.88, 0.88, 0.89, 0.88, 0.9, 0.92]"
      ]
     },
     "execution_count": 406,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Rmse2_rf"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 407,
   "id": "confident-international",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[0.74, 0.83, 0.89, 0.91, 0.93, 0.93, 0.94, 0.93, 0.95, 0.96]"
      ]
     },
     "execution_count": 407,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "RMSE2_rf"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 408,
   "id": "authorized-forth",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[0.7471731397963395,\n",
       " 0.7969215967311163,\n",
       " 0.8338274057798898,\n",
       " 0.8634603360326067,\n",
       " 0.8609906056525342,\n",
       " 0.867979710200144,\n",
       " 0.8814937798407375,\n",
       " 0.8688914840960725,\n",
       " 0.8834025346364504,\n",
       " 0.9069248896676446]"
      ]
     },
     "execution_count": 408,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "D2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 409,
   "id": "disturbed-montgomery",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[64.49431664732884,\n",
       " 49.204220554411,\n",
       " 34.015299738190954,\n",
       " 29.011281524185904,\n",
       " 21.211275416296154,\n",
       " 21.089854622308522,\n",
       " 21.32051138850614,\n",
       " 23.258568918145215,\n",
       " 18.70518110228462,\n",
       " 18.920495969439244]"
      ]
     },
     "execution_count": 409,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "A2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 410,
   "id": "acoustic-redhead",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[1.1639726666698875,\n",
       " 0.9368308334722069,\n",
       " 0.7559204201685725,\n",
       " 0.6791915765253693,\n",
       " 0.584178156974888,\n",
       " 0.5786689683975189,\n",
       " 0.5414675906569312,\n",
       " 0.5937544210357663,\n",
       " 0.4870201280689829,\n",
       " 0.4274243598211865]"
      ]
     },
     "execution_count": 410,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "M2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 411,
   "id": "willing-circular",
   "metadata": {},
   "outputs": [],
   "source": [
    "X=data_Nov2[['Net Signal','Temp','RH','Month','Day_of_week','Day','Hour','Ref_O3']]\n",
    "y=data_Nov2['Ref']\n",
    "X_train, X_test, y_train, y_test=train_test_split(X,y,test_size=0.001,shuffle=True)\n",
    "A=np.array(y)/np.mean(y)\n",
    "A=sorted(A, reverse=True)\n",
    "sum2=sum(A[:100])\n",
    "mean2=np.std(y)/np.mean(y)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 412,
   "id": "palestinian-shower",
   "metadata": {},
   "outputs": [],
   "source": [
    "Rmse2_rf2=[]\n",
    "RMSE2_rf2=[]\n",
    "M22=[]\n",
    "for i in range(1,11):\n",
    "    regressor.fit(X_train[:48*i], y_train[:48*i])\n",
    "    pred=regressor.predict(X_train[48*i:])\n",
    "    #mse=round(sm.r2_score(y_test, pred), 2)\n",
    "    #mse=round(np.sqrt(sm.mean_squared_error(y_test, pred))/np.mean(y_test),2)\n",
    "    #rmse= mape=round(mean_absolute_percentage_error(y_test,pred),2)\n",
    "    #mse=round(relative_mean_absolute_error(y_test,pred)/np.mean(y_test),2)\n",
    "    #rmse=round(np.corrcoef(y_test, pred)[0, 1],2)\n",
    "    mse=round(sMAE(y_train[48*i:], pred),2)\n",
    "    rmse=round(sm.r2_score(y_train[48*i:], pred), 2)\n",
    "    U=np.sqrt(np.mean((0.25*np.array(y_train[48*i:]))**2))\n",
    "    RMSE=np.sqrt(np.mean((np.array(pred)-np.array(y_train[48*i:]))**2))\n",
    "    m=RMSE/(1*U)\n",
    "    M22.append(m)\n",
    "    Rmse2_rf2.append(mse)\n",
    "    RMSE2_rf2.append(rmse)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 416,
   "id": "pretty-subject",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[0.8, 0.82, 0.83, 0.85, 0.85, 0.86, 0.88, 0.87, 0.89, 0.91]"
      ]
     },
     "execution_count": 416,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Rmse2_rf2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 417,
   "id": "exempt-belle",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[0.72, 0.77, 0.79, 0.81, 0.81, 0.86, 0.9, 0.91, 0.93, 0.95]"
      ]
     },
     "execution_count": 417,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "RMSE2_rf2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 418,
   "id": "stable-spine",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[0.9317827763442923,\n",
       " 0.8567803737418735,\n",
       " 0.8146301626989523,\n",
       " 0.7775966191783056,\n",
       " 0.7878582701020361,\n",
       " 0.666291844421199,\n",
       " 0.5636970237214797,\n",
       " 0.5714619993091893,\n",
       " 0.49187624520397183,\n",
       " 0.39133355910526324]"
      ]
     },
     "execution_count": 418,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "M22"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 419,
   "id": "answering-portable",
   "metadata": {},
   "outputs": [],
   "source": [
    "X=data_Nov3[['Net Signal','Temp1','RH1','Month','Day_of_week','Day','Hour','Ref_NO2']]\n",
    "y=data_Nov3['Ref']\n",
    "X_train, X_test, y_train, y_test=train_test_split(X,y,test_size=0.001,shuffle=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 421,
   "id": "three-gender",
   "metadata": {},
   "outputs": [],
   "source": [
    "Rmse2_rf3=[]\n",
    "RMSE2_rf3=[]\n",
    "M23=[]\n",
    "for i in range(1,10):\n",
    "    regressor.fit(X_train[:48*i], y_train[:48*i])\n",
    "    pred=regressor.predict(X_train[48*i:])\n",
    "    #mse=round(sm.r2_score(y_test, pred), 2)\n",
    "    #mse=round(np.sqrt(sm.mean_squared_error(y_test, pred))/np.mean(y_test),2)\n",
    "    #rmse= mape=round(mean_absolute_percentage_error(y_test,pred),2)\n",
    "    #mse=round(relative_mean_absolute_error(y_test,pred)/np.mean(y_test),2)\n",
    "    #rmse=round(np.corrcoef(y_test, pred)[0, 1],2)\n",
    "    mse=round(sMAE(y_train[48*i:], pred),2)\n",
    "    rmse=round(sm.r2_score(y_train[48*i:], pred), 2)\n",
    "    U=np.sqrt(np.mean((0.3*np.array(y_train[48*i:]))**2))\n",
    "    RMSE=np.sqrt(np.mean((np.array(pred)-np.array(y_train[48*i:]))**2))\n",
    "    m=RMSE/(1*U)\n",
    "    M23.append(m)\n",
    "    Rmse2_rf3.append(mse)\n",
    "    RMSE2_rf3.append(rmse)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 422,
   "id": "color-hypothetical",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[0.73, 0.77, 0.79, 0.8, 0.81, 0.84, 0.85, 0.85, 0.9]"
      ]
     },
     "execution_count": 422,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Rmse2_rf3"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 423,
   "id": "authorized-technical",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[0.82, 0.86, 0.9, 0.9, 0.91, 0.93, 0.94, 0.94, 0.96]"
      ]
     },
     "execution_count": 423,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "RMSE2_rf3"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 424,
   "id": "saved-mechanism",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[0.9129368350534977,\n",
       " 0.7804747121821702,\n",
       " 0.6848796292276318,\n",
       " 0.6816972941237925,\n",
       " 0.6679173298347174,\n",
       " 0.550038434475178,\n",
       " 0.5173127690011025,\n",
       " 0.49193967059292126,\n",
       " 0.3346932788987368]"
      ]
     },
     "execution_count": 424,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "M23"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "falling-conservation",
   "metadata": {},
   "source": [
    "# RF"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 425,
   "id": "electronic-nepal",
   "metadata": {},
   "outputs": [],
   "source": [
    "X=data_Dec[['Net Signal','Temp1','RH1','Month','Day_of_week','Day','Hour']]\n",
    "y=data_Dec['Ref']\n",
    "X_train, X_test, y_train, y_test=train_test_split(X,y,test_size=0.001,shuffle=True)\n",
    "A=np.array(y)/np.mean(y)\n",
    "A=sorted(A, reverse=True)\n",
    "sum3=sum(A[:100])\n",
    "mean3=np.std(y)/np.mean(y)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 426,
   "id": "enabling-manchester",
   "metadata": {},
   "outputs": [],
   "source": [
    "Rmse3_rf=[]\n",
    "RMSE3_rf=[]\n",
    "REU3=[]\n",
    "L_y3=[]\n",
    "A3=[]\n",
    "M3=[]\n",
    "for i in range(1,10):\n",
    "    k=y_train[48*i:].to_list()\n",
    "    #lv=max(y_train[48*i:])\n",
    "    regressor.fit(X_train[:48*i], y_train[:48*i])\n",
    "    pred=regressor.predict(X_train[48*i:])\n",
    "    reu=REF(pred,y_train[48*i:],1.6)\n",
    "    #U=np.sqrt(np.mean((reu)**2))\n",
    "    #mse=round(sm.r2_score(y_test, pred), 2)\n",
    "    #mse=round(np.sqrt(sm.mean_squared_error(y_test, pred))/np.mean(y_test),2)\n",
    "    #rmse= mape=round(mean_absolute_percentage_error(y_test,pred),2)\n",
    "    #mse= mape=round(relative_mean_absolute_error(y_test,pred),2)\n",
    "    #rmse=round(np.corrcoef(y_test, pred)[0, 1],2)\n",
    "    mse=round(sMAE(y_train[48*i:], pred),2)\n",
    "    rmse=round(sm.r2_score(y_train[48*i:], pred), 2)\n",
    "    U=np.sqrt(np.mean((0.25*np.array(y_train[48*i:]))**2))\n",
    "    RMSE=np.sqrt(np.mean((np.array(pred)-np.array(y_train[48*i:]))**2))\n",
    "    m=RMSE/(1*U)\n",
    "    M3.append(m)\n",
    "    Rmse3_rf.append(mse)\n",
    "    RMSE3_rf.append(rmse)\n",
    "    reu=REF(pred,y_train[48*i:],1)\n",
    "    re=REF2(pred,y_train[48*i:],1.3,lv)\n",
    "    A3.append(re)\n",
    "    REU3.append(reu)\n",
    "    L_y3.append(k)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 427,
   "id": "internal-prescription",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[0.75, 0.8, 0.83, 0.85, 0.85, 0.86, 0.85, 0.86, 0.86]"
      ]
     },
     "execution_count": 427,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Rmse3_rf"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 428,
   "id": "vocational-editor",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[0.64, 0.76, 0.82, 0.85, 0.86, 0.86, 0.84, 0.85, 0.87]"
      ]
     },
     "execution_count": 428,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "RMSE3_rf"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 431,
   "id": "crazy-contamination",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[51.912387978065965,\n",
       " 34.87227157937704,\n",
       " 36.61578228269232,\n",
       " 29.478337049459704,\n",
       " 25.757900915568182,\n",
       " 28.13074272757002,\n",
       " 30.928994179348702,\n",
       " 29.187809765858468,\n",
       " 31.665816563059828]"
      ]
     },
     "execution_count": 431,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "A3"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 432,
   "id": "advisory-stanley",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[1.246897949254946,\n",
       " 0.9789046385803896,\n",
       " 0.8618943035720379,\n",
       " 0.7651446273937679,\n",
       " 0.7301381758559198,\n",
       " 0.7261472774719422,\n",
       " 0.7633753080113975,\n",
       " 0.750263641464784,\n",
       " 0.7113630876159815]"
      ]
     },
     "execution_count": 432,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "M3"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 433,
   "id": "committed-giant",
   "metadata": {},
   "outputs": [],
   "source": [
    "X=data_Dec2[['Net Signal','Temp','RH','Month','Day_of_week','Day','Hour','Ref_O3']]\n",
    "y=data_Dec2['Ref']\n",
    "X_train, X_test, y_train, y_test=train_test_split(X,y,test_size=0.001,shuffle=True)\n",
    "A=np.array(y)/np.mean(y)\n",
    "A=sorted(A, reverse=True)\n",
    "sum3=sum(A[:100])\n",
    "mean3=np.std(y)/np.mean(y)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 434,
   "id": "extra-chosen",
   "metadata": {},
   "outputs": [],
   "source": [
    "Rmse3_rf2=[]\n",
    "RMSE3_rf2=[]\n",
    "M32=[]\n",
    "for i in range(1,11):\n",
    "    regressor.fit(X_train[:48*i], y_train[:48*i])\n",
    "    pred=regressor.predict(X_train[48*i:])\n",
    "    #mse=round(sm.r2_score(y_test, pred), 2)\n",
    "    #mse=round(np.sqrt(sm.mean_squared_error(y_test, pred))/np.mean(y_test),2)\n",
    "    #rmse= mape=round(mean_absolute_percentage_error(y_test,pred),2)\n",
    "    #mse= mape=round(relative_mean_absolute_error(y_test,pred),2)\n",
    "    #rmse=round(np.corrcoef(y_test, pred)[0, 1],2)\n",
    "    mse=round(sMAE(y_train[48*i:], pred),2)\n",
    "    rmse=round(sm.r2_score(y_train[48*i:], pred), 2)\n",
    "    U=np.sqrt(np.mean((0.25*np.array(y_train[48*i:]))**2))\n",
    "    RMSE=np.sqrt(np.mean((np.array(pred)-np.array(y_train[48*i:]))**2))\n",
    "    m=RMSE/(1*U)\n",
    "    M32.append(m)\n",
    "    Rmse3_rf2.append(mse)\n",
    "    RMSE3_rf2.append(rmse)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 435,
   "id": "understanding-turner",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[0.78, 0.84, 0.86, 0.87, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88]"
      ]
     },
     "execution_count": 435,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Rmse3_rf2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 436,
   "id": "sharp-involvement",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[0.66, 0.79, 0.85, 0.86, 0.88, 0.87, 0.88, 0.87, 0.86, 0.85]"
      ]
     },
     "execution_count": 436,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "RMSE3_rf2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 437,
   "id": "stone-stock",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[1.0131281504185792,\n",
       " 0.8034296055623973,\n",
       " 0.6689599259778652,\n",
       " 0.644246804562682,\n",
       " 0.5906525785283526,\n",
       " 0.6133789216463579,\n",
       " 0.597873485685313,\n",
       " 0.6217556846773731,\n",
       " 0.6480984259121942,\n",
       " 0.7117281181713604]"
      ]
     },
     "execution_count": 437,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "M32"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 438,
   "id": "respiratory-bailey",
   "metadata": {},
   "outputs": [],
   "source": [
    "X=data_Dec3[['Net Signal','Temp1','RH1','Month','Day_of_week','Day','Hour','Ref_NO2']]\n",
    "y=data_Dec3['Ref']\n",
    "X_train, X_test, y_train, y_test=train_test_split(X,y,test_size=0.001,shuffle=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 439,
   "id": "controlled-pittsburgh",
   "metadata": {},
   "outputs": [],
   "source": [
    "Rmse3_rf3=[]\n",
    "RMSE3_rf3=[]\n",
    "M33=[]\n",
    "for i in range(1,11):\n",
    "    regressor.fit(X_train[:48*i], y_train[:48*i])\n",
    "    pred=regressor.predict(X_train[48*i:])\n",
    "    #mse=round(sm.r2_score(y_test, pred), 2)\n",
    "    #mse=round(np.sqrt(sm.mean_squared_error(y_test, pred))/np.mean(y_test),2)\n",
    "    #rmse= mape=round(mean_absolute_percentage_error(y_test,pred),2)\n",
    "    #mse= mape=round(relative_mean_absolute_error(y_test,pred),2)\n",
    "    #rmse=round(np.corrcoef(y_test, pred)[0, 1],2)\n",
    "    mse=round(sMAE(y_train[48*i:], pred),2)\n",
    "    rmse=round(sm.r2_score(y_train[48*i:], pred), 2)\n",
    "    U=np.sqrt(np.mean((0.3*np.array(y_train[48*i:]))**2))\n",
    "    RMSE=np.sqrt(np.mean((np.array(pred)-np.array(y_train[48*i:]))**2))\n",
    "    m=RMSE/(1*U)\n",
    "    M33.append(m)\n",
    "    Rmse3_rf3.append(mse)\n",
    "    RMSE3_rf3.append(rmse)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 440,
   "id": "grateful-budapest",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[0.73, 0.73, 0.77, 0.78, 0.78, 0.79, 0.81, 0.83, 0.85, 0.86]"
      ]
     },
     "execution_count": 440,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Rmse3_rf3"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 441,
   "id": "clean-excuse",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[0.8, 0.82, 0.84, 0.86, 0.87, 0.88, 0.91, 0.92, 0.93, 0.94]"
      ]
     },
     "execution_count": 441,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "RMSE3_rf3"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 442,
   "id": "smoking-moderator",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[0.9157656808895019,\n",
       " 0.8800074128903361,\n",
       " 0.8033708720036081,\n",
       " 0.7610817661141481,\n",
       " 0.7552976144888209,\n",
       " 0.7246434986366443,\n",
       " 0.6267296329623894,\n",
       " 0.5711122889377345,\n",
       " 0.5307314148559037,\n",
       " 0.49597078678060763]"
      ]
     },
     "execution_count": 442,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "M33"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "maritime-seeker",
   "metadata": {},
   "source": [
    "# Jan 2020 "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "classical-emission",
   "metadata": {},
   "source": [
    "# RF"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 499,
   "id": "tight-least",
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.metrics import mean_absolute_error\n",
    "X=data_Jan[['Net Signal','Temp1','RH1','Month','Day_of_week','Hour']]\n",
    "y=data_Jan['Ref']\n",
    "X_train, X_test, y_train, y_test=train_test_split(X,y,test_size=0.001,shuffle=True)\n",
    "A=np.array(y)/np.mean(y)\n",
    "A=sorted(A, reverse=True)\n",
    "sum4=sum(A[:100])\n",
    "mean4=np.std(y)/np.mean(y)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 500,
   "id": "useful-seven",
   "metadata": {},
   "outputs": [],
   "source": [
    "Rmse4_rf=[]\n",
    "RMSE4_rf=[]\n",
    "REU4=[]\n",
    "L_y4=[]\n",
    "A4=[]\n",
    "M4=[]\n",
    "D4=[]\n",
    "Features=[]\n",
    "for i in range(1,10):\n",
    "    #lv=max(y_train[48*i:])\n",
    "    k=y_train[48*i:].to_list()\n",
    "    #regressor.fit(X_train[:48*i], y_train[:48*i])\n",
    "    model=regressor.fit(X_train[:48*i], y_train[:48*i])\n",
    "    pred=model.predict(X_train[48*i:])\n",
    "    #model=stacked_averaged_models.fit(X_train[:48*i].values, y_train[:48*i])\n",
    "    #pred =model.predict(X_train[48*i:].values)\n",
    "    #mse=round(sm.r2_score(y_test, pred), 2)\n",
    "    #mse=round(np.sqrt(sm.mean_squared_error(y_test, pred))/np.mean(y_test),2)\n",
    "    #mse= mape=round(mean_absolute_error(y_test,pred)/np.mean(y_test),2)\n",
    "    #mse= mape=round(relative_mean_absolute_error(y_test,pred),2)\n",
    "    #rmse=round(np.corrcoef(y_test, pred)[0, 1],2)\n",
    "    mse=round(sMAE(y_train[48*i:], pred),2)\n",
    "    rmse=round(sm.r2_score(y_train[48*i:], pred), 2)\n",
    "    U=np.sqrt(np.mean((0.25*np.array(y_train[48*i:]))**2))\n",
    "    RMSE=np.sqrt(np.mean((np.array(pred)-np.array(y_train[48*i:]))**2))\n",
    "    m=RMSE/(1*U)\n",
    "    d=IOA(y_train[48*i:], pred)\n",
    "    features=regressor.feature_importances_\n",
    "    Features.append(features)\n",
    "    D4.append(d)\n",
    "    M4.append(m)\n",
    "    Rmse4_rf.append(mse)\n",
    "    RMSE4_rf.append(rmse)\n",
    "    reu=REF(pred,y_train[48*i:],1)\n",
    "    re=REF2(pred,y_train[48*i:],20,lv)\n",
    "    A4.append(re)\n",
    "    REU4.append(reu)\n",
    "    L_y4.append(k)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 501,
   "id": "reliable-puzzle",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[0.75, 0.79, 0.8, 0.83, 0.84, 0.85, 0.85, 0.88, 0.89]"
      ]
     },
     "execution_count": 501,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Rmse4_rf"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 502,
   "id": "gentle-mobility",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[0.63, 0.68, 0.71, 0.76, 0.81, 0.86, 0.87, 0.9, 0.94]"
      ]
     },
     "execution_count": 502,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "RMSE4_rf"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 503,
   "id": "ordered-reliance",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[0.6486041594477232,\n",
       " 0.7199188778796889,\n",
       " 0.7468653078521281,\n",
       " 0.7812296818938782,\n",
       " 0.8041697605079067,\n",
       " 0.8159450123258158,\n",
       " 0.8292725483000878,\n",
       " 0.8591174462668585,\n",
       " 0.8770087306375319]"
      ]
     },
     "execution_count": 503,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "D4"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 504,
   "id": "south-portfolio",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([0.64575564, 0.11210216, 0.09033956, 0.        , 0.06278484,\n",
       "       0.0890178 ])"
      ]
     },
     "execution_count": 504,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Features[8]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 448,
   "id": "continuous-spokesman",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[1.3589624834399672,\n",
       " 1.1712502442699484,\n",
       " 0.9682728829451531,\n",
       " 1.0274575416306095,\n",
       " 0.9553684699970088,\n",
       " 1.0297684419668116,\n",
       " 0.8017461024922756,\n",
       " 0.8769252159943575,\n",
       " 0.9030359425676556]"
      ]
     },
     "execution_count": 448,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "M4"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 449,
   "id": "improving-tactics",
   "metadata": {},
   "outputs": [],
   "source": [
    "X=data_Jan2[['Net Signal','Temp','RH','Month','Day_of_week','Day','Hour','Ref_O3']]\n",
    "y=data_Jan2['Ref']\n",
    "X_train, X_test, y_train, y_test=train_test_split(X,y,test_size=0.001,shuffle=True)\n",
    "A=np.array(y)/np.mean(y)\n",
    "A=sorted(A, reverse=True)\n",
    "sum4=sum(A[:100])\n",
    "mean4=np.std(y)/np.mean(y)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 452,
   "id": "unexpected-waste",
   "metadata": {},
   "outputs": [],
   "source": [
    "Rmse4_rf2=[]\n",
    "RMSE4_rf2=[]\n",
    "M42=[]\n",
    "D42=[]\n",
    "for i in range(1,9):\n",
    "    regressor.fit(X_train[:48*i], y_train[:48*i])\n",
    "    pred=regressor.predict(X_train[48*i:])\n",
    "    #mse=round(sm.r2_score(y_test, pred), 2)\n",
    "    #mse=round(np.sqrt(sm.mean_squared_error(y_test, pred))/np.mean(y_test),2)\n",
    "    #mse= mape=round(mean_absolute_error(y_test,pred)/np.mean(y_test),2)\n",
    "    #mse= mape=round(relative_mean_absolute_error(y_test,pred),2)\n",
    "    #rmse=round(np.corrcoef(y_test, pred)[0, 1],2)\n",
    "    mse=round(sMAE(y_train[48*i:], pred),2)\n",
    "    rmse=round(sm.r2_score(y_train[48*i:], pred), 2)\n",
    "    U=np.sqrt(np.mean((0.25*np.array(y_train[48*i:]))**2))\n",
    "    RMSE=np.sqrt(np.mean((np.array(pred)-np.array(y_train[48*i:]))**2))\n",
    "    m=RMSE/(1*U)\n",
    "    d=IOA(y_train[48*i:], pred)\n",
    "    D42.append(d)\n",
    "    M42.append(m)\n",
    "    Rmse4_rf2.append(mse)\n",
    "    RMSE4_rf2.append(rmse)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 453,
   "id": "stuck-artwork",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[0.8, 0.82, 0.84, 0.85, 0.86, 0.87, 0.87, 0.87]"
      ]
     },
     "execution_count": 453,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Rmse4_rf2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 454,
   "id": "special-central",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[0.8, 0.82, 0.84, 0.85, 0.86, 0.87, 0.87, 0.87]"
      ]
     },
     "execution_count": 454,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Rmse4_rf2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 455,
   "id": "noble-zambia",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[0.701005247918098,\n",
       " 0.736620096637298,\n",
       " 0.7870895061529449,\n",
       " 0.8025885914738362,\n",
       " 0.8166017346860089,\n",
       " 0.8409164367830027,\n",
       " 0.8432508223285172,\n",
       " 0.8283145461791108]"
      ]
     },
     "execution_count": 455,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "D42"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 456,
   "id": "adapted-bottom",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[0.9027222311208112,\n",
       " 0.8121440119840099,\n",
       " 0.6887112340805349,\n",
       " 0.6539877435534651,\n",
       " 0.6291886489738742,\n",
       " 0.5804937140534687,\n",
       " 0.579197990306213,\n",
       " 0.5961892829623278]"
      ]
     },
     "execution_count": 456,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "M42"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 457,
   "id": "working-serial",
   "metadata": {},
   "outputs": [],
   "source": [
    "X=data_Jan3[['Net Signal','Temp1','RH1','Month','Day_of_week','Day','Hour','Ref_NO2']]\n",
    "y=data_Jan3['Ref']\n",
    "X_train, X_test, y_train, y_test=train_test_split(X,y,test_size=0.001,shuffle=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 459,
   "id": "advised-absorption",
   "metadata": {},
   "outputs": [],
   "source": [
    "Rmse4_rf3=[]\n",
    "RMSE4_rf3=[]\n",
    "M43=[]\n",
    "for i in range(1,10):\n",
    "    regressor.fit(X_train[:48*i], y_train[:48*i])\n",
    "    pred=regressor.predict(X_train[48*i:])\n",
    "    #mse=round(sm.r2_score(y_test, pred), 2)\n",
    "    #mse=round(np.sqrt(sm.mean_squared_error(y_test, pred))/np.mean(y_test),2)\n",
    "    #mse= mape=round(mean_absolute_error(y_test,pred)/np.mean(y_test),2)\n",
    "    #mse= mape=round(relative_mean_absolute_error(y_test,pred),2)\n",
    "    #rmse=round(np.corrcoef(y_test, pred)[0, 1],2)\n",
    "    mse=round(sMAE(y_train[48*i:], pred),2)\n",
    "    rmse=round(sm.r2_score(y_train[48*i:], pred), 2)\n",
    "    U=np.sqrt(np.mean((0.3*np.array(y_train[48*i:]))**2))\n",
    "    RMSE=np.sqrt(np.mean((np.array(pred)-np.array(y_train[48*i:]))**2))\n",
    "    m=RMSE/(1*U)\n",
    "    M43.append(m)\n",
    "    Rmse4_rf3.append(mse)\n",
    "    RMSE4_rf3.append(rmse)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 460,
   "id": "shaped-evolution",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[0.71, 0.79, 0.83, 0.84, 0.85, 0.87, 0.87, 0.89, 0.94]"
      ]
     },
     "execution_count": 460,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    " Rmse4_rf3"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 461,
   "id": "dying-preparation",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[0.74, 0.86, 0.9, 0.91, 0.92, 0.94, 0.94, 0.95, 0.98]"
      ]
     },
     "execution_count": 461,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "RMSE4_rf3"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 462,
   "id": "friendly-postage",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[0.9681936966807843,\n",
       " 0.713854288611812,\n",
       " 0.5933096620942327,\n",
       " 0.5487681539323594,\n",
       " 0.5237299731438627,\n",
       " 0.4640286700380617,\n",
       " 0.45950133059884124,\n",
       " 0.39868558468117987,\n",
       " 0.22304194487203183]"
      ]
     },
     "execution_count": 462,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "M43"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "passive-nursing",
   "metadata": {},
   "source": [
    "# Feb 2020"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "composite-beads",
   "metadata": {},
   "source": [
    "# RF"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "caring-conflict",
   "metadata": {},
   "source": [
    "X=data_Feb[['Net Signal','Lab1','Temp','RH','Month','Day_of_week','Day','Hour']]\n",
    "y=data_Feb['Ref']\n",
    "X_train, X_test, y_train, y_test=train_test_split(X,y,test_size=0.001,shuffle=True)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "adopted-wells",
   "metadata": {},
   "source": [
    "Rmse5_rf2=[]\n",
    "RMSE5_rf2=[]\n",
    "M52=[]\n",
    "for i in range(1,7):\n",
    "    regressor.fit(X_train[:48*i], y_train[:48*i])\n",
    "    pred=regressor.predict(X_train[48*i:])\n",
    "    #mse=round(sm.r2_score(y_test, pred), 2)\n",
    "    #mse=round(np.sqrt(sm.mean_squared_error(y_test, pred))/np.mean(y_test),2)\n",
    "    #rmse= mape=round(mean_absolute_percentage_error(y_test,pred),2)\n",
    "    #mse=round(relative_mean_absolute_error(y,pred),2)\n",
    "    #rmse=round(np.corrcoef(y_test, pred)[0, 1],2)\n",
    "    mse=round(sMAE(y_train[48*i:], pred),2)\n",
    "    rmse=round(sm.r2_score(y_train[48*i:], pred), 2)\n",
    "    U=np.sqrt(np.mean((0.15*np.array(y_train[48*i:]))**2))\n",
    "    RMSE=np.sqrt(np.mean((np.array(pred)-np.array(y_train[48*i:]))**2))\n",
    "    m=RMSE/(1.67*U)\n",
    "    M52.append(m)\n",
    "    Rmse5_rf2.append(mse)\n",
    "    RMSE5_rf2.append(rmse)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "rough-commercial",
   "metadata": {},
   "source": [
    "A=y.to_list()\n",
    "Ext_feb=[]\n",
    "for i in range(len(A)):\n",
    "    if A[i]>3*np.mean(A):\n",
    "        Ext_feb.append(i)\n",
    "N_Ext_feb=len(Ext_feb)\n",
    "N_Ext_feb"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "infinite-occasion",
   "metadata": {},
   "source": [
    "mean_feb=np.mean(y)\n",
    "N_feb=y.shape[0]\n",
    "Mean_Rmse_feb=np.mean(Rmse5_rf)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "institutional-promise",
   "metadata": {},
   "source": [
    "# March 2020"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "greenhouse-alberta",
   "metadata": {},
   "source": [
    "# RF"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 463,
   "id": "familiar-league",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(678, 7)"
      ]
     },
     "execution_count": 463,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X=data_Mar[['Net Signal','Temp','RH','Month','Day_of_week','Day','Hour']]\n",
    "y=data_Mar['Ref']\n",
    "X_train, X_test, y_train, y_test=train_test_split(X,y,test_size=0.0001,shuffle=False)\n",
    "A=np.array(y)/np.mean(y)\n",
    "A=sorted(A, reverse=True)\n",
    "sum6=sum(A[:100])\n",
    "mean6=np.std(y)/np.mean(y)\n",
    "X.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 464,
   "id": "based-allowance",
   "metadata": {},
   "outputs": [],
   "source": [
    "Rmse6_rf=[]\n",
    "RMSE6_rf=[]\n",
    "REU6=[]\n",
    "L_y6=[]\n",
    "A6=[]\n",
    "M5=[]\n",
    "S=[]\n",
    "D6=[]\n",
    "for i in range(1,11):\n",
    "    k=y_train[48*i:].to_list()\n",
    "    #lv=max(y_train[48*i:])\n",
    "    regressor.fit(X_train[:48*i], y_train[:48*i])\n",
    "    pred=regressor.predict(X_train[48*i:])\n",
    "    #mse=round(sm.r2_score(y_test, pred), 2)\n",
    "    #mse=round(np.sqrt(sm.mean_squared_error(y_test, pred))/np.mean(y_test),2)\n",
    "    #rmse= mape=round(mean_absolute_percentage_error(y_test,pred),2)\n",
    "    #mse=round(relative_mean_absolute_error(y,pred),2)\n",
    "    #rmse=round(np.corrcoef(y_test, pred)[0, 1],2)\n",
    "    mse=round(sMAE(y_train[48*i:], pred),2)\n",
    "    rmse=round(sm.r2_score(y_train[48*i:], pred), 2)\n",
    "    s=(np.mean(y_train[48*i:]))/(np.array(y_train[48*i:]))\n",
    "    U=np.sqrt(np.mean((0.25*np.array(y_train[48*i:]))**2))\n",
    "    RMSE=np.sqrt(np.mean((np.array(pred)-np.array(y_train[48*i:]))**2))\n",
    "    m=RMSE/(1*U)\n",
    "    d=IOA(y_train[48*i:], pred)\n",
    "    D6.append(d)\n",
    "    M5.append(m)\n",
    "    S.append(s)\n",
    "    Rmse6_rf.append(mse)\n",
    "    RMSE6_rf.append(rmse)\n",
    "    reu=REF(pred,y_train[48*i:],1)\n",
    "    re=REF2(pred,y_train[48*i:],1.2,lv)\n",
    "    A6.append(re)\n",
    "    REU6.append(reu)\n",
    "    L_y6.append(k)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 465,
   "id": "straight-english",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[0.65, 0.56, 0.65, 0.65, 0.68, 0.37, 0.66, 0.67, 0.62, 0.69]"
      ]
     },
     "execution_count": 465,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Rmse6_rf"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 466,
   "id": "trained-million",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[0.29, 0.21, 0.24, 0.22, 0.37, -0.48, 0.23, 0.27, 0.35, 0.43]"
      ]
     },
     "execution_count": 466,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "RMSE6_rf"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 467,
   "id": "inclusive-facing",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[0.5037508289626242,\n",
       " 0.48186665629940184,\n",
       " 0.4990737615398394,\n",
       " 0.51010298936836,\n",
       " 0.5238410706299866,\n",
       " 0.42715851509090674,\n",
       " 0.46475471261304846,\n",
       " 0.4825286171040556,\n",
       " 0.49240462947404273,\n",
       " 0.589056665179437]"
      ]
     },
     "execution_count": 467,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "D6"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 468,
   "id": "absent-commissioner",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[179.84188817538208,\n",
       " 84.23983824543481,\n",
       " 181.0708391248005,\n",
       " 168.7013768862514,\n",
       " 162.69508961766635,\n",
       " 60.61452608817667,\n",
       " 201.72232904946358,\n",
       " 202.60471113763762,\n",
       " 123.73332317344313,\n",
       " 129.3543203343543]"
      ]
     },
     "execution_count": 468,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "A6"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 469,
   "id": "utility-welding",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[1.783121814281204,\n",
       " 1.8755292448878083,\n",
       " 1.8038861592029058,\n",
       " 1.8167625065056188,\n",
       " 1.670298172195407,\n",
       " 2.536245120441309,\n",
       " 1.761055444952915,\n",
       " 1.7418864079714307,\n",
       " 1.6731767492486516,\n",
       " 1.5760338961475868]"
      ]
     },
     "execution_count": 469,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "M5"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 470,
   "id": "labeled-fancy",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.207260734311005"
      ]
     },
     "execution_count": 470,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "min(S[0])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 471,
   "id": "patient-character",
   "metadata": {},
   "outputs": [
    {
     "ename": "ValueError",
     "evalue": "operands could not be broadcast together with shapes (9,) (10,) ",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mValueError\u001b[0m                                Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-471-782689fae2c9>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mB\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0marray\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mA1\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m+\u001b[0m\u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0marray\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mA2\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m+\u001b[0m\u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0marray\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mA3\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m+\u001b[0m\u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0marray\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mA4\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m+\u001b[0m\u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0marray\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mA6\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      2\u001b[0m \u001b[0mB\u001b[0m\u001b[0;34m/\u001b[0m\u001b[0;36m5\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;31mValueError\u001b[0m: operands could not be broadcast together with shapes (9,) (10,) "
     ]
    }
   ],
   "source": [
    "B=np.array(A1)+np.array(A2)+np.array(A3)+np.array(A4)+np.array(A6)\n",
    "B/5"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "convenient-appeal",
   "metadata": {},
   "outputs": [],
   "source": [
    "REU_d1=list(REU1[0])+list(REU2[0])+list(REU3[0])+list(REU4[0])+list(REU6[0])\n",
    "REU_d2=list(REU1[1])+list(REU2[1])+list(REU3[1])+list(REU4[1])+list(REU6[1])\n",
    "REU_d3=list(REU1[2])+list(REU2[2])+list(REU3[2])+list(REU4[2])+list(REU6[2])\n",
    "REU_d4=list(REU1[3])+list(REU2[3])+list(REU3[3])+list(REU4[3])+list(REU6[3])\n",
    "REU_d5=list(REU1[4])+list(REU2[4])+list(REU3[4])+list(REU4[4])+list(REU6[4])\n",
    "REU_d6=list(REU1[5])+list(REU2[5])+list(REU3[5])+list(REU4[5])+list(REU6[5])\n",
    "REU_d7=list(REU1[6])+list(REU2[6])+list(REU3[6])+list(REU4[6])+list(REU6[6])\n",
    "REU_d8=list(REU1[7])+list(REU2[7])+list(REU3[7])+list(REU4[7])+list(REU6[7])\n",
    "REU_d9=list(REU1[8])+list(REU2[8])+list(REU3[8])+list(REU4[8])+list(REU6[8])\n",
    "REU_d10=list(REU1[9])+list(REU2[9])+list(REU3[9])+list(REU4[9])+list(REU6[9])\n",
    "\n",
    "REU=[REU_d1,REU_d2,REU_d3,REU_d4,REU_d5,REU_d6,REU_d7,REU_d8,REU_d9,REU_d10]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "existing-energy",
   "metadata": {},
   "outputs": [],
   "source": [
    "L_d1=list(L_y1[0])+list(L_y2[0])+list(L_y3[0])+list(L_y4[0])+list(L_y6[0])\n",
    "L_d2=list(L_y1[1])+list(L_y2[1])+list(L_y3[1])+list(L_y4[1])+list(L_y6[1])\n",
    "L_d3=list(L_y1[2])+list(L_y2[2])+list(L_y3[2])+list(L_y4[2])+list(L_y6[2])\n",
    "L_d4=list(L_y1[3])+list(L_y2[3])+list(L_y3[3])+list(L_y4[3])+list(L_y6[3])\n",
    "L_d5=list(L_y1[4])+list(L_y2[4])+list(L_y3[4])+list(L_y4[4])+list(L_y6[4])\n",
    "L_d6=list(L_y1[5])+list(L_y2[5])+list(L_y3[5])+list(L_y4[5])+list(L_y6[5])\n",
    "L_d7=list(L_y1[6])+list(L_y2[6])+list(L_y3[6])+list(L_y4[6])+list(L_y6[6])\n",
    "L_d8=list(L_y1[7])+list(L_y2[7])+list(L_y3[7])+list(L_y4[7])+list(L_y6[7])\n",
    "L_d9=list(L_y1[8])+list(L_y2[8])+list(L_y3[8])+list(L_y4[8])+list(L_y6[8])\n",
    "L_d10=list(L_y1[9])+list(L_y2[9])+list(L_y3[9])+list(L_y4[9])+list(L_y6[9])\n",
    "L=[L_d1,L_d2,L_d3,L_d4,L_d5,L_d6,L_d7,L_d8,L_d9,L_d10]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "direct-weekend",
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy.polynomial.polynomial as poly\n",
    "u_cal=REU\n",
    "L_y=L\n",
    "for i in range(len(REU)):\n",
    "    fig= plt.figure(figsize=(7,6))\n",
    "    ax = fig.add_subplot(111)\n",
    "    #ax.patch.set_facecolor('lightblue')\n",
    "    #ax.patch.set_alpha(0.1)\n",
    "    ind=[]\n",
    "    U_cal=[]\n",
    "    Ref=[]\n",
    "    dqo=[25 for i in range(len(Ref))]\n",
    "    plt.scatter(L_y[i],u_cal[i], color='#4B0082')\n",
    "    plt.axhline(y=25, color='black', linestyle='-.',linewidth=3)\n",
    "    plt.ylabel('Relative Expanded Uncertainty(%)', fontsize=16)\n",
    "    plt.xlabel('Reference CO concentration(ppb)',fontsize=16)\n",
    "    plt.grid(linestyle='-.',linewidth=0.1)\n",
    "    #plt.title('LAB',fontsize=18)\n",
    "    plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "assumed-mission",
   "metadata": {},
   "outputs": [],
   "source": [
    "X=data_Mar2[['Net Signal','Temp','RH','Month','Day_of_week','Day','Hour','Ref_O3']]\n",
    "y=data_Mar2['Ref']\n",
    "X_train, X_test, y_train, y_test=train_test_split(X,y,test_size=0.001,shuffle=False)\n",
    "A=np.array(y)/np.mean(y)\n",
    "A=sorted(A, reverse=True)\n",
    "sum6=sum(A[:100])\n",
    "mean6=np.std(y)/np.mean(y)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "sufficient-theater",
   "metadata": {},
   "outputs": [],
   "source": [
    "Rmse6_rf2=[]\n",
    "RMSE6_rf2=[]\n",
    "M52=[]\n",
    "for i in range(1,11):\n",
    "    regressor.fit(X_train[:48*i], y_train[:48*i])\n",
    "    pred=regressor.predict(X_train[48*i:])\n",
    "    #mse=round(sm.r2_score(y_test, pred), 2)\n",
    "    #mse=round(np.sqrt(sm.mean_squared_error(y_test, pred))/np.mean(y_test),2)\n",
    "    #rmse= mape=round(mean_absolute_percentage_error(y_test,pred),2)\n",
    "    #mse=round(relative_mean_absolute_error(y,pred),2)\n",
    "    #rmse=round(np.corrcoef(y_test, pred)[0, 1],2)\n",
    "    mse=round(sMAE(y_train[48*i:], pred),2)\n",
    "    rmse=round(sm.r2_score(y_train[48*i:], pred), 2)\n",
    "    U=np.sqrt(np.mean((0.15*np.array(y_train[48*i:]))**2))\n",
    "    RMSE=np.sqrt(np.mean((np.array(pred)-np.array(y_train[48*i:]))**2))\n",
    "    m=RMSE/(1.67*U)\n",
    "    M52.append(m)\n",
    "    Rmse6_rf2.append(mse)\n",
    "    RMSE6_rf2.append(rmse)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "scientific-vegetarian",
   "metadata": {},
   "outputs": [],
   "source": [
    " Rmse6_rf2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "exposed-madison",
   "metadata": {},
   "outputs": [],
   "source": [
    " RMSE6_rf2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "atmospheric-warning",
   "metadata": {},
   "outputs": [],
   "source": [
    "M52"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "similar-input",
   "metadata": {},
   "source": [
    "# April 2020"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "proof-locator",
   "metadata": {},
   "source": [
    "# RF"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "cooked-technique",
   "metadata": {},
   "source": [
    "X=data_Apr[['Net Signal','Lab1','Temp','RH','Month','Day_of_week','Day','Hour']]\n",
    "y=data_Apr['Ref']\n",
    "X_train, X_test, y_train, y_test=train_test_split(X,y,test_size=0.001,shuffle=True)\n",
    "A=np.array(y)/np.mean(y)\n",
    "A=sorted(A, reverse=True)\n",
    "sum7=sum(A[:100])\n",
    "mean7=np.std(y)/np.mean(y)\n",
    "Rmse10_rf2=[]\n",
    "RMSE10_rf2=[]\n",
    "M52=[]\n",
    "for i in range(1,5):\n",
    "    regressor.fit(X_train[:48*i], y_train[:48*i])\n",
    "    pred=regressor.predict(X_train[48*i:])\n",
    "    #mse=round(sm.r2_score(y_test, pred), 2)\n",
    "    #mse=round(np.sqrt(sm.mean_squared_error(y_test, pred))/np.mean(y_test),2)\n",
    "    #rmse= mape=round(mean_absolute_percentage_error(y_test,pred),2)\n",
    "    #mse=round(relative_mean_absolute_error(y,pred),2)\n",
    "    #rmse=round(np.corrcoef(y_test, pred)[0, 1],2)\n",
    "    mse=round(sMAE(y_train[48*i:], pred),2)\n",
    "    rmse=round(sm.r2_score(y_train[48*i:], pred), 2)\n",
    "    U=np.sqrt(np.mean((0.15*np.array(y_train[48*i:]))**2))\n",
    "    RMSE=np.sqrt(np.mean((np.array(pred)-np.array(y_train[48*i:]))**2))\n",
    "    m=RMSE/(1.67*U)\n",
    "    M52.append(m)\n",
    "    Rmse5_rf2.append(mse)\n",
    "    RMSE5_rf2.append(rmse)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "surprised-depth",
   "metadata": {},
   "outputs": [],
   "source": [
    "M52"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "minus-planning",
   "metadata": {},
   "source": [
    "A=y.to_list()\n",
    "Ext_apr=[]\n",
    "for i in range(len(A)):\n",
    "    if A[i]>3*np.mean(A):\n",
    "        Ext_apr.append(i)\n",
    "N_Ext_apr=len(Ext_apr)\n",
    "N_Ext_apr"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "comfortable-cathedral",
   "metadata": {},
   "source": [
    "mean_apr=np.mean(y)\n",
    "N_apr=y.shape[0]\n",
    "Mean_Rmse_apr=np.mean(Rmse10_rf)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "colonial-quest",
   "metadata": {},
   "source": [
    "Mean_Rmse=[Mean_Rmse_oct,Mean_Rmse_nov,Mean_Rmse_dec,Mean_Rmse_jan,Mean_Rmse_feb,Mean_Rmse_mar,Mean_Rmse_apr]\n",
    "Mean_conc=[mean_oct,mean_nov,mean_dec,mean_jan,mean_feb,mean_mar,mean_apr]\n",
    "N=[N_oct,N_nov,N_dec,N_jan,N_feb,N_mar,N_apr]\n",
    "N_Ext=[N_Ext_oct,N_Ext_nov,N_Ext_dec,N_Ext_jan,N_Ext_feb,N_Ext_mar,N_Ext_apr]\n",
    "\n",
    "Rmse=[]\n",
    "for i in range(10):\n",
    "    A=[Rmse1_rf[i],Rmse2_rf[i],Rmse3_rf[i],Rmse4_rf[i],Rmse5_rf[i],Rmse6_rf[i],Rmse10_rf[i]]\n",
    "    Rmse.append(A)\n",
    "RMSE=Rmse[0]+Rmse[1]+Rmse[2]+Rmse[3]+Rmse[4]+Rmse[5]+Rmse[6]+Rmse[7]\n",
    "Conc=Mean_conc+Mean_conc+Mean_conc+Mean_conc+Mean_conc+Mean_conc+Mean_conc+Mean_conc\n",
    "N_dp=N+N+N+N+N+N+N+N\n",
    "N_ext=N_Ext+N_Ext+N_Ext+N_Ext+N_Ext+N_Ext+N_Ext+N_Ext"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 476,
   "id": "editorial-marathon",
   "metadata": {},
   "outputs": [
    {
     "ename": "IndexError",
     "evalue": "list index out of range",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mIndexError\u001b[0m                                Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-476-1a6d4dea56e1>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m     12\u001b[0m \u001b[0mDay_8_rf\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mRMSE1_rf\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m7\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mRMSE2_rf\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m7\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mRMSE3_rf\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m7\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mRMSE4_rf\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m7\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mRMSE6_rf\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m7\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     13\u001b[0m \u001b[0mDay_9_rf\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mRMSE1_rf\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m8\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mRMSE2_rf\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m8\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mRMSE3_rf\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m8\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mRMSE4_rf\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m8\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mRMSE6_rf\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m8\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 14\u001b[0;31m \u001b[0mDay_10_rf\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mRMSE1_rf\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m9\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mRMSE2_rf\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m9\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mRMSE3_rf\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m9\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mRMSE4_rf\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m9\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mRMSE6_rf\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m9\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
      "\u001b[0;31mIndexError\u001b[0m: list index out of range"
     ]
    }
   ],
   "source": [
    "import plotly.express as px\n",
    "from IPython.display import Image\n",
    "import plotly.graph_objects as go\n",
    "import numpy as np\n",
    "Day_1_rf=[RMSE1_rf[0],RMSE2_rf[0],RMSE3_rf[0],RMSE4_rf[0],RMSE6_rf[0]]\n",
    "Day_2_rf=[RMSE1_rf[1],RMSE2_rf[1],RMSE3_rf[1],RMSE4_rf[1],RMSE6_rf[1]]\n",
    "Day_3_rf=[RMSE1_rf[2],RMSE2_rf[2],RMSE3_rf[2],RMSE4_rf[2],RMSE6_rf[2]]\n",
    "Day_4_rf=[RMSE1_rf[3],RMSE2_rf[3],RMSE3_rf[3],RMSE4_rf[3],RMSE6_rf[3]]\n",
    "Day_5_rf=[RMSE1_rf[4],RMSE2_rf[4],RMSE3_rf[4],RMSE4_rf[4],RMSE6_rf[4]]\n",
    "Day_6_rf=[RMSE1_rf[5],RMSE2_rf[5],RMSE3_rf[5],RMSE4_rf[5],RMSE6_rf[5]]\n",
    "Day_7_rf=[RMSE1_rf[6],RMSE2_rf[6],RMSE3_rf[6],RMSE4_rf[6],RMSE6_rf[6]]\n",
    "Day_8_rf=[RMSE1_rf[7],RMSE2_rf[7],RMSE3_rf[7],RMSE4_rf[7],RMSE6_rf[7]]\n",
    "Day_9_rf=[RMSE1_rf[8],RMSE2_rf[8],RMSE3_rf[8],RMSE4_rf[8],RMSE6_rf[8]]\n",
    "Day_10_rf=[RMSE1_rf[9],RMSE2_rf[9],RMSE3_rf[9],RMSE4_rf[9],RMSE6_rf[9]]"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "aboriginal-factory",
   "metadata": {},
   "source": [
    "Day_1_ann=[RMSE1_ann[0],RMSE2_ann[0],RMSE3_ann[0],RMSE4_ann[0],RMSE6_ann[0]]\n",
    "Day_2_ann=[RMSE1_ann[1],RMSE2_ann[1],RMSE3_ann[1],RMSE4_ann[1],RMSE6_ann[1]]\n",
    "Day_3_ann=[RMSE1_ann[2],RMSE2_ann[2],RMSE3_ann[2],RMSE4_ann[2],RMSE6_ann[2]]\n",
    "Day_4_ann=[RMSE1_ann[3],RMSE2_ann[3],RMSE3_ann[3],RMSE4_ann[3],RMSE6_ann[3]]\n",
    "Day_5_ann=[RMSE1_ann[4],RMSE2_ann[4],RMSE3_ann[4],RMSE4_ann[4],RMSE6_ann[4]]\n",
    "Day_6_ann=[RMSE1_ann[5],RMSE2_ann[5],RMSE3_ann[5],RMSE4_ann[5],RMSE6_ann[5]]\n",
    "Day_7_ann=[RMSE1_ann[6],RMSE2_ann[6],RMSE3_ann[6],RMSE4_ann[6],RMSE6_ann[6]]\n",
    "Day_8_ann=[RMSE1_ann[7],RMSE2_ann[7],RMSE3_ann[7],RMSE4_ann[7],RMSE6_ann[7]]\n",
    "Day_9_ann=[RMSE1_ann[8],RMSE2_ann[8],RMSE3_ann[8],RMSE4_ann[8],RMSE6_ann[8]]\n",
    "Day_10_ann=[RMSE1_ann[9],RMSE2_ann[9],RMSE3_ann[9],RMSE4_ann[9],RMSE6_ann[9]]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "aquatic-southeast",
   "metadata": {},
   "outputs": [],
   "source": [
    "Day_1_RF=[Rmse1_rf[0],Rmse2_rf[0],Rmse3_rf[0],Rmse4_rf[0],Rmse6_rf[0]]\n",
    "Day_2_RF=[Rmse1_rf[1],Rmse2_rf[1],Rmse3_rf[1],Rmse4_rf[1],Rmse6_rf[1]]\n",
    "Day_3_RF=[Rmse1_rf[2],Rmse2_rf[2],Rmse3_rf[2],Rmse4_rf[2],Rmse6_rf[2]]\n",
    "Day_4_RF=[Rmse1_rf[3],Rmse2_rf[3],Rmse3_rf[3],Rmse4_rf[3],Rmse6_rf[3]]\n",
    "Day_5_RF=[Rmse1_rf[4],Rmse2_rf[4],Rmse3_rf[4],Rmse4_rf[4],Rmse6_rf[4]]\n",
    "Day_6_RF=[Rmse1_rf[5],Rmse2_rf[5],Rmse3_rf[5],Rmse4_rf[5],Rmse6_rf[5]]\n",
    "Day_7_RF=[Rmse1_rf[6],Rmse2_rf[6],Rmse3_rf[6],Rmse4_rf[6],Rmse6_rf[6]]\n",
    "Day_8_RF=[Rmse1_rf[7],Rmse2_rf[7],Rmse3_rf[7],Rmse4_rf[7],Rmse6_rf[7]]\n",
    "Day_9_RF=[Rmse1_rf[8],Rmse2_rf[8],Rmse3_rf[8],Rmse4_rf[8],Rmse6_rf[8]]\n",
    "Day_10_RF=[Rmse1_rf[9],Rmse2_rf[9],Rmse3_rf[9],Rmse4_rf[9],Rmse6_rf[9]]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "supposed-decision",
   "metadata": {},
   "outputs": [],
   "source": [
    "Day_1_RF2=[Rmse1_rf2[0],Rmse2_rf2[0],Rmse3_rf2[0],Rmse4_rf2[0],Rmse6_rf2[0]]\n",
    "Day_2_RF2=[Rmse1_rf2[1],Rmse2_rf2[1],Rmse3_rf2[1],Rmse4_rf2[1],Rmse6_rf2[1]]\n",
    "Day_3_RF2=[Rmse1_rf2[2],Rmse2_rf2[2],Rmse3_rf2[2],Rmse4_rf2[2],Rmse6_rf2[2]]\n",
    "Day_4_RF2=[Rmse1_rf2[3],Rmse2_rf2[3],Rmse3_rf2[3],Rmse4_rf2[3],Rmse6_rf2[3]]\n",
    "Day_5_RF2=[Rmse1_rf2[4],Rmse2_rf2[4],Rmse3_rf2[4],Rmse4_rf2[4],Rmse6_rf2[4]]\n",
    "Day_6_RF2=[Rmse1_rf2[5],Rmse2_rf2[5],Rmse3_rf2[5],Rmse4_rf2[5],Rmse6_rf2[5]]\n",
    "Day_7_RF2=[Rmse1_rf2[6],Rmse2_rf2[6],Rmse3_rf2[6],Rmse4_rf2[6],Rmse6_rf2[6]]\n",
    "Day_8_RF2=[Rmse1_rf2[7],Rmse2_rf2[7],Rmse3_rf2[7],Rmse4_rf2[7],Rmse6_rf2[7]]\n",
    "Day_9_RF2=[Rmse1_rf2[8],Rmse2_rf2[8],Rmse3_rf2[8],Rmse4_rf2[8],Rmse6_rf2[8]]\n",
    "Day_10_RF2=[Rmse1_rf2[9],Rmse2_rf2[9],Rmse3_rf2[9],Rmse4_rf2[9],Rmse6_rf2[9]]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "visible-postage",
   "metadata": {},
   "outputs": [],
   "source": [
    "Mean=(np.array(Rmse1_rf)+np.array(Rmse2_rf)+np.array(Rmse3_rf)+np.array(Rmse4_rf)+np.array(Rmse6_rf))/5\n",
    "Mean=list(Mean)+list(Mean)+list(Mean)+list(Mean)\n",
    "Mean=sorted(Mean)\n",
    "\n",
    "Oct=sorted(Rmse1_rf+Rmse1_rf+Rmse1_rf+Rmse1_rf)\n",
    "Nov=sorted(Rmse2_rf+Rmse2_rf+Rmse2_rf+Rmse2_rf)\n",
    "Dec=sorted(Rmse3_rf+Rmse3_rf+Rmse3_rf+Rmse3_rf)\n",
    "Jan=sorted(Rmse4_rf+Rmse4_rf+Rmse4_rf+Rmse4_rf)\n",
    "Mar=sorted(Rmse6_rf+Rmse6_rf+Rmse6_rf+Rmse6_rf)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 478,
   "id": "mediterranean-figure",
   "metadata": {},
   "outputs": [],
   "source": [
    "Day_1_MPI=[M1[0],M2[0],M3[0],M4[0]]#M5[0]]\n",
    "Day_2_MPI=[M1[1],M2[1],M3[1],M4[1]]#M5[1]]\n",
    "Day_3_MPI=[M1[2],M2[2],M3[2],M4[2]]#M5[2]]\n",
    "Day_4_MPI=[M1[3],M2[3],M3[3],M4[3]]#M5[3]]\n",
    "Day_5_MPI=[M1[4],M2[4],M3[4],M4[4]]#M5[4]]\n",
    "Day_6_MPI=[M1[5],M2[5],M3[5],M4[5]]#M5[5]]\n",
    "Day_7_MPI=[M1[6],M2[6],M3[6],M4[6]]#M5[6]]\n",
    "Day_8_MPI=[M1[7],M2[7],M3[7],M4[7]]#M5[7]]\n",
    "Day_9_MPI=[M1[8],M2[8],M3[8],M4[8]]#M5[8]]\n",
    "#Day_10_MPI=[M1[9],M2[9],M3[9],M4[9]]#M5[9]]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 480,
   "id": "accepting-energy",
   "metadata": {},
   "outputs": [],
   "source": [
    "Day_1_MPI2=[M12[0],M22[0],M32[0],M42[0]]#,M52[0]]\n",
    "Day_2_MPI2=[M12[1],M22[1],M32[1],M42[1]]#,M52[1]]\n",
    "Day_3_MPI2=[M12[2],M22[2],M32[2],M42[2]]#,M52[2]]\n",
    "Day_4_MPI2=[M12[3],M22[3],M32[3],M42[3]]#,M52[3]]\n",
    "Day_5_MPI2=[M12[4],M22[4],M32[4],M42[4]]#,M52[4]]\n",
    "Day_6_MPI2=[M12[5],M22[5],M32[5],M42[5]]#,M52[5]]\n",
    "Day_7_MPI2=[M12[6],M22[6],M32[6],M42[6]]#,M52[6]]\n",
    "Day_8_MPI2=[M12[7],M22[7],M32[7],M42[7]]#,M52[7]]\n",
    "#Day_9_MPI2=[M12[8],M22[8],M32[8],M42[8]]#,M52[8]]\n",
    "#Day_10_MPI2=[M12[9],M22[9],M32[9],M42[9]]#,M52[9]]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 481,
   "id": "italian-muslim",
   "metadata": {},
   "outputs": [],
   "source": [
    "Day_1_MPI3=[M13[0],M23[0],M33[0],M43[0]]#,M52[0]]\n",
    "Day_2_MPI3=[M13[1],M23[1],M33[1],M43[1]]#,M52[1]]\n",
    "Day_3_MPI3=[M13[2],M23[2],M33[2],M43[2]]#,M52[2]]\n",
    "Day_4_MPI3=[M13[3],M23[3],M33[3],M43[3]]#,M52[3]]\n",
    "Day_5_MPI3=[M13[4],M23[4],M33[4],M43[4]]#,M52[4]]\n",
    "Day_6_MPI3=[M13[5],M23[5],M33[5],M43[5]]#,M52[5]]\n",
    "Day_7_MPI3=[M13[6],M23[6],M33[6],M43[6]]#,M52[6]]\n",
    "Day_8_MPI3=[M13[7],M23[7],M33[7],M43[7]]#,M52[7]]\n",
    "#Day_9_MPI3=[M13[8],M23[8],M33[8],M43[8]]#,M52[8]]\n",
    "#Day_10_MPI3=[M13[9],M23[9],M33[9],M43[9]]#,M52[9]]"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "elementary-italic",
   "metadata": {},
   "source": [
    "Day_1_ANN=[Rmse1_ann[0],Rmse2_ann[0],Rmse3_ann[0],Rmse4_ann[0],Rmse6_ann[0]]\n",
    "Day_2_ANN=[Rmse1_ann[1],Rmse2_ann[1],Rmse3_ann[1],Rmse4_ann[1],Rmse6_ann[1]]\n",
    "Day_3_ANN=[Rmse1_ann[2],Rmse2_ann[2],Rmse3_ann[2],Rmse4_ann[2],Rmse6_ann[2]]\n",
    "Day_4_ANN=[Rmse1_ann[3],Rmse2_ann[3],Rmse3_ann[3],Rmse4_ann[3],Rmse6_ann[3]]\n",
    "Day_5_ANN=[Rmse1_ann[4],Rmse2_ann[4],Rmse3_ann[4],Rmse4_ann[4],Rmse6_ann[4]]\n",
    "Day_6_ANN=[Rmse1_ann[5],Rmse2_ann[5],Rmse3_ann[5],Rmse4_ann[5],Rmse6_ann[5]]\n",
    "Day_7_ANN=[Rmse1_ann[6],Rmse2_ann[6],Rmse3_ann[6],Rmse4_ann[6],Rmse6_ann[6]]\n",
    "Day_8_ANN=[Rmse1_ann[7],Rmse2_ann[7],Rmse3_ann[7],Rmse4_ann[7],Rmse6_ann[7]]\n",
    "Day_9_ANN=[Rmse1_ann[8],Rmse2_ann[8],Rmse3_ann[8],Rmse4_ann[8],Rmse6_ann[8]]\n",
    "Day_10_ANN=[Rmse1_ann[9],Rmse2_ann[9],Rmse3_ann[9],Rmse4_ann[9],Rmse6_ann[9]]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 490,
   "id": "wrapped-harvard",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "40"
      ]
     },
     "execution_count": 490,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#RF_P=Day_1_rf+Day_2_rf+Day_3_rf+Day_4_rf+Day_5_rf+Day_6_rf+Day_7_rf+Day_8_rf+Day_9_rf+Day_10_rf\n",
    "#ANN_P=Day_1_ann+Day_2_ann+Day_3_ann+Day_4_ann+Day_5_ann+Day_6_ann+Day_7_ann+Day_8_ann+Day_9_ann+Day_10_ann\n",
    "#RF_R=Day_1_RF+Day_2_RF+Day_3_RF+Day_4_RF+Day_5_RF+Day_6_RF+Day_7_RF+Day_8_RF+Day_9_RF+Day_10_RF\n",
    "#RF_R2=Day_1_RF2+Day_2_RF2+Day_3_RF2+Day_4_RF2+Day_5_RF2+Day_6_RF2+Day_7_RF2+Day_8_RF2+Day_9_RF2+Day_10_RF2\n",
    "MPI=Day_1_MPI+Day_2_MPI+Day_3_MPI+Day_4_MPI+Day_5_MPI+Day_6_MPI+Day_7_MPI+Day_8_MPI#+Day_9_MPI+Day_10_MPI\n",
    "MPI2=Day_1_MPI2+Day_2_MPI2+Day_3_MPI2+Day_4_MPI2+Day_5_MPI2+Day_6_MPI2+Day_7_MPI2+Day_8_MPI2#+Day_9_MPI2+Day_10_MPI2\n",
    "MPI3=Day_1_MPI3+Day_2_MPI3+Day_3_MPI3+Day_4_MPI3+Day_5_MPI3+Day_6_MPI3+Day_7_MPI3+Day_8_MPI3#+Day_9_MPI3+Day_10_MPI3\n",
    "#ANN_R=Day_1_ANN+Day_2_ANN+Day_3_ANN+Day_4_ANN+Day_5_ANN+Day_6_ANN+Day_7_ANN+Day_8_ANN+Day_9_ANN+Day_10_ANN\n",
    "x0=['0' for i in range(4)]\n",
    "x1=['2' for i in range(4)]\n",
    "x2=['4' for i in range(4)]\n",
    "x3=['6' for i in range(4)]\n",
    "x4=['8' for i in range(4)]\n",
    "x5=['10' for i in range(4)]\n",
    "x6=['12' for i in range(4)]\n",
    "x7=['14' for i in range(4)]\n",
    "x8=['16' for i in range(4)]\n",
    "x9=['18' for i in range(4)]\n",
    "x10=['20' for i in range(4)]\n",
    "x11=['22' for i in range(4)]\n",
    "Reg=[1 for i in range(48)]\n",
    "Reg=[1 for i in range(48)]\n",
    "Spatial=[0.75 for i in range(60) ]\n",
    "Intervention=[0.7 for i in range(60) ]\n",
    "Hs_and_sp=[0.5 for i in range(60) ]\n",
    "reg=[0.9 for i in range(60)]\n",
    "spatial=[0.75 for i in range(60) ]\n",
    "intervention=[0.7 for i in range(60) ]\n",
    "\n",
    "x=x1+x2+x3+x4+x5+x6+x7+x8+x9+x10\n",
    "X=x0+x1+x2+x3+x4+x5+x6+x7+x8+x9+x10+x11\n",
    "len(x)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 491,
   "id": "confident-validation",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "application/vnd.plotly.v1+json": {
       "config": {
        "plotlyServerURL": "https://plot.ly"
       },
       "data": [
        {
         "marker": {
          "color": "darkblue"
         },
         "name": "$CO$",
         "showlegend": true,
         "type": "box",
         "x": [
          "2",
          "2",
          "2",
          "2",
          "4",
          "4",
          "4",
          "4",
          "6",
          "6",
          "6",
          "6",
          "8",
          "8",
          "8",
          "8",
          "10",
          "10",
          "10",
          "10",
          "12",
          "12",
          "12",
          "12",
          "14",
          "14",
          "14",
          "14",
          "16",
          "16",
          "16",
          "16",
          "18",
          "18",
          "18",
          "18",
          "20",
          "20",
          "20",
          "20"
         ],
         "y": [
          1.1166297874124358,
          1.1639726666698875,
          1.246897949254946,
          1.3589624834399672,
          0.8610134715320056,
          0.9368308334722069,
          0.9789046385803896,
          1.1712502442699484,
          0.7510682515240013,
          0.7559204201685725,
          0.8618943035720379,
          0.9682728829451531,
          0.7222121979353201,
          0.6791915765253693,
          0.7651446273937679,
          1.0274575416306095,
          0.6563530958049553,
          0.584178156974888,
          0.7301381758559198,
          0.9553684699970088,
          0.6770206421675192,
          0.5786689683975189,
          0.7261472774719422,
          1.0297684419668116,
          0.6390660830036627,
          0.5414675906569312,
          0.7633753080113975,
          0.8017461024922756,
          0.5465452512017122,
          0.5937544210357663,
          0.750263641464784,
          0.8769252159943575
         ]
        },
        {
         "marker": {
          "color": "Teal"
         },
         "name": "$NO_2$",
         "showlegend": true,
         "type": "box",
         "x": [
          "2",
          "2",
          "2",
          "2",
          "4",
          "4",
          "4",
          "4",
          "6",
          "6",
          "6",
          "6",
          "8",
          "8",
          "8",
          "8",
          "10",
          "10",
          "10",
          "10",
          "12",
          "12",
          "12",
          "12",
          "14",
          "14",
          "14",
          "14",
          "16",
          "16",
          "16",
          "16",
          "18",
          "18",
          "18",
          "18",
          "20",
          "20",
          "20",
          "20"
         ],
         "y": [
          0.8918987154146119,
          0.9317827763442923,
          1.0131281504185792,
          0.9027222311208112,
          0.8988138745957447,
          0.8567803737418735,
          0.8034296055623973,
          0.8121440119840099,
          0.910797137401033,
          0.8146301626989523,
          0.6689599259778652,
          0.6887112340805349,
          0.8754336822684581,
          0.7775966191783056,
          0.644246804562682,
          0.6539877435534651,
          0.8681312697912759,
          0.7878582701020361,
          0.5906525785283526,
          0.6291886489738742,
          0.8278938435339536,
          0.666291844421199,
          0.6133789216463579,
          0.5804937140534687,
          0.8467732040231097,
          0.5636970237214797,
          0.597873485685313,
          0.579197990306213,
          0.8306902545764285,
          0.5714619993091893,
          0.6217556846773731,
          0.5961892829623278
         ]
        },
        {
         "marker": {
          "color": "darkgoldenrod"
         },
         "name": "$O_3$",
         "showlegend": true,
         "type": "box",
         "x": [
          "2",
          "2",
          "2",
          "2",
          "4",
          "4",
          "4",
          "4",
          "6",
          "6",
          "6",
          "6",
          "8",
          "8",
          "8",
          "8",
          "10",
          "10",
          "10",
          "10",
          "12",
          "12",
          "12",
          "12",
          "14",
          "14",
          "14",
          "14",
          "16",
          "16",
          "16",
          "16",
          "18",
          "18",
          "18",
          "18",
          "20",
          "20",
          "20",
          "20"
         ],
         "y": [
          0.94148324003943,
          0.9129368350534977,
          0.9157656808895019,
          0.9681936966807843,
          0.7758340585901589,
          0.7804747121821702,
          0.8800074128903361,
          0.713854288611812,
          0.6409801970738186,
          0.6848796292276318,
          0.8033708720036081,
          0.5933096620942327,
          0.6284674254830946,
          0.6816972941237925,
          0.7610817661141481,
          0.5487681539323594,
          0.6186052359738713,
          0.6679173298347174,
          0.7552976144888209,
          0.5237299731438627,
          0.5402426212549973,
          0.550038434475178,
          0.7246434986366443,
          0.4640286700380617,
          0.5437515593421716,
          0.5173127690011025,
          0.6267296329623894,
          0.45950133059884124,
          0.5992704561604085,
          0.49193967059292126,
          0.5711122889377345,
          0.39868558468117987
         ]
        },
        {
         "connectgaps": true,
         "line": {
          "color": "navy",
          "dash": "dot",
          "shape": "linear",
          "width": 2.5
         },
         "mode": "lines",
         "name": "MPC",
         "showlegend": true,
         "type": "scatter",
         "x": [
          "0",
          "0",
          "0",
          "0",
          "2",
          "2",
          "2",
          "2",
          "4",
          "4",
          "4",
          "4",
          "6",
          "6",
          "6",
          "6",
          "8",
          "8",
          "8",
          "8",
          "10",
          "10",
          "10",
          "10",
          "12",
          "12",
          "12",
          "12",
          "14",
          "14",
          "14",
          "14",
          "16",
          "16",
          "16",
          "16",
          "18",
          "18",
          "18",
          "18",
          "20",
          "20",
          "20",
          "20",
          "22",
          "22",
          "22",
          "22"
         ],
         "y": [
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
         ]
        }
       ],
       "layout": {
        "autosize": true,
        "boxmode": "group",
        "height": 400,
        "legend": {
         "orientation": "h",
         "x": 0.3,
         "y": 0.8,
         "yanchor": "bottom"
        },
        "plot_bgcolor": "rgba(0,0,0,0)",
        "template": {
         "data": {
          "bar": [
           {
            "error_x": {
             "color": "#2a3f5f"
            },
            "error_y": {
             "color": "#2a3f5f"
            },
            "marker": {
             "line": {
              "color": "#E5ECF6",
              "width": 0.5
             }
            },
            "type": "bar"
           }
          ],
          "barpolar": [
           {
            "marker": {
             "line": {
              "color": "#E5ECF6",
              "width": 0.5
             }
            },
            "type": "barpolar"
           }
          ],
          "carpet": [
           {
            "aaxis": {
             "endlinecolor": "#2a3f5f",
             "gridcolor": "white",
             "linecolor": "white",
             "minorgridcolor": "white",
             "startlinecolor": "#2a3f5f"
            },
            "baxis": {
             "endlinecolor": "#2a3f5f",
             "gridcolor": "white",
             "linecolor": "white",
             "minorgridcolor": "white",
             "startlinecolor": "#2a3f5f"
            },
            "type": "carpet"
           }
          ],
          "choropleth": [
           {
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            },
            "type": "choropleth"
           }
          ],
          "contour": [
           {
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            },
            "colorscale": [
             [
              0,
              "#0d0887"
             ],
             [
              0.1111111111111111,
              "#46039f"
             ],
             [
              0.2222222222222222,
              "#7201a8"
             ],
             [
              0.3333333333333333,
              "#9c179e"
             ],
             [
              0.4444444444444444,
              "#bd3786"
             ],
             [
              0.5555555555555556,
              "#d8576b"
             ],
             [
              0.6666666666666666,
              "#ed7953"
             ],
             [
              0.7777777777777778,
              "#fb9f3a"
             ],
             [
              0.8888888888888888,
              "#fdca26"
             ],
             [
              1,
              "#f0f921"
             ]
            ],
            "type": "contour"
           }
          ],
          "contourcarpet": [
           {
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            },
            "type": "contourcarpet"
           }
          ],
          "heatmap": [
           {
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            },
            "colorscale": [
             [
              0,
              "#0d0887"
             ],
             [
              0.1111111111111111,
              "#46039f"
             ],
             [
              0.2222222222222222,
              "#7201a8"
             ],
             [
              0.3333333333333333,
              "#9c179e"
             ],
             [
              0.4444444444444444,
              "#bd3786"
             ],
             [
              0.5555555555555556,
              "#d8576b"
             ],
             [
              0.6666666666666666,
              "#ed7953"
             ],
             [
              0.7777777777777778,
              "#fb9f3a"
             ],
             [
              0.8888888888888888,
              "#fdca26"
             ],
             [
              1,
              "#f0f921"
             ]
            ],
            "type": "heatmap"
           }
          ],
          "heatmapgl": [
           {
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            },
            "colorscale": [
             [
              0,
              "#0d0887"
             ],
             [
              0.1111111111111111,
              "#46039f"
             ],
             [
              0.2222222222222222,
              "#7201a8"
             ],
             [
              0.3333333333333333,
              "#9c179e"
             ],
             [
              0.4444444444444444,
              "#bd3786"
             ],
             [
              0.5555555555555556,
              "#d8576b"
             ],
             [
              0.6666666666666666,
              "#ed7953"
             ],
             [
              0.7777777777777778,
              "#fb9f3a"
             ],
             [
              0.8888888888888888,
              "#fdca26"
             ],
             [
              1,
              "#f0f921"
             ]
            ],
            "type": "heatmapgl"
           }
          ],
          "histogram": [
           {
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "histogram"
           }
          ],
          "histogram2d": [
           {
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            },
            "colorscale": [
             [
              0,
              "#0d0887"
             ],
             [
              0.1111111111111111,
              "#46039f"
             ],
             [
              0.2222222222222222,
              "#7201a8"
             ],
             [
              0.3333333333333333,
              "#9c179e"
             ],
             [
              0.4444444444444444,
              "#bd3786"
             ],
             [
              0.5555555555555556,
              "#d8576b"
             ],
             [
              0.6666666666666666,
              "#ed7953"
             ],
             [
              0.7777777777777778,
              "#fb9f3a"
             ],
             [
              0.8888888888888888,
              "#fdca26"
             ],
             [
              1,
              "#f0f921"
             ]
            ],
            "type": "histogram2d"
           }
          ],
          "histogram2dcontour": [
           {
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            },
            "colorscale": [
             [
              0,
              "#0d0887"
             ],
             [
              0.1111111111111111,
              "#46039f"
             ],
             [
              0.2222222222222222,
              "#7201a8"
             ],
             [
              0.3333333333333333,
              "#9c179e"
             ],
             [
              0.4444444444444444,
              "#bd3786"
             ],
             [
              0.5555555555555556,
              "#d8576b"
             ],
             [
              0.6666666666666666,
              "#ed7953"
             ],
             [
              0.7777777777777778,
              "#fb9f3a"
             ],
             [
              0.8888888888888888,
              "#fdca26"
             ],
             [
              1,
              "#f0f921"
             ]
            ],
            "type": "histogram2dcontour"
           }
          ],
          "mesh3d": [
           {
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            },
            "type": "mesh3d"
           }
          ],
          "parcoords": [
           {
            "line": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "parcoords"
           }
          ],
          "pie": [
           {
            "automargin": true,
            "type": "pie"
           }
          ],
          "scatter": [
           {
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "scatter"
           }
          ],
          "scatter3d": [
           {
            "line": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "scatter3d"
           }
          ],
          "scattercarpet": [
           {
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "scattercarpet"
           }
          ],
          "scattergeo": [
           {
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "scattergeo"
           }
          ],
          "scattergl": [
           {
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "scattergl"
           }
          ],
          "scattermapbox": [
           {
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "scattermapbox"
           }
          ],
          "scatterpolar": [
           {
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "scatterpolar"
           }
          ],
          "scatterpolargl": [
           {
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "scatterpolargl"
           }
          ],
          "scatterternary": [
           {
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "scatterternary"
           }
          ],
          "surface": [
           {
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            },
            "colorscale": [
             [
              0,
              "#0d0887"
             ],
             [
              0.1111111111111111,
              "#46039f"
             ],
             [
              0.2222222222222222,
              "#7201a8"
             ],
             [
              0.3333333333333333,
              "#9c179e"
             ],
             [
              0.4444444444444444,
              "#bd3786"
             ],
             [
              0.5555555555555556,
              "#d8576b"
             ],
             [
              0.6666666666666666,
              "#ed7953"
             ],
             [
              0.7777777777777778,
              "#fb9f3a"
             ],
             [
              0.8888888888888888,
              "#fdca26"
             ],
             [
              1,
              "#f0f921"
             ]
            ],
            "type": "surface"
           }
          ],
          "table": [
           {
            "cells": {
             "fill": {
              "color": "#EBF0F8"
             },
             "line": {
              "color": "white"
             }
            },
            "header": {
             "fill": {
              "color": "#C8D4E3"
             },
             "line": {
              "color": "white"
             }
            },
            "type": "table"
           }
          ]
         },
         "layout": {
          "annotationdefaults": {
           "arrowcolor": "#2a3f5f",
           "arrowhead": 0,
           "arrowwidth": 1
          },
          "coloraxis": {
           "colorbar": {
            "outlinewidth": 0,
            "ticks": ""
           }
          },
          "colorscale": {
           "diverging": [
            [
             0,
             "#8e0152"
            ],
            [
             0.1,
             "#c51b7d"
            ],
            [
             0.2,
             "#de77ae"
            ],
            [
             0.3,
             "#f1b6da"
            ],
            [
             0.4,
             "#fde0ef"
            ],
            [
             0.5,
             "#f7f7f7"
            ],
            [
             0.6,
             "#e6f5d0"
            ],
            [
             0.7,
             "#b8e186"
            ],
            [
             0.8,
             "#7fbc41"
            ],
            [
             0.9,
             "#4d9221"
            ],
            [
             1,
             "#276419"
            ]
           ],
           "sequential": [
            [
             0,
             "#0d0887"
            ],
            [
             0.1111111111111111,
             "#46039f"
            ],
            [
             0.2222222222222222,
             "#7201a8"
            ],
            [
             0.3333333333333333,
             "#9c179e"
            ],
            [
             0.4444444444444444,
             "#bd3786"
            ],
            [
             0.5555555555555556,
             "#d8576b"
            ],
            [
             0.6666666666666666,
             "#ed7953"
            ],
            [
             0.7777777777777778,
             "#fb9f3a"
            ],
            [
             0.8888888888888888,
             "#fdca26"
            ],
            [
             1,
             "#f0f921"
            ]
           ],
           "sequentialminus": [
            [
             0,
             "#0d0887"
            ],
            [
             0.1111111111111111,
             "#46039f"
            ],
            [
             0.2222222222222222,
             "#7201a8"
            ],
            [
             0.3333333333333333,
             "#9c179e"
            ],
            [
             0.4444444444444444,
             "#bd3786"
            ],
            [
             0.5555555555555556,
             "#d8576b"
            ],
            [
             0.6666666666666666,
             "#ed7953"
            ],
            [
             0.7777777777777778,
             "#fb9f3a"
            ],
            [
             0.8888888888888888,
             "#fdca26"
            ],
            [
             1,
             "#f0f921"
            ]
           ]
          },
          "colorway": [
           "#636efa",
           "#EF553B",
           "#00cc96",
           "#ab63fa",
           "#FFA15A",
           "#19d3f3",
           "#FF6692",
           "#B6E880",
           "#FF97FF",
           "#FECB52"
          ],
          "font": {
           "color": "#2a3f5f"
          },
          "geo": {
           "bgcolor": "white",
           "lakecolor": "white",
           "landcolor": "#E5ECF6",
           "showlakes": true,
           "showland": true,
           "subunitcolor": "white"
          },
          "hoverlabel": {
           "align": "left"
          },
          "hovermode": "closest",
          "mapbox": {
           "style": "light"
          },
          "paper_bgcolor": "white",
          "plot_bgcolor": "#E5ECF6",
          "polar": {
           "angularaxis": {
            "gridcolor": "white",
            "linecolor": "white",
            "ticks": ""
           },
           "bgcolor": "#E5ECF6",
           "radialaxis": {
            "gridcolor": "white",
            "linecolor": "white",
            "ticks": ""
           }
          },
          "scene": {
           "xaxis": {
            "backgroundcolor": "#E5ECF6",
            "gridcolor": "white",
            "gridwidth": 2,
            "linecolor": "white",
            "showbackground": true,
            "ticks": "",
            "zerolinecolor": "white"
           },
           "yaxis": {
            "backgroundcolor": "#E5ECF6",
            "gridcolor": "white",
            "gridwidth": 2,
            "linecolor": "white",
            "showbackground": true,
            "ticks": "",
            "zerolinecolor": "white"
           },
           "zaxis": {
            "backgroundcolor": "#E5ECF6",
            "gridcolor": "white",
            "gridwidth": 2,
            "linecolor": "white",
            "showbackground": true,
            "ticks": "",
            "zerolinecolor": "white"
           }
          },
          "shapedefaults": {
           "line": {
            "color": "#2a3f5f"
           }
          },
          "ternary": {
           "aaxis": {
            "gridcolor": "white",
            "linecolor": "white",
            "ticks": ""
           },
           "baxis": {
            "gridcolor": "white",
            "linecolor": "white",
            "ticks": ""
           },
           "bgcolor": "#E5ECF6",
           "caxis": {
            "gridcolor": "white",
            "linecolor": "white",
            "ticks": ""
           }
          },
          "title": {
           "x": 0.05
          },
          "xaxis": {
           "automargin": true,
           "gridcolor": "white",
           "linecolor": "white",
           "ticks": "",
           "title": {
            "standoff": 15
           },
           "zerolinecolor": "white",
           "zerolinewidth": 2
          },
          "yaxis": {
           "automargin": true,
           "gridcolor": "white",
           "linecolor": "white",
           "ticks": "",
           "title": {
            "standoff": 15
           },
           "zerolinecolor": "white",
           "zerolinewidth": 2
          }
         }
        },
        "width": 1000,
        "xaxis": {
         "dtick": 2,
         "linecolor": "black",
         "linewidth": 1.4,
         "mirror": true,
         "tick0": 2,
         "tickfont": {
          "size": 16
         },
         "title": {
          "font": {
           "size": 24
          },
          "text": "Days of training"
         }
        },
        "yaxis": {
         "dtick": 0.2,
         "linecolor": "black",
         "linewidth": 1.4,
         "mirror": true,
         "range": [
          0.4,
          1.5
         ],
         "tick0": 0.2,
         "tickfont": {
          "size": 16
         },
         "title": {
          "font": {
           "size": 24
          },
          "text": "MQI"
         }
        }
       }
      },
      "text/html": [
       "<div>                            <div id=\"55cb8067-a808-4f86-8d4d-1926eb0eaba2\" class=\"plotly-graph-div\" style=\"height:400px; width:1000px;\"></div>            <script type=\"text/javascript\">                require([\"plotly\"], function(Plotly) {                    window.PLOTLYENV=window.PLOTLYENV || {};                                    if (document.getElementById(\"55cb8067-a808-4f86-8d4d-1926eb0eaba2\")) {                    Plotly.newPlot(                        \"55cb8067-a808-4f86-8d4d-1926eb0eaba2\",                        [{\"marker\": {\"color\": \"darkblue\"}, \"name\": \"$CO$\", \"showlegend\": true, \"type\": \"box\", \"x\": [\"2\", \"2\", \"2\", \"2\", \"4\", \"4\", \"4\", \"4\", \"6\", \"6\", \"6\", \"6\", \"8\", \"8\", \"8\", \"8\", \"10\", \"10\", \"10\", \"10\", \"12\", \"12\", \"12\", \"12\", \"14\", \"14\", \"14\", \"14\", \"16\", \"16\", \"16\", \"16\", \"18\", \"18\", \"18\", \"18\", \"20\", \"20\", \"20\", \"20\"], \"y\": [1.1166297874124358, 1.1639726666698875, 1.246897949254946, 1.3589624834399672, 0.8610134715320056, 0.9368308334722069, 0.9789046385803896, 1.1712502442699484, 0.7510682515240013, 0.7559204201685725, 0.8618943035720379, 0.9682728829451531, 0.7222121979353201, 0.6791915765253693, 0.7651446273937679, 1.0274575416306095, 0.6563530958049553, 0.584178156974888, 0.7301381758559198, 0.9553684699970088, 0.6770206421675192, 0.5786689683975189, 0.7261472774719422, 1.0297684419668116, 0.6390660830036627, 0.5414675906569312, 0.7633753080113975, 0.8017461024922756, 0.5465452512017122, 0.5937544210357663, 0.750263641464784, 0.8769252159943575]}, {\"marker\": {\"color\": \"Teal\"}, \"name\": \"$NO_2$\", \"showlegend\": true, \"type\": \"box\", \"x\": [\"2\", \"2\", \"2\", \"2\", \"4\", \"4\", \"4\", \"4\", \"6\", \"6\", \"6\", \"6\", \"8\", \"8\", \"8\", \"8\", \"10\", \"10\", \"10\", \"10\", \"12\", \"12\", \"12\", \"12\", \"14\", \"14\", \"14\", \"14\", \"16\", \"16\", \"16\", \"16\", \"18\", \"18\", \"18\", \"18\", \"20\", \"20\", \"20\", \"20\"], \"y\": [0.8918987154146119, 0.9317827763442923, 1.0131281504185792, 0.9027222311208112, 0.8988138745957447, 0.8567803737418735, 0.8034296055623973, 0.8121440119840099, 0.910797137401033, 0.8146301626989523, 0.6689599259778652, 0.6887112340805349, 0.8754336822684581, 0.7775966191783056, 0.644246804562682, 0.6539877435534651, 0.8681312697912759, 0.7878582701020361, 0.5906525785283526, 0.6291886489738742, 0.8278938435339536, 0.666291844421199, 0.6133789216463579, 0.5804937140534687, 0.8467732040231097, 0.5636970237214797, 0.597873485685313, 0.579197990306213, 0.8306902545764285, 0.5714619993091893, 0.6217556846773731, 0.5961892829623278]}, {\"marker\": {\"color\": \"darkgoldenrod\"}, \"name\": \"$O_3$\", \"showlegend\": true, \"type\": \"box\", \"x\": [\"2\", \"2\", \"2\", \"2\", \"4\", \"4\", \"4\", \"4\", \"6\", \"6\", \"6\", \"6\", \"8\", \"8\", \"8\", \"8\", \"10\", \"10\", \"10\", \"10\", \"12\", \"12\", \"12\", \"12\", \"14\", \"14\", \"14\", \"14\", \"16\", \"16\", \"16\", \"16\", \"18\", \"18\", \"18\", \"18\", \"20\", \"20\", \"20\", \"20\"], \"y\": [0.94148324003943, 0.9129368350534977, 0.9157656808895019, 0.9681936966807843, 0.7758340585901589, 0.7804747121821702, 0.8800074128903361, 0.713854288611812, 0.6409801970738186, 0.6848796292276318, 0.8033708720036081, 0.5933096620942327, 0.6284674254830946, 0.6816972941237925, 0.7610817661141481, 0.5487681539323594, 0.6186052359738713, 0.6679173298347174, 0.7552976144888209, 0.5237299731438627, 0.5402426212549973, 0.550038434475178, 0.7246434986366443, 0.4640286700380617, 0.5437515593421716, 0.5173127690011025, 0.6267296329623894, 0.45950133059884124, 0.5992704561604085, 0.49193967059292126, 0.5711122889377345, 0.39868558468117987]}, {\"connectgaps\": true, \"line\": {\"color\": \"navy\", \"dash\": \"dot\", \"shape\": \"linear\", \"width\": 2.5}, \"mode\": \"lines\", \"name\": \"MPC\", \"showlegend\": true, \"type\": \"scatter\", \"x\": [\"0\", \"0\", \"0\", \"0\", \"2\", \"2\", \"2\", \"2\", \"4\", \"4\", \"4\", \"4\", \"6\", \"6\", \"6\", \"6\", \"8\", \"8\", \"8\", \"8\", \"10\", \"10\", \"10\", \"10\", \"12\", \"12\", \"12\", \"12\", \"14\", \"14\", \"14\", \"14\", \"16\", \"16\", \"16\", \"16\", \"18\", \"18\", \"18\", \"18\", \"20\", \"20\", \"20\", \"20\", \"22\", \"22\", \"22\", \"22\"], \"y\": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]}],                        {\"autosize\": true, \"boxmode\": \"group\", \"height\": 400, \"legend\": {\"orientation\": \"h\", \"x\": 0.3, \"y\": 0.8, \"yanchor\": \"bottom\"}, \"plot_bgcolor\": \"rgba(0,0,0,0)\", \"template\": {\"data\": {\"bar\": [{\"error_x\": {\"color\": \"#2a3f5f\"}, \"error_y\": {\"color\": \"#2a3f5f\"}, \"marker\": {\"line\": {\"color\": \"#E5ECF6\", \"width\": 0.5}}, \"type\": \"bar\"}], \"barpolar\": [{\"marker\": {\"line\": {\"color\": \"#E5ECF6\", \"width\": 0.5}}, \"type\": \"barpolar\"}], \"carpet\": [{\"aaxis\": {\"endlinecolor\": \"#2a3f5f\", \"gridcolor\": \"white\", \"linecolor\": \"white\", \"minorgridcolor\": \"white\", \"startlinecolor\": \"#2a3f5f\"}, \"baxis\": {\"endlinecolor\": \"#2a3f5f\", \"gridcolor\": \"white\", \"linecolor\": \"white\", \"minorgridcolor\": \"white\", \"startlinecolor\": \"#2a3f5f\"}, \"type\": \"carpet\"}], \"choropleth\": [{\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}, \"type\": \"choropleth\"}], \"contour\": [{\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}, \"colorscale\": [[0.0, \"#0d0887\"], [0.1111111111111111, \"#46039f\"], [0.2222222222222222, \"#7201a8\"], [0.3333333333333333, \"#9c179e\"], [0.4444444444444444, \"#bd3786\"], [0.5555555555555556, \"#d8576b\"], [0.6666666666666666, \"#ed7953\"], [0.7777777777777778, \"#fb9f3a\"], [0.8888888888888888, \"#fdca26\"], [1.0, \"#f0f921\"]], \"type\": \"contour\"}], \"contourcarpet\": [{\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}, \"type\": \"contourcarpet\"}], \"heatmap\": [{\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}, \"colorscale\": [[0.0, \"#0d0887\"], [0.1111111111111111, \"#46039f\"], [0.2222222222222222, \"#7201a8\"], [0.3333333333333333, \"#9c179e\"], [0.4444444444444444, \"#bd3786\"], [0.5555555555555556, \"#d8576b\"], [0.6666666666666666, \"#ed7953\"], [0.7777777777777778, \"#fb9f3a\"], [0.8888888888888888, \"#fdca26\"], [1.0, \"#f0f921\"]], \"type\": \"heatmap\"}], \"heatmapgl\": [{\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}, \"colorscale\": [[0.0, \"#0d0887\"], [0.1111111111111111, \"#46039f\"], [0.2222222222222222, \"#7201a8\"], [0.3333333333333333, \"#9c179e\"], [0.4444444444444444, \"#bd3786\"], [0.5555555555555556, \"#d8576b\"], [0.6666666666666666, \"#ed7953\"], [0.7777777777777778, \"#fb9f3a\"], [0.8888888888888888, \"#fdca26\"], [1.0, \"#f0f921\"]], \"type\": \"heatmapgl\"}], \"histogram\": [{\"marker\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"histogram\"}], \"histogram2d\": [{\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}, \"colorscale\": [[0.0, \"#0d0887\"], [0.1111111111111111, \"#46039f\"], [0.2222222222222222, \"#7201a8\"], [0.3333333333333333, \"#9c179e\"], [0.4444444444444444, \"#bd3786\"], [0.5555555555555556, \"#d8576b\"], [0.6666666666666666, \"#ed7953\"], [0.7777777777777778, \"#fb9f3a\"], [0.8888888888888888, \"#fdca26\"], [1.0, \"#f0f921\"]], \"type\": \"histogram2d\"}], \"histogram2dcontour\": [{\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}, \"colorscale\": [[0.0, \"#0d0887\"], [0.1111111111111111, \"#46039f\"], [0.2222222222222222, \"#7201a8\"], [0.3333333333333333, \"#9c179e\"], [0.4444444444444444, \"#bd3786\"], [0.5555555555555556, \"#d8576b\"], [0.6666666666666666, \"#ed7953\"], [0.7777777777777778, \"#fb9f3a\"], [0.8888888888888888, \"#fdca26\"], [1.0, \"#f0f921\"]], \"type\": \"histogram2dcontour\"}], \"mesh3d\": [{\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}, \"type\": \"mesh3d\"}], \"parcoords\": [{\"line\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"parcoords\"}], \"pie\": [{\"automargin\": true, \"type\": \"pie\"}], \"scatter\": [{\"marker\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"scatter\"}], \"scatter3d\": [{\"line\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"marker\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"scatter3d\"}], \"scattercarpet\": [{\"marker\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"scattercarpet\"}], \"scattergeo\": [{\"marker\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"scattergeo\"}], \"scattergl\": [{\"marker\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"scattergl\"}], \"scattermapbox\": [{\"marker\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"scattermapbox\"}], \"scatterpolar\": [{\"marker\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"scatterpolar\"}], \"scatterpolargl\": [{\"marker\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"scatterpolargl\"}], \"scatterternary\": [{\"marker\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"scatterternary\"}], \"surface\": [{\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}, \"colorscale\": [[0.0, \"#0d0887\"], [0.1111111111111111, \"#46039f\"], [0.2222222222222222, \"#7201a8\"], [0.3333333333333333, \"#9c179e\"], [0.4444444444444444, \"#bd3786\"], [0.5555555555555556, \"#d8576b\"], [0.6666666666666666, \"#ed7953\"], [0.7777777777777778, \"#fb9f3a\"], [0.8888888888888888, \"#fdca26\"], [1.0, \"#f0f921\"]], \"type\": \"surface\"}], \"table\": [{\"cells\": {\"fill\": {\"color\": \"#EBF0F8\"}, \"line\": {\"color\": \"white\"}}, \"header\": {\"fill\": {\"color\": \"#C8D4E3\"}, \"line\": {\"color\": \"white\"}}, \"type\": \"table\"}]}, \"layout\": {\"annotationdefaults\": {\"arrowcolor\": \"#2a3f5f\", \"arrowhead\": 0, \"arrowwidth\": 1}, \"coloraxis\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"colorscale\": {\"diverging\": [[0, \"#8e0152\"], [0.1, \"#c51b7d\"], [0.2, \"#de77ae\"], [0.3, \"#f1b6da\"], [0.4, \"#fde0ef\"], [0.5, \"#f7f7f7\"], [0.6, \"#e6f5d0\"], [0.7, \"#b8e186\"], [0.8, \"#7fbc41\"], [0.9, \"#4d9221\"], [1, \"#276419\"]], \"sequential\": [[0.0, \"#0d0887\"], [0.1111111111111111, \"#46039f\"], [0.2222222222222222, \"#7201a8\"], [0.3333333333333333, \"#9c179e\"], [0.4444444444444444, \"#bd3786\"], [0.5555555555555556, \"#d8576b\"], [0.6666666666666666, \"#ed7953\"], [0.7777777777777778, \"#fb9f3a\"], [0.8888888888888888, \"#fdca26\"], [1.0, \"#f0f921\"]], \"sequentialminus\": [[0.0, \"#0d0887\"], [0.1111111111111111, \"#46039f\"], [0.2222222222222222, \"#7201a8\"], [0.3333333333333333, \"#9c179e\"], [0.4444444444444444, \"#bd3786\"], [0.5555555555555556, \"#d8576b\"], [0.6666666666666666, \"#ed7953\"], [0.7777777777777778, \"#fb9f3a\"], [0.8888888888888888, \"#fdca26\"], [1.0, \"#f0f921\"]]}, \"colorway\": [\"#636efa\", \"#EF553B\", \"#00cc96\", \"#ab63fa\", \"#FFA15A\", \"#19d3f3\", \"#FF6692\", \"#B6E880\", \"#FF97FF\", \"#FECB52\"], \"font\": {\"color\": \"#2a3f5f\"}, \"geo\": {\"bgcolor\": \"white\", \"lakecolor\": \"white\", \"landcolor\": \"#E5ECF6\", \"showlakes\": true, \"showland\": true, \"subunitcolor\": \"white\"}, \"hoverlabel\": {\"align\": \"left\"}, \"hovermode\": \"closest\", \"mapbox\": {\"style\": \"light\"}, \"paper_bgcolor\": \"white\", \"plot_bgcolor\": \"#E5ECF6\", \"polar\": {\"angularaxis\": {\"gridcolor\": \"white\", \"linecolor\": \"white\", \"ticks\": \"\"}, \"bgcolor\": \"#E5ECF6\", \"radialaxis\": {\"gridcolor\": \"white\", \"linecolor\": \"white\", \"ticks\": \"\"}}, \"scene\": {\"xaxis\": {\"backgroundcolor\": \"#E5ECF6\", \"gridcolor\": \"white\", \"gridwidth\": 2, \"linecolor\": \"white\", \"showbackground\": true, \"ticks\": \"\", \"zerolinecolor\": \"white\"}, \"yaxis\": {\"backgroundcolor\": \"#E5ECF6\", \"gridcolor\": \"white\", \"gridwidth\": 2, \"linecolor\": \"white\", \"showbackground\": true, \"ticks\": \"\", \"zerolinecolor\": \"white\"}, \"zaxis\": {\"backgroundcolor\": \"#E5ECF6\", \"gridcolor\": \"white\", \"gridwidth\": 2, \"linecolor\": \"white\", \"showbackground\": true, \"ticks\": \"\", \"zerolinecolor\": \"white\"}}, \"shapedefaults\": {\"line\": {\"color\": \"#2a3f5f\"}}, \"ternary\": {\"aaxis\": {\"gridcolor\": \"white\", \"linecolor\": \"white\", \"ticks\": \"\"}, \"baxis\": {\"gridcolor\": \"white\", \"linecolor\": \"white\", \"ticks\": \"\"}, \"bgcolor\": \"#E5ECF6\", \"caxis\": {\"gridcolor\": \"white\", \"linecolor\": \"white\", \"ticks\": \"\"}}, \"title\": {\"x\": 0.05}, \"xaxis\": {\"automargin\": true, \"gridcolor\": \"white\", \"linecolor\": \"white\", \"ticks\": \"\", \"title\": {\"standoff\": 15}, \"zerolinecolor\": \"white\", \"zerolinewidth\": 2}, \"yaxis\": {\"automargin\": true, \"gridcolor\": \"white\", \"linecolor\": \"white\", \"ticks\": \"\", \"title\": {\"standoff\": 15}, \"zerolinecolor\": \"white\", \"zerolinewidth\": 2}}}, \"width\": 1000, \"xaxis\": {\"dtick\": 2, \"linecolor\": \"black\", \"linewidth\": 1.4, \"mirror\": true, \"tick0\": 2, \"tickfont\": {\"size\": 16}, \"title\": {\"font\": {\"size\": 24}, \"text\": \"Days of training\"}}, \"yaxis\": {\"dtick\": 0.2, \"linecolor\": \"black\", \"linewidth\": 1.4, \"mirror\": true, \"range\": [0.4, 1.5], \"tick0\": 0.2, \"tickfont\": {\"size\": 16}, \"title\": {\"font\": {\"size\": 24}, \"text\": \"MQI\"}}},                        {\"responsive\": true}                    ).then(function(){\n",
       "                            \n",
       "var gd = document.getElementById('55cb8067-a808-4f86-8d4d-1926eb0eaba2');\n",
       "var x = new MutationObserver(function (mutations, observer) {{\n",
       "        var display = window.getComputedStyle(gd).display;\n",
       "        if (!display || display === 'none') {{\n",
       "            console.log([gd, 'removed!']);\n",
       "            Plotly.purge(gd);\n",
       "            observer.disconnect();\n",
       "        }}\n",
       "}});\n",
       "\n",
       "// Listen for the removal of the full notebook cells\n",
       "var notebookContainer = gd.closest('#notebook-container');\n",
       "if (notebookContainer) {{\n",
       "    x.observe(notebookContainer, {childList: true});\n",
       "}}\n",
       "\n",
       "// Listen for the clearing of the current output cell\n",
       "var outputEl = gd.closest('.output');\n",
       "if (outputEl) {{\n",
       "    x.observe(outputEl, {childList: true});\n",
       "}}\n",
       "\n",
       "                        })                };                });            </script>        </div>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<IPython.core.display.Image object>"
      ]
     },
     "execution_count": 491,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import chart_studio\n",
    "fig = go.Figure() \n",
    "a = np.array([1, 2, 3, 4, 5])\n",
    "b = np.array([1, 3, 2, 3, 1])\n",
    "# Defining x axis\n",
    "x = x\n",
    "fig.add_trace(go.Box(\n",
    "  \n",
    "    # defining y axis in corresponding\n",
    "    # to x-axis\n",
    "    y=MPI,\n",
    "    x=x,\n",
    "    name=r'$CO$',\n",
    "    marker_color='darkblue',\n",
    "    showlegend=True\n",
    "   \n",
    "))\n",
    "fig.add_trace(go.Box(\n",
    "  \n",
    "    # defining y axis in corresponding\n",
    "    # to x-axis\n",
    "    y=MPI2,\n",
    "    x=x,\n",
    "    name=r'$NO_2$',\n",
    "    marker_color='Teal',\n",
    "    showlegend=True\n",
    "   \n",
    "))\n",
    "fig.add_trace(go.Box(\n",
    "  \n",
    "    # defining y axis in corresponding\n",
    "    # to x-axis\n",
    "    y=MPI3,\n",
    "    x=x,\n",
    "    name=r'$O_3$',\n",
    "    marker_color='darkgoldenrod',\n",
    "    showlegend=True\n",
    "   \n",
    "))\n",
    "#x = x\n",
    "#fig.add_trace(go.Box(\n",
    "  \n",
    "    # defining y axis in corresponding\n",
    "    # to x-axis\n",
    "   # y=RF_R2,\n",
    "    #x=x,\n",
    "    #name='R^2(NO2)',\n",
    "    #marker_color='teal',\n",
    "    #showlegend=True\n",
    "   \n",
    "#))\n",
    "\n",
    "\n",
    "#fig.add_trace(go.Box(\n",
    "  \n",
    "    #defining y axis in corresponding\n",
    "   # to x-axis\n",
    "   # y=RF_R,\n",
    "    #x=x,\n",
    "    #name='SMAE',\n",
    "    #marker_color='#CD6600',\n",
    "    #showlegend=True\n",
    "   \n",
    "#))\n",
    "#fig.add_trace(go.Box(\n",
    "   #y=ANN_R,\n",
    "    #x=x,\n",
    "    #name='XGBoost(NMAE)',\n",
    "    #marker_color='deeppink',\n",
    "    #showlegend=True\n",
    "\n",
    "#))\n",
    "fig.add_trace(go.Scatter(x=X,\n",
    "                y=Reg, \n",
    "                name=\"MPC\",\n",
    "                mode = 'lines',\n",
    "                #marker_color='dodgerblue',\n",
    "                line = dict(shape = 'linear',width = 2.5, color = 'navy', dash = 'dot'),\n",
    "                connectgaps = True,\n",
    "                showlegend=True\n",
    "                        ))\n",
    "#fig.add_trace(go.Scatter(x=X,\n",
    "                #y=Spatial, \n",
    "                #name=\"SGS\",\n",
    "                #mode = 'lines',\n",
    "                #marker_color='dodgerblue',\n",
    "                #line = dict(shape = 'linear',width = 2.5, color = 'purple', dash = 'dot'),\n",
    "                #connectgaps = True,\n",
    "                #showlegend=True\n",
    "                    \n",
    "                        #))\n",
    "#fig.add_trace(go.Scatter(x=X,\n",
    "                #y=Intervention, \n",
    "                #name=\"IS/IM\",\n",
    "                #mode = 'lines',\n",
    "                #marker_color='dodgerblue',\n",
    "                #line = dict(shape = 'linear',width = 2.5, color = 'darkolivegreen', dash = 'dot'),\n",
    "                #connectgaps = True,\n",
    "                #showlegend=True\n",
    "                \n",
    "                        #))\n",
    "#fig.add_trace(go.Scatter(x=X,\n",
    "                #y=Hs_and_sp, \n",
    "                #name=\"HA/SP\",\n",
    "                    \n",
    "                #mode = 'lines',\n",
    "                #marker_color='dodgerblue',\n",
    "                #line = dict(shape = 'linear',width = 2.5, color = 'dodgerblue', dash = 'dot'),\n",
    "                #connectgaps = True,\n",
    "                #showlegend=True\n",
    "               \n",
    "                        #))\n",
    "\n",
    "  \n",
    "fig.update_layout(autosize=True,\n",
    "                 #title={'text': \"<b>CO Monthly Calibration Scheme </b>\",\n",
    "        #'y':0.84,\n",
    "        #'x':0.4,\n",
    "        #'xanchor': 'center',\n",
    "        #'yanchor': 'top'}, \n",
    "    width=1000,\n",
    "    height=400,\n",
    "                  \n",
    "  legend=dict( yanchor=\"bottom\",\n",
    "    y=0.8,\n",
    "    x=0.3,\n",
    "    orientation=\"h\"\n",
    "),\n",
    "    # group together boxes of the different\n",
    "    # traces for each value of x\n",
    "    boxmode='group',\n",
    "                  plot_bgcolor='rgba(0,0,0,0)'\n",
    "                 \n",
    ")\n",
    "\n",
    "fig.update_xaxes(title_text=\"Days of training\",tickfont = dict(size=16),\n",
    "                 titlefont = dict(size=24),linewidth=1.4, linecolor='black',tick0 = 2,\n",
    "        dtick = 2,\n",
    "                 mirror=True)\n",
    "fig.update_yaxes(title_text=\"MQI\",tickfont = dict(size=16),range=[0.4,1.5],\n",
    "                 titlefont = dict(size=24),linewidth=1.4, linecolor='black',tick0 = 0.2,\n",
    "        dtick =0.2,\n",
    "                 mirror=True)\n",
    "fig.show()\n",
    "chart_studio.plotly.sign_in('vinylango', 'gybbJVWfRSUoTcRRSa6J')\n",
    "chart_studio.plotly.image.save_as(fig, filename='models_boxplot.png')\n",
    "Image('models_boxplot.png')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 486,
   "id": "vietnamese-debut",
   "metadata": {},
   "outputs": [
    {
     "ename": "IndexError",
     "evalue": "list index out of range",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mIndexError\u001b[0m                                Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-486-b714aaf599f8>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m      4\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      5\u001b[0m \u001b[0mx\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m2\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;36m4\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;36m6\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;36m8\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;36m10\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;36m12\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;36m14\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;36m16\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;36m18\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;36m20\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 6\u001b[0;31m \u001b[0mdata\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mx\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mi\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mRmse1_rf\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mi\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;32mfor\u001b[0m \u001b[0mi\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mrange\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mlen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mx\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      7\u001b[0m \u001b[0mdf\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mpd\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mDataFrame\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdata\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mdata\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcolumns\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'Day'\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m'Oct'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m<ipython-input-486-b714aaf599f8>\u001b[0m in \u001b[0;36m<listcomp>\u001b[0;34m(.0)\u001b[0m\n\u001b[1;32m      4\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      5\u001b[0m \u001b[0mx\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m2\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;36m4\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;36m6\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;36m8\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;36m10\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;36m12\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;36m14\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;36m16\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;36m18\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;36m20\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 6\u001b[0;31m \u001b[0mdata\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mx\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mi\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mRmse1_rf\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mi\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;32mfor\u001b[0m \u001b[0mi\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mrange\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mlen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mx\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      7\u001b[0m \u001b[0mdf\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mpd\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mDataFrame\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdata\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mdata\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcolumns\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'Day'\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m'Oct'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;31mIndexError\u001b[0m: list index out of range"
     ]
    }
   ],
   "source": [
    "import numpy as np \n",
    "import pandas as pd \n",
    "import plotly.express as px\n",
    "\n",
    "x=[2,4,6,8,10,12,14,16,18,20]\n",
    "data=[[x[i],Rmse1_rf[i]] for i in range(len(x))]\n",
    "df=pd.DataFrame(data=data, columns=['Day','Oct'])"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "colored-factory",
   "metadata": {},
   "source": [
    "Metric1=['RF' for i in range(len(RF))]\n",
    "Metric2=['XGBoost' for i in range(len(ANN))]\n",
    "Model=Metric1+Metric2\n",
    "Training=x+x\n",
    "Values=RF+ANN\n",
    "len(Values)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "acting-chaos",
   "metadata": {},
   "source": [
    "#Violin plot which also show the density of the distribution\n",
    "import plotly.express as px\n",
    "Metric1=['RF' for i in range(len(RF))]\n",
    "Metric2=['XGBoost' for i in range(len(ANN))]\n",
    "Model=Metric1+Metric2\n",
    "Training=x+x\n",
    "Values=RF+ANN\n",
    "lst=[[Training[i],Values[i],Model[i]] for i in range(len(Model))]\n",
    "df = pd.DataFrame(lst, columns =['Training Days', 'Pearson correlation (r)','Model'])\n",
    "\n",
    "#fig = px.violin( df,y=\"Performance\", x=\"Calibration Model\", color='Metric', box=True,points=\"all\",\n",
    "          #hover_data=df.columns)\n",
    "fig = px.violin( df,y=\"Pearson correlation (r)\", x=\"Training Days\", color='Model', box=True,\n",
    "          hover_data=df.columns)\n",
    "\n",
    "\n",
    "fig.update_layout(autosize=False,\n",
    "    width=900,\n",
    "    height=500)\n",
    "fig.show()\n",
    "#chart_studio.plotly.sign_in('vinylango', 'gybbJVWfRSUoTcRRSa6J')\n",
    "#chart_studio.plotly.image.save_as(fig, filename='models_violinplots.png')\n",
    "#Image('models_violinplots.png')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "hired-anatomy",
   "metadata": {},
   "source": [
    "# Seasonal Calibration Scheme"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "moderate-house",
   "metadata": {},
   "source": [
    "# Fall"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "organic-anger",
   "metadata": {},
   "source": [
    "# RF"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 73,
   "id": "integrated-fruit",
   "metadata": {},
   "outputs": [],
   "source": [
    "frame1=[data_oct,data_nov]\n",
    "fall=pd.concat(frame1)\n",
    "#fall=fall.sample(frac=1)\n",
    "Day=[5*i for i in range(1,11) ]\n",
    "Fall=fall.resample('h').mean()\n",
    "Fall=Fall.dropna()\n",
    "#Fall=Fall.sample(frac=1)\n",
    "X=Fall[['Net Signal','Temp','RH','Month','Day_of_week','Day','Hour']]\n",
    "y=Fall['Ref']\n",
    "X_train, X_test, y_train, y_test=train_test_split(X,y,test_size=0.001,shuffle=True)\n",
    "mean1=np.std(y)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 74,
   "id": "scientific-engineer",
   "metadata": {},
   "outputs": [],
   "source": [
    "Rmse7_rf=[]\n",
    "RMSE7_rf=[]\n",
    "REU7=[]\n",
    "L_y7=[]\n",
    "A7=[]\n",
    "M7=[]\n",
    "for i in range(1,9):\n",
    "    k=y_train[120*i:].to_list()\n",
    "    lv=max(y_train[120*i:])\n",
    "    regressor.fit(X_train[:120*i], y_train[:120*i])\n",
    "    pred=regressor.predict(X_train[120*i:])\n",
    "    #mse=round(np.sqrt(sm.mean_squared_error(y_test, pred))/np.mean(y_test),2)\n",
    "    #rmse=round(np.corrcoef(y_test, pred)[0, 1],2)\n",
    "    #mse=round(relative_mean_absolute_error(y_test,pred),2)\n",
    "    #rmse=round(np.corrcoef(y_test, pred)[0, 1],2)\n",
    "    mse=round(sMAE(y_train[120*i:], pred),2)\n",
    "    rmse=round(sm.r2_score(y_train[120*i:], pred), 2)\n",
    "    U=np.sqrt(np.mean((0.25*np.array(y_train[120*i:]))**2))\n",
    "    RMSE=np.sqrt(np.mean((np.array(pred)-np.array(y_train[120*i:]))**2))\n",
    "    m=RMSE/(1*U)\n",
    "    M7.append(m)\n",
    "    Rmse7_rf.append(mse)\n",
    "    RMSE7_rf.append(rmse)\n",
    "    reu=REF(pred,y_train[120*i:],1)\n",
    "    re=REF2(pred,y_train[120*i:],1,lv)\n",
    "    A7.append(re)\n",
    "    REU7.append(reu)\n",
    "    L_y7.append(k)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 75,
   "id": "double-diversity",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[0.82, 0.85, 0.86, 0.88, 0.88, 0.89, 0.9, 0.9]"
      ]
     },
     "execution_count": 75,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Rmse7_rf"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 76,
   "id": "continuous-personality",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[0.87, 0.91, 0.93, 0.95, 0.95, 0.95, 0.95, 0.95]"
      ]
     },
     "execution_count": 76,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "RMSE7_rf"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 77,
   "id": "prerequisite-surprise",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[52.986919791836385,\n",
       " 28.01890991893106,\n",
       " 23.98242970444085,\n",
       " 22.530494738515415,\n",
       " 23.402510088852566,\n",
       " 21.77133682799705,\n",
       " 21.39579080828686,\n",
       " 23.70922672301062]"
      ]
     },
     "execution_count": 77,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "A7"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 78,
   "id": "reported-universe",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[0.9157327439376322,\n",
       " 0.7734489474505007,\n",
       " 0.6811103989779902,\n",
       " 0.586668571538628,\n",
       " 0.5922351550621163,\n",
       " 0.5631912668565253,\n",
       " 0.5473779349308381,\n",
       " 0.5497914303024577]"
      ]
     },
     "execution_count": 78,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "M7"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 79,
   "id": "choice-gnome",
   "metadata": {},
   "outputs": [],
   "source": [
    "frame1=[data_oct2,data_nov2]\n",
    "fall2=pd.concat(frame1)\n",
    "#fall=fall.sample(frac=1)\n",
    "Day=[5*i for i in range(1,11) ]\n",
    "Fall2=fall2.resample('h').mean()\n",
    "Fall2=Fall2.dropna()\n",
    "#Fall=Fall.sample(frac=1)\n",
    "X=Fall2[['Net Signal','Temp','RH','Month','Day_of_week','Day','Hour','Ref_O3']]\n",
    "y=Fall2['Ref']\n",
    "X_train, X_test, y_train, y_test=train_test_split(X,y,test_size=0.001,shuffle=True)\n",
    "mean1=np.std(y)\n",
    "Rmse7_rf2=[]\n",
    "RMSE7_rf2=[]\n",
    "M72=[]\n",
    "for i in range(1,9):\n",
    "    regressor.fit(X_train[:120*i], y_train[:120*i])\n",
    "    pred=regressor.predict(X_train[120*i:])\n",
    "    #mse=round(np.sqrt(sm.mean_squared_error(y_test, pred))/np.mean(y_test),2)\n",
    "    #rmse=round(np.corrcoef(y_test, pred)[0, 1],2)\n",
    "    #mse=round(relative_mean_absolute_error(y_test,pred),2)\n",
    "    #rmse=round(np.corrcoef(y_test, pred)[0, 1],2)\n",
    "    mse=round(sMAE(y_train[120*i:], pred),2)\n",
    "    rmse=round(sm.r2_score(y_train[120*i:], pred), 2)\n",
    "    U=np.sqrt(np.mean((0.25*np.array(y_train[120*i:]))**2))\n",
    "    RMSE=np.sqrt(np.mean((np.array(pred)-np.array(y_train[120*i:]))**2))\n",
    "    m=RMSE/(1*U)\n",
    "    M72.append(m)\n",
    "    Rmse7_rf2.append(mse)\n",
    "    RMSE7_rf2.append(rmse)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 80,
   "id": "controversial-andrew",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[0.8, 0.84, 0.86, 0.86, 0.87, 0.87, 0.87, 0.88]"
      ]
     },
     "execution_count": 80,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Rmse7_rf2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 81,
   "id": "palestinian-debate",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[0.77, 0.85, 0.87, 0.88, 0.9, 0.9, 0.91, 0.91]"
      ]
     },
     "execution_count": 81,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "RMSE7_rf2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 82,
   "id": "integrated-webcam",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[0.9361905287701964,\n",
       " 0.7567404468304041,\n",
       " 0.6992398512605448,\n",
       " 0.6921505376296663,\n",
       " 0.6425211190397567,\n",
       " 0.6248168113441706,\n",
       " 0.6098486045560773,\n",
       " 0.5958414342701402]"
      ]
     },
     "execution_count": 82,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "M72"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 83,
   "id": "swiss-governor",
   "metadata": {},
   "outputs": [],
   "source": [
    "frame1=[data_oct3,data_nov3]\n",
    "fall3=pd.concat(frame1)\n",
    "#fall=fall.sample(frac=1)\n",
    "Day=[5*i for i in range(1,11) ]\n",
    "Fall3=fall3.resample('h').mean()\n",
    "Fall3=Fall3.dropna()\n",
    "#Fall=Fall.sample(frac=1)\n",
    "X=Fall3[['Net Signal','Temp','RH','Month','Day_of_week','Day','Hour','Ref_NO2']]\n",
    "y=Fall3['Ref']\n",
    "X_train, X_test, y_train, y_test=train_test_split(X,y,test_size=0.001,shuffle=True)\n",
    "mean1=np.std(y)\n",
    "Rmse7_rf3=[]\n",
    "RMSE7_rf3=[]\n",
    "M73=[]\n",
    "for i in range(1,9):\n",
    "    regressor.fit(X_train[:120*i], y_train[:120*i])\n",
    "    pred=regressor.predict(X_train[120*i:])\n",
    "    #mse=round(np.sqrt(sm.mean_squared_error(y_test, pred))/np.mean(y_test),2)\n",
    "    #rmse=round(np.corrcoef(y_test, pred)[0, 1],2)\n",
    "    #mse=round(relative_mean_absolute_error(y_test,pred),2)\n",
    "    #rmse=round(np.corrcoef(y_test, pred)[0, 1],2)\n",
    "    mse=round(sMAE(y_train[120*i:], pred),2)\n",
    "    rmse=round(sm.r2_score(y_train[120*i:], pred), 2)\n",
    "    U=np.sqrt(np.mean((0.3*np.array(y_train[120*i:]))**2))\n",
    "    RMSE=np.sqrt(np.mean((np.array(pred)-np.array(y_train[120*i:]))**2))\n",
    "    m=RMSE/(1*U)\n",
    "    M73.append(m)\n",
    "    Rmse7_rf3.append(mse)\n",
    "    RMSE7_rf3.append(rmse)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 84,
   "id": "circular-township",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[0.75, 0.8, 0.82, 0.84, 0.85, 0.85, 0.86, 0.87]"
      ]
     },
     "execution_count": 84,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Rmse7_rf3"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 85,
   "id": "vulnerable-porcelain",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[0.86, 0.91, 0.93, 0.94, 0.94, 0.95, 0.95, 0.96]"
      ]
     },
     "execution_count": 85,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    " RMSE7_rf3"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 86,
   "id": "literary-doubt",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[0.824167730926081,\n",
       " 0.6493429071585939,\n",
       " 0.5955839169883457,\n",
       " 0.5607324247183932,\n",
       " 0.5200749058614719,\n",
       " 0.5149406817017521,\n",
       " 0.481684703527402,\n",
       " 0.43245082816358704]"
      ]
     },
     "execution_count": 86,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    " M73"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "uniform-maldives",
   "metadata": {},
   "source": [
    "# Winter"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "disciplinary-distribution",
   "metadata": {},
   "source": [
    "# RF"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 87,
   "id": "coated-blend",
   "metadata": {},
   "outputs": [],
   "source": [
    "frame1=[data_dec,data_jan,data_feb]\n",
    "winter=pd.concat(frame1)\n",
    "#winter=winter.sample(frac=1)\n",
    "Winter=winter.resample('h').mean()\n",
    "Winter=Winter.dropna()\n",
    "#Winter=Winter.sample(frac=1)\n",
    "\n",
    "X=Winter[['Net Signal','Temp','RH','Month','Day_of_week','Day','Hour']]\n",
    "y=Winter['Ref']\n",
    "X_train, X_test, y_train, y_test=train_test_split(X,y,test_size=0.001, shuffle=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 88,
   "id": "regulation-cyprus",
   "metadata": {},
   "outputs": [],
   "source": [
    "mean2=np.std(y)\n",
    "Rmse8_rf=[]\n",
    "RMSE8_rf=[]\n",
    "REU8=[]\n",
    "L_y8=[]\n",
    "A8=[]\n",
    "M8=[]\n",
    "for i in range(1,9):\n",
    "    k=y_train[120*i:].to_list()\n",
    "    lv=max(y_train[120*i:])\n",
    "    regressor.fit(X_train[:120*i], y_train[:120*i])\n",
    "    pred=regressor.predict(X_train[120*i:])\n",
    "    #mse=round(np.sqrt(sm.mean_squared_error(y_test, pred))/np.mean(y_test),2)\n",
    "    #rmse=round(np.corrcoef(y_test, pred)[0, 1],2)\n",
    "    #mse=round(relative_mean_absolute_error(y_test,pred),2)\n",
    "    #rmse=round(np.corrcoef(y_test, pred)[0, 1],2)\n",
    "    mse=round(sMAE(y_train[120*i:], pred),2)\n",
    "    rmse=round(sm.r2_score(y_train[120*i:], pred), 2)\n",
    "    U=np.sqrt(np.mean((0.25*np.array(y_train[120*i:]))**2))\n",
    "    RMSE=np.sqrt(np.mean((np.array(pred)-np.array(y_train[120*i:]))**2))\n",
    "    m=RMSE/(1*U)\n",
    "    M8.append(m)\n",
    "    Rmse8_rf.append(mse)\n",
    "    RMSE8_rf.append(rmse)\n",
    "    reu=REF(pred,y_train[120*i:],1)\n",
    "    re=REF2(pred,y_train[120*i:],1,lv)\n",
    "    A8.append(re)\n",
    "    REU8.append(reu)\n",
    "    L_y8.append(k)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 89,
   "id": "tropical-luther",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[0.78, 0.8, 0.82, 0.83, 0.84, 0.85, 0.85, 0.85]"
      ]
     },
     "execution_count": 89,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Rmse8_rf"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 90,
   "id": "municipal-adapter",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[0.78, 0.83, 0.85, 0.86, 0.87, 0.9, 0.89, 0.89]"
      ]
     },
     "execution_count": 90,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "RMSE8_rf"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 91,
   "id": "manual-timeline",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[48.30271095845751,\n",
       " 49.075529465242184,\n",
       " 36.393609634107676,\n",
       " 36.53035135753086,\n",
       " 39.32923172084396,\n",
       " 30.959372746516383,\n",
       " 30.04458582612117,\n",
       " 29.788620246734155]"
      ]
     },
     "execution_count": 91,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "A8"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 92,
   "id": "found-career",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[1.141931422122198,\n",
       " 1.0208701902969175,\n",
       " 0.9480640135899379,\n",
       " 0.9188304807307585,\n",
       " 0.8731128454304987,\n",
       " 0.763488441690103,\n",
       " 0.7840730490365609,\n",
       " 0.7864200851602429]"
      ]
     },
     "execution_count": 92,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "M8"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 93,
   "id": "uniform-lighter",
   "metadata": {},
   "outputs": [],
   "source": [
    "frame1=[data_dec2,data_jan2,data_feb2]\n",
    "winter2=pd.concat(frame1)\n",
    "#winter=winter.sample(frac=1)\n",
    "Winter2=winter2.resample('h').mean()\n",
    "Winter2=Winter2.dropna()\n",
    "X=Winter2[['Net Signal','Temp','RH','Month','Day_of_week','Day','Hour','Ref_O3']]\n",
    "y=Winter2['Ref']\n",
    "X_train, X_test, y_train, y_test=train_test_split(X,y,test_size=0.001, shuffle=True)\n",
    "mean2=np.std(y)\n",
    "Rmse8_rf2=[]\n",
    "RMSE8_rf2=[]\n",
    "M82=[]\n",
    "for i in range(1,9):\n",
    "    \n",
    "    regressor.fit(X_train[:120*i], y_train[:120*i])\n",
    "    pred=regressor.predict(X_train[120*i:])\n",
    "    #mse=round(np.sqrt(sm.mean_squared_error(y_test, pred))/np.mean(y_test),2)\n",
    "    #rmse=round(np.corrcoef(y_test, pred)[0, 1],2)\n",
    "    #mse=round(relative_mean_absolute_error(y_test,pred),2)\n",
    "    #rmse=round(np.corrcoef(y_test, pred)[0, 1],2)\n",
    "    mse=round(sMAE(y_train[120*i:], pred),2)\n",
    "    rmse=round(sm.r2_score(y_train[120*i:], pred), 2)\n",
    "    U=np.sqrt(np.mean((0.25*np.array(y_train[120*i:]))**2))\n",
    "    RMSE=np.sqrt(np.mean((np.array(pred)-np.array(y_train[120*i:]))**2))\n",
    "    m=RMSE/(1*U)\n",
    "    M82.append(m)\n",
    "    Rmse8_rf2.append(mse)\n",
    "    RMSE8_rf2.append(rmse)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 94,
   "id": "simplified-representation",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[0.84, 0.86, 0.87, 0.87, 0.88, 0.88, 0.89, 0.89]"
      ]
     },
     "execution_count": 94,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Rmse8_rf2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 95,
   "id": "obvious-alloy",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[0.8, 0.87, 0.88, 0.88, 0.9, 0.9, 0.9, 0.91]"
      ]
     },
     "execution_count": 95,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "RMSE8_rf2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 96,
   "id": "alone-abraham",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[0.8009503940058246,\n",
       " 0.6565505098346965,\n",
       " 0.6286840459721783,\n",
       " 0.6160140304924573,\n",
       " 0.577712196531333,\n",
       " 0.5632009984945529,\n",
       " 0.5485320475009728,\n",
       " 0.5315406084330291]"
      ]
     },
     "execution_count": 96,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "M82"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 97,
   "id": "infinite-distinction",
   "metadata": {},
   "outputs": [],
   "source": [
    "frame1=[data_dec3,data_jan3,data_feb3]\n",
    "winter3=pd.concat(frame1)\n",
    "#winter=winter.sample(frac=1)\n",
    "Winter3=winter3.resample('h').mean()\n",
    "Winter3=Winter3.dropna()\n",
    "X=Winter3[['Net Signal','Temp','RH','Month','Day_of_week','Day','Hour','Ref_NO2']]\n",
    "y=Winter3['Ref']\n",
    "X_train, X_test, y_train, y_test=train_test_split(X,y,test_size=0.001, shuffle=True)\n",
    "mean2=np.std(y)\n",
    "Rmse8_rf3=[]\n",
    "RMSE8_rf3=[]\n",
    "M83=[]\n",
    "for i in range(1,9):\n",
    "    \n",
    "    regressor.fit(X_train[:120*i], y_train[:120*i])\n",
    "    pred=regressor.predict(X_train[120*i:])\n",
    "    #mse=round(np.sqrt(sm.mean_squared_error(y_test, pred))/np.mean(y_test),2)\n",
    "    #rmse=round(np.corrcoef(y_test, pred)[0, 1],2)\n",
    "    #mse=round(relative_mean_absolute_error(y_test,pred),2)\n",
    "    #rmse=round(np.corrcoef(y_test, pred)[0, 1],2)\n",
    "    mse=round(sMAE(y_train[120*i:], pred),2)\n",
    "    rmse=round(sm.r2_score(y_train[120*i:], pred), 2)\n",
    "    U=np.sqrt(np.mean((0.3*np.array(y_train[120*i:]))**2))\n",
    "    RMSE=np.sqrt(np.mean((np.array(pred)-np.array(y_train[120*i:]))**2))\n",
    "    m=RMSE/(1*U)\n",
    "    M83.append(m)\n",
    "    Rmse8_rf3.append(mse)\n",
    "    RMSE8_rf3.append(rmse)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 98,
   "id": "married-scout",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[0.76, 0.8, 0.82, 0.84, 0.85, 0.86, 0.86, 0.87]"
      ]
     },
     "execution_count": 98,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Rmse8_rf3"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 99,
   "id": "described-haven",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[0.88, 0.91, 0.93, 0.94, 0.95, 0.95, 0.95, 0.96]"
      ]
     },
     "execution_count": 99,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "RMSE8_rf3"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 100,
   "id": "configured-windows",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[0.7492143159349163,\n",
       " 0.6522550309235219,\n",
       " 0.5850421082387657,\n",
       " 0.5298587847565817,\n",
       " 0.4880332848157327,\n",
       " 0.47244295886263316,\n",
       " 0.4633278318895967,\n",
       " 0.4476435430468334]"
      ]
     },
     "execution_count": 100,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "M83"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "phantom-general",
   "metadata": {},
   "source": [
    "# Spring"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "sustainable-consequence",
   "metadata": {},
   "source": [
    "# RF"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 101,
   "id": "radio-xerox",
   "metadata": {},
   "outputs": [],
   "source": [
    "frame1=[data_mar,data_apr]\n",
    "spring=pd.concat(frame1)\n",
    "Spring=spring.resample('h').mean()\n",
    "Spring=Spring.dropna()\n",
    "#Spring=Spring.sample(frac=1)\n",
    "X=Spring[['Net Signal','Temp','RH','Month','Day_of_week','Day','Hour']]\n",
    "y=Spring['Ref']\n",
    "X_train, X_test, y_train, y_test=train_test_split(X,y,test_size=0.001, shuffle=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 102,
   "id": "undefined-maine",
   "metadata": {},
   "outputs": [],
   "source": [
    "mean3=np.std(y)\n",
    "Rmse9_rf=[]\n",
    "RMSE9_rf=[]\n",
    "REU9=[]\n",
    "L_y9=[]\n",
    "A9=[]\n",
    "M9=[]\n",
    "for i in range(1,9):\n",
    "    k=y_train[120*i:].to_list()\n",
    "    lv=20000\n",
    "    regressor.fit(X_train[:120*i], y_train[:120*i])\n",
    "    pred=regressor.predict(X_train[120*i:])\n",
    "    #mse=round(np.sqrt(sm.mean_squared_error(y_test, pred))/np.mean(y_test),2)\n",
    "    #rmse=round(np.corrcoef(y_test, pred)[0, 1],2)\n",
    "    #mse=round(relative_mean_absolute_error(y,pred),2)\n",
    "    #rmse=round(np.corrcoef(y_test, pred)[0, 1],2)\n",
    "    mse=round(sMAE(y_train[120*i:], pred),2)\n",
    "    rmse=round(sm.r2_score(y_train[120*i:], pred), 2)\n",
    "    Rmse9_rf.append(mse)\n",
    "    RMSE9_rf.append(rmse)\n",
    "    U=np.sqrt(np.mean((0.25*np.array(y_train[120*i:]))**2))\n",
    "    RMSE=np.sqrt(np.mean((np.array(pred)-np.array(y_train[120*i:]))**2))\n",
    "    m=RMSE/(1*U)\n",
    "    M9.append(m)\n",
    "    reu=REF(pred,y_train[120*i:],1)\n",
    "    re=REF2(pred,y_train[120*i:],1,lv)\n",
    "    A9.append(re)\n",
    "    REU9.append(reu)\n",
    "    L_y9.append(k)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 103,
   "id": "abandoned-solution",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[0.75, 0.78, 0.81, 0.82, 0.85, 0.86, 0.87, 0.83]"
      ]
     },
     "execution_count": 103,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Rmse9_rf"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 104,
   "id": "stock-general",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[0.64, 0.67, 0.75, 0.76, 0.89, 0.88, 0.9, 0.85]"
      ]
     },
     "execution_count": 104,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "RMSE9_rf"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 105,
   "id": "alert-input",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[1.3753267664555666,\n",
       " 1.318383745433635,\n",
       " 1.1563151181652602,\n",
       " 1.1480904800814558,\n",
       " 0.7736240863304849,\n",
       " 0.7911581929402207,\n",
       " 0.7398734115044125,\n",
       " 1.047382123301053]"
      ]
     },
     "execution_count": 105,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "M9"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 106,
   "id": "athletic-nothing",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[170.33852081148532,\n",
       " 156.03384698197726,\n",
       " 114.190613676128,\n",
       " 120.65701037249895,\n",
       " 48.78609252023613,\n",
       " 55.97624501331856,\n",
       " 54.27273368764283,\n",
       " 101.82446672566836]"
      ]
     },
     "execution_count": 106,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "A9"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 107,
   "id": "specific-chuck",
   "metadata": {},
   "outputs": [],
   "source": [
    "frame1=[data_mar2,data_apr2]\n",
    "spring2=pd.concat(frame1)\n",
    "Spring2=spring2.resample('h').mean()\n",
    "Spring2=Spring2.dropna()\n",
    "#Spring=Spring.sample(frac=1)\n",
    "X=Spring2[['Net Signal','Temp','RH','Month','Day_of_week','Day','Hour','Ref_O3']]\n",
    "y=Spring2['Ref']\n",
    "X_train, X_test, y_train, y_test=train_test_split(X,y,test_size=0.001, shuffle=True)\n",
    "mean3=np.std(y)\n",
    "Rmse9_rf2=[]\n",
    "RMSE9_rf2=[]\n",
    "M92=[]\n",
    "for i in range(1,9):\n",
    "    regressor.fit(X_train[:120*i], y_train[:120*i])\n",
    "    pred=regressor.predict(X_train[120*i:])\n",
    "    #mse=round(np.sqrt(sm.mean_squared_error(y_test, pred))/np.mean(y_test),2)\n",
    "    #rmse=round(np.corrcoef(y_test, pred)[0, 1],2)\n",
    "    #mse=round(relative_mean_absolute_error(y,pred),2)\n",
    "    #rmse=round(np.corrcoef(y_test, pred)[0, 1],2)\n",
    "    mse=round(sMAE(y_train[120*i:], pred),2)\n",
    "    rmse=round(sm.r2_score(y_train[120*i:], pred), 2)\n",
    "    U=np.sqrt(np.mean((0.25*np.array(y_train[120*i:]))**2))\n",
    "    RMSE=np.sqrt(np.mean((np.array(pred)-np.array(y_train[120*i:]))**2))\n",
    "    m=RMSE/(1*U)\n",
    "    M92.append(m)\n",
    "    Rmse9_rf2.append(mse)\n",
    "    RMSE9_rf2.append(rmse)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 108,
   "id": "engaged-affairs",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[0.68, 0.78, 0.8, 0.82, 0.84, 0.84, 0.83, 0.86]"
      ]
     },
     "execution_count": 108,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Rmse9_rf2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 109,
   "id": "mental-vulnerability",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[0.71, 0.87, 0.89, 0.91, 0.92, 0.92, 0.92, 0.95]"
      ]
     },
     "execution_count": 109,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "RMSE9_rf2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 110,
   "id": "certain-mouth",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[1.3726249275814641,\n",
       " 0.9127558740596345,\n",
       " 0.8225391651935511,\n",
       " 0.7589717894411446,\n",
       " 0.7046199489520663,\n",
       " 0.7136791795585857,\n",
       " 0.7283102358019727,\n",
       " 0.5958437122119832]"
      ]
     },
     "execution_count": 110,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "M92"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 111,
   "id": "noticed-mobile",
   "metadata": {},
   "outputs": [],
   "source": [
    "frame1=[data_mar3,data_apr3]\n",
    "spring3=pd.concat(frame1)\n",
    "Spring3=spring3.resample('h').mean()\n",
    "Spring3=Spring3.dropna()\n",
    "#Spring=Spring.sample(frac=1)\n",
    "X=Spring3[['Net Signal','Temp','RH','Month','Day_of_week','Day','Hour','Ref_NO2']]\n",
    "y=Spring3['Ref']\n",
    "X_train, X_test, y_train, y_test=train_test_split(X,y,test_size=0.001, shuffle=True)\n",
    "mean3=np.std(y)\n",
    "Rmse9_rf3=[]\n",
    "RMSE9_rf3=[]\n",
    "M93=[]\n",
    "for i in range(1,8):\n",
    "    regressor.fit(X_train[:120*i], y_train[:120*i])\n",
    "    pred=regressor.predict(X_train[120*i:])\n",
    "    #mse=round(np.sqrt(sm.mean_squared_error(y_test, pred))/np.mean(y_test),2)\n",
    "    #rmse=round(np.corrcoef(y_test, pred)[0, 1],2)\n",
    "    #mse=round(relative_mean_absolute_error(y,pred),2)\n",
    "    #rmse=round(np.corrcoef(y_test, pred)[0, 1],2)\n",
    "    mse=round(sMAE(y_train[120*i:], pred),2)\n",
    "    rmse=round(sm.r2_score(y_train[120*i:], pred), 2)\n",
    "    U=np.sqrt(np.mean((0.3*np.array(y_train[120*i:]))**2))\n",
    "    RMSE=np.sqrt(np.mean((np.array(pred)-np.array(y_train[120*i:]))**2))\n",
    "    m=RMSE/(1*U)\n",
    "    M93.append(m)\n",
    "    Rmse9_rf3.append(mse)\n",
    "    RMSE9_rf3.append(rmse)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 112,
   "id": "renewable-harmony",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[0.88, 0.89, 0.91, 0.92, 0.92, 0.92, 0.92]"
      ]
     },
     "execution_count": 112,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    " Rmse9_rf3"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 113,
   "id": "productive-product",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[0.89, 0.91, 0.94, 0.95, 0.95, 0.95, 0.96]"
      ]
     },
     "execution_count": 113,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    " RMSE9_rf3"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 114,
   "id": "powered-village",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[0.4672080942645395,\n",
       " 0.42634029347076696,\n",
       " 0.34815578409909537,\n",
       " 0.31549529480300353,\n",
       " 0.31488685304736297,\n",
       " 0.31107179087932807,\n",
       " 0.2995868311381968]"
      ]
     },
     "execution_count": 114,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    " M93"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 115,
   "id": "swedish-indonesian",
   "metadata": {},
   "outputs": [],
   "source": [
    "#import chart_studio\n",
    "import plotly.express as px\n",
    "from IPython.display import Image\n",
    "import plotly.graph_objects as go\n",
    "import numpy as np\n",
    "\n",
    "Day_1_rf=[RMSE7_rf[0],RMSE8_rf[0],RMSE9_rf[0]]\n",
    "Day_2_rf=[RMSE7_rf[1],RMSE8_rf[1],RMSE9_rf[1]]\n",
    "Day_3_rf=[RMSE7_rf[2],RMSE8_rf[2],RMSE9_rf[2]]\n",
    "Day_4_rf=[RMSE7_rf[3],RMSE8_rf[3],RMSE9_rf[3]]\n",
    "Day_5_rf=[RMSE7_rf[4],RMSE8_rf[4],RMSE9_rf[4]]\n",
    "Day_6_rf=[RMSE7_rf[5],RMSE8_rf[5],RMSE9_rf[5]]\n",
    "Day_7_rf=[RMSE7_rf[6],RMSE8_rf[6],RMSE9_rf[6]]\n",
    "Day_8_rf=[RMSE7_rf[7],RMSE8_rf[7],RMSE9_rf[7]]\n",
    "#Day_9_rf=[RMSE7_rf[8],RMSE8_rf[8],RMSE9_rf[8]]\n",
    "#Day_10_rf=[RMSE7_rf[9],RMSE8_rf[9],RMSE9_rf[9]]"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "verified-sharp",
   "metadata": {},
   "source": [
    "Day_1_ann=[RMSE7_ann[0],RMSE8_ann[0],RMSE9_ann[0]]\n",
    "Day_2_ann=[RMSE7_ann[1],RMSE8_ann[1],RMSE9_ann[1]]\n",
    "Day_3_ann=[RMSE7_ann[2],RMSE8_ann[2],RMSE9_ann[2]]\n",
    "Day_4_ann=[RMSE7_ann[3],RMSE8_ann[3],RMSE9_ann[3]]\n",
    "Day_5_ann=[RMSE7_ann[4],RMSE8_ann[4],RMSE9_ann[4]]\n",
    "Day_6_ann=[RMSE7_ann[5],RMSE8_ann[5],RMSE9_ann[5]]\n",
    "Day_7_ann=[RMSE7_ann[6],RMSE8_ann[6],RMSE9_ann[6]]\n",
    "Day_8_ann=[RMSE7_ann[7],RMSE8_ann[7],RMSE9_ann[7]]\n",
    "Day_9_ann=[RMSE7_ann[8],RMSE8_ann[8],RMSE9_ann[8]]\n",
    "Day_10_ann=[RMSE7_ann[9],RMSE8_ann[9],RMSE9_ann[9]]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 116,
   "id": "alike-length",
   "metadata": {},
   "outputs": [],
   "source": [
    "Day_1_RF=[Rmse7_rf[0],Rmse8_rf[0],Rmse9_rf[0]]\n",
    "Day_2_RF=[Rmse7_rf[1],Rmse8_rf[1],Rmse9_rf[1]]\n",
    "Day_3_RF=[Rmse7_rf[2],Rmse8_rf[2],Rmse9_rf[2]]\n",
    "Day_4_RF=[Rmse7_rf[3],Rmse8_rf[3],Rmse9_rf[3]]\n",
    "Day_5_RF=[Rmse7_rf[4],Rmse8_rf[4],Rmse9_rf[4]]\n",
    "Day_6_RF=[Rmse7_rf[5],Rmse8_rf[5],Rmse9_rf[5]]\n",
    "Day_7_RF=[Rmse7_rf[6],Rmse8_rf[6],Rmse9_rf[6]]\n",
    "Day_8_RF=[Rmse7_rf[7],Rmse8_rf[7],Rmse9_rf[7]]\n",
    "#Day_9_RF=[Rmse7_rf[8],Rmse8_rf[8],Rmse9_rf[8]]\n",
    "#Day_10_RF=[Rmse7_rf[9],Rmse8_rf[9],Rmse9_rf[9]]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 117,
   "id": "statewide-reduction",
   "metadata": {},
   "outputs": [],
   "source": [
    "Day_1_RF2=[Rmse7_rf2[0],Rmse8_rf2[0],Rmse9_rf2[0]]\n",
    "Day_2_RF2=[Rmse7_rf2[1],Rmse8_rf2[1],Rmse9_rf2[1]]\n",
    "Day_3_RF2=[Rmse7_rf2[2],Rmse8_rf2[2],Rmse9_rf2[2]]\n",
    "Day_4_RF2=[Rmse7_rf2[3],Rmse8_rf2[3],Rmse9_rf2[3]]\n",
    "Day_5_RF2=[Rmse7_rf2[4],Rmse8_rf2[4],Rmse9_rf2[4]]\n",
    "Day_6_RF2=[Rmse7_rf2[5],Rmse8_rf2[5],Rmse9_rf2[5]]\n",
    "Day_7_RF2=[Rmse7_rf2[6],Rmse8_rf2[6],Rmse9_rf2[6]]\n",
    "Day_8_RF2=[Rmse7_rf2[7],Rmse8_rf2[7],Rmse9_rf2[7]]\n",
    "#Day_9_RF=[Rmse7_rf[8],Rmse8_rf[8],Rmse9_rf[8]]\n",
    "#Day_10_RF=[Rmse7_rf[9],Rmse8_rf[9],Rmse9_rf[9]]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 118,
   "id": "hydraulic-investor",
   "metadata": {},
   "outputs": [],
   "source": [
    "Day_1_MQI=[M7[0],M8[0],M9[0]]\n",
    "Day_2_MQI=[M7[1],M8[1],M9[1]]\n",
    "Day_3_MQI=[M7[2],M8[2],M9[2]]\n",
    "Day_4_MQI=[M7[3],M8[3],M9[3]]\n",
    "Day_5_MQI=[M7[4],M8[4],M9[4]]\n",
    "Day_6_MQI=[M7[5],M8[5],M9[5]]\n",
    "Day_7_MQI=[M7[6],M8[6],M9[6]]\n",
    "Day_8_MQI=[M7[7],M8[7],M9[7]]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 119,
   "id": "voluntary-nothing",
   "metadata": {},
   "outputs": [],
   "source": [
    "Day_1_MQI2=[M72[0],M82[0],M92[0]]\n",
    "Day_2_MQI2=[M72[1],M82[1],M92[1]]\n",
    "Day_3_MQI2=[M72[2],M82[2],M92[2]]\n",
    "Day_4_MQI2=[M72[3],M82[3],M92[3]]\n",
    "Day_5_MQI2=[M72[4],M82[4],M92[4]]\n",
    "Day_6_MQI2=[M72[5],M82[5],M92[5]]\n",
    "Day_7_MQI2=[M72[6],M82[6],M92[6]]\n",
    "Day_8_MQI2=[M72[7],M92[7],M92[7]]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 120,
   "id": "sporting-allen",
   "metadata": {},
   "outputs": [],
   "source": [
    "Day_1_MQI3=[M73[0],M83[0],M93[0]]\n",
    "Day_2_MQI3=[M73[1],M83[1],M93[1]]\n",
    "Day_3_MQI3=[M73[2],M83[2],M93[2]]\n",
    "Day_4_MQI3=[M73[3],M83[3],M93[3]]\n",
    "Day_5_MQI3=[M73[4],M83[4],M93[4]]\n",
    "Day_6_MQI3=[M73[5],M83[5],M93[5]]\n",
    "Day_7_MQI3=[M73[6],M83[6],M93[6]]\n",
    "#Day_8_MQI2=[M72[7],M92[7],M92[7]]"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "relative-opera",
   "metadata": {},
   "source": [
    "Day_1_ANN=[Rmse7_ann[0],Rmse8_ann[0],Rmse9_ann[0]]\n",
    "Day_2_ANN=[Rmse7_ann[1],Rmse8_ann[1],Rmse9_ann[1]]\n",
    "Day_3_ANN=[Rmse7_ann[2],Rmse8_ann[2],Rmse9_ann[2]]\n",
    "Day_4_ANN=[Rmse7_ann[3],Rmse8_ann[3],Rmse9_ann[3]]\n",
    "Day_5_ANN=[Rmse7_ann[4],Rmse8_ann[4],Rmse9_ann[4]]\n",
    "Day_6_ANN=[Rmse7_ann[5],Rmse8_ann[5],Rmse9_ann[5]]\n",
    "Day_7_ANN=[Rmse7_ann[6],Rmse8_ann[6],Rmse9_ann[6]]\n",
    "Day_8_ANN=[Rmse7_ann[7],Rmse8_ann[7],Rmse9_ann[7]]\n",
    "Day_9_ANN=[Rmse7_ann[8],Rmse8_ann[8],Rmse9_ann[8]]\n",
    "Day_10_ANN=[Rmse7_ann[9],Rmse8_ann[9],Rmse9_ann[9]]\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 398,
   "id": "daily-ballot",
   "metadata": {},
   "outputs": [],
   "source": [
    "RF_P=Day_1_rf+Day_2_rf+Day_3_rf+Day_4_rf+Day_5_rf+Day_6_rf+Day_7_rf+Day_8_rf\n",
    "#XGBoost_P=Day_1_ann+Day_2_ann+Day_3_ann+Day_4_ann+Day_5_ann+Day_6_ann+Day_7_ann+Day_8_ann+Day_9_ann+Day_10_ann\n",
    "RF_R=Day_1_RF+Day_2_RF+Day_3_RF+Day_4_RF+Day_5_RF+Day_6_RF+Day_7_RF+Day_8_RF\n",
    "RF_R2=Day_1_RF2+Day_2_RF2+Day_3_RF2+Day_4_RF2+Day_5_RF2+Day_6_RF2+Day_7_RF2+Day_8_RF2\n",
    "#XGBoost_R=Day_1_ANN+Day_2_ANN+Day_3_ANN+Day_4_ANN+Day_5_ANN+Day_6_ANN+Day_7_ANN+Day_8_ANN+Day_9_ANN+Day_10_ANN\n",
    "MQI=Day_1_MQI+Day_2_MQI+Day_3_MQI+Day_4_MQI+Day_5_MQI+Day_6_MQI+Day_7_MQI#+Day_8_MQI\n",
    "MQI2=Day_1_MQI2+Day_2_MQI2+Day_3_MQI2+Day_4_MQI2+Day_5_MQI2+Day_6_MQI2+Day_7_MQI2#+Day_8_MQI2\n",
    "MQI3=Day_1_MQI3+Day_2_MQI3+Day_3_MQI3+Day_4_MQI3+Day_5_MQI3+Day_6_MQI3+Day_7_MQI3\n",
    "x0=['0' for i in range(3)]\n",
    "x1=['5' for i in range(3)]\n",
    "x2=['10' for i in range(3)]\n",
    "x3=['15' for i in range(3)]\n",
    "x4=['20' for i in range(3)]\n",
    "x5=['25' for i in range(3)]\n",
    "x6=['30' for i in range(3)]\n",
    "x7=['35' for i in range(3)]\n",
    "x8=['40' for i in range(3)]\n",
    "x9=['45' for i in range(3)]\n",
    "\n",
    "Reg=[1 for i in range(30)]\n",
    "Spatial=[0.75 for i in range(30) ]\n",
    "Intervention=[0.7 for i in range(30) ]\n",
    "Hs_and_sp=[0.5 for i in range(30) ]\n",
    "\n",
    "\n",
    "x=x1+x2+x3+x4+x5+x6+x7\n",
    "X=x0+x1+x2+x3+x4+x5+x6+x7+x8"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 399,
   "id": "advisory-thailand",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "application/vnd.plotly.v1+json": {
       "config": {
        "plotlyServerURL": "https://plot.ly"
       },
       "data": [
        {
         "marker": {
          "color": "darkblue"
         },
         "name": "$CO$",
         "showlegend": true,
         "type": "box",
         "x": [
          "5",
          "5",
          "5",
          "10",
          "10",
          "10",
          "15",
          "15",
          "15",
          "20",
          "20",
          "20",
          "25",
          "25",
          "25",
          "30",
          "30",
          "30",
          "35",
          "35",
          "35"
         ],
         "y": [
          0.9157327439376322,
          1.141931422122198,
          1.3753267664555666,
          0.7734489474505007,
          1.0208701902969175,
          1.318383745433635,
          0.6811103989779902,
          0.9480640135899379,
          1.1563151181652602,
          0.586668571538628,
          0.9188304807307585,
          1.1480904800814558,
          0.5922351550621163,
          0.8731128454304987,
          0.7736240863304849,
          0.5631912668565253,
          0.763488441690103,
          0.7911581929402207,
          0.5473779349308381,
          0.7840730490365609,
          0.7398734115044125
         ]
        },
        {
         "marker": {
          "color": "teal"
         },
         "name": "$NO_2$",
         "showlegend": true,
         "type": "box",
         "x": [
          "5",
          "5",
          "5",
          "10",
          "10",
          "10",
          "15",
          "15",
          "15",
          "20",
          "20",
          "20",
          "25",
          "25",
          "25",
          "30",
          "30",
          "30",
          "35",
          "35",
          "35"
         ],
         "y": [
          0.9361905287701964,
          0.8009503940058246,
          1.3726249275814641,
          0.7567404468304041,
          0.6565505098346965,
          0.9127558740596345,
          0.6992398512605448,
          0.6286840459721783,
          0.8225391651935511,
          0.6921505376296663,
          0.6160140304924573,
          0.7589717894411446,
          0.6425211190397567,
          0.577712196531333,
          0.7046199489520663,
          0.6248168113441706,
          0.5632009984945529,
          0.7136791795585857,
          0.6098486045560773,
          0.5485320475009728,
          0.7283102358019727
         ]
        },
        {
         "marker": {
          "color": "darkgoldenrod"
         },
         "name": "$O_3$",
         "showlegend": true,
         "type": "box",
         "x": [
          "5",
          "5",
          "5",
          "10",
          "10",
          "10",
          "15",
          "15",
          "15",
          "20",
          "20",
          "20",
          "25",
          "25",
          "25",
          "30",
          "30",
          "30",
          "35",
          "35",
          "35"
         ],
         "y": [
          0.824167730926081,
          0.7492143159349163,
          0.4672080942645395,
          0.6493429071585939,
          0.6522550309235219,
          0.42634029347076696,
          0.5955839169883457,
          0.5850421082387657,
          0.34815578409909537,
          0.5607324247183932,
          0.5298587847565817,
          0.31549529480300353,
          0.5200749058614719,
          0.4880332848157327,
          0.31488685304736297,
          0.5149406817017521,
          0.47244295886263316,
          0.31107179087932807,
          0.481684703527402,
          0.4633278318895967,
          0.2995868311381968
         ]
        },
        {
         "connectgaps": true,
         "line": {
          "color": "navy",
          "dash": "dot",
          "shape": "linear",
          "width": 2
         },
         "mode": "lines",
         "name": "MPC",
         "showlegend": true,
         "type": "scatter",
         "x": [
          "0",
          "0",
          "0",
          "5",
          "5",
          "5",
          "10",
          "10",
          "10",
          "15",
          "15",
          "15",
          "20",
          "20",
          "20",
          "25",
          "25",
          "25",
          "30",
          "30",
          "30",
          "35",
          "35",
          "35",
          "40",
          "40",
          "40"
         ],
         "y": [
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
         ]
        }
       ],
       "layout": {
        "autosize": true,
        "boxmode": "group",
        "height": 400,
        "legend": {
         "orientation": "h",
         "x": 0.3,
         "y": 0.85,
         "yanchor": "bottom"
        },
        "plot_bgcolor": "rgba(0,0,0,0)",
        "template": {
         "data": {
          "bar": [
           {
            "error_x": {
             "color": "#2a3f5f"
            },
            "error_y": {
             "color": "#2a3f5f"
            },
            "marker": {
             "line": {
              "color": "#E5ECF6",
              "width": 0.5
             }
            },
            "type": "bar"
           }
          ],
          "barpolar": [
           {
            "marker": {
             "line": {
              "color": "#E5ECF6",
              "width": 0.5
             }
            },
            "type": "barpolar"
           }
          ],
          "carpet": [
           {
            "aaxis": {
             "endlinecolor": "#2a3f5f",
             "gridcolor": "white",
             "linecolor": "white",
             "minorgridcolor": "white",
             "startlinecolor": "#2a3f5f"
            },
            "baxis": {
             "endlinecolor": "#2a3f5f",
             "gridcolor": "white",
             "linecolor": "white",
             "minorgridcolor": "white",
             "startlinecolor": "#2a3f5f"
            },
            "type": "carpet"
           }
          ],
          "choropleth": [
           {
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            },
            "type": "choropleth"
           }
          ],
          "contour": [
           {
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            },
            "colorscale": [
             [
              0,
              "#0d0887"
             ],
             [
              0.1111111111111111,
              "#46039f"
             ],
             [
              0.2222222222222222,
              "#7201a8"
             ],
             [
              0.3333333333333333,
              "#9c179e"
             ],
             [
              0.4444444444444444,
              "#bd3786"
             ],
             [
              0.5555555555555556,
              "#d8576b"
             ],
             [
              0.6666666666666666,
              "#ed7953"
             ],
             [
              0.7777777777777778,
              "#fb9f3a"
             ],
             [
              0.8888888888888888,
              "#fdca26"
             ],
             [
              1,
              "#f0f921"
             ]
            ],
            "type": "contour"
           }
          ],
          "contourcarpet": [
           {
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            },
            "type": "contourcarpet"
           }
          ],
          "heatmap": [
           {
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            },
            "colorscale": [
             [
              0,
              "#0d0887"
             ],
             [
              0.1111111111111111,
              "#46039f"
             ],
             [
              0.2222222222222222,
              "#7201a8"
             ],
             [
              0.3333333333333333,
              "#9c179e"
             ],
             [
              0.4444444444444444,
              "#bd3786"
             ],
             [
              0.5555555555555556,
              "#d8576b"
             ],
             [
              0.6666666666666666,
              "#ed7953"
             ],
             [
              0.7777777777777778,
              "#fb9f3a"
             ],
             [
              0.8888888888888888,
              "#fdca26"
             ],
             [
              1,
              "#f0f921"
             ]
            ],
            "type": "heatmap"
           }
          ],
          "heatmapgl": [
           {
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            },
            "colorscale": [
             [
              0,
              "#0d0887"
             ],
             [
              0.1111111111111111,
              "#46039f"
             ],
             [
              0.2222222222222222,
              "#7201a8"
             ],
             [
              0.3333333333333333,
              "#9c179e"
             ],
             [
              0.4444444444444444,
              "#bd3786"
             ],
             [
              0.5555555555555556,
              "#d8576b"
             ],
             [
              0.6666666666666666,
              "#ed7953"
             ],
             [
              0.7777777777777778,
              "#fb9f3a"
             ],
             [
              0.8888888888888888,
              "#fdca26"
             ],
             [
              1,
              "#f0f921"
             ]
            ],
            "type": "heatmapgl"
           }
          ],
          "histogram": [
           {
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "histogram"
           }
          ],
          "histogram2d": [
           {
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            },
            "colorscale": [
             [
              0,
              "#0d0887"
             ],
             [
              0.1111111111111111,
              "#46039f"
             ],
             [
              0.2222222222222222,
              "#7201a8"
             ],
             [
              0.3333333333333333,
              "#9c179e"
             ],
             [
              0.4444444444444444,
              "#bd3786"
             ],
             [
              0.5555555555555556,
              "#d8576b"
             ],
             [
              0.6666666666666666,
              "#ed7953"
             ],
             [
              0.7777777777777778,
              "#fb9f3a"
             ],
             [
              0.8888888888888888,
              "#fdca26"
             ],
             [
              1,
              "#f0f921"
             ]
            ],
            "type": "histogram2d"
           }
          ],
          "histogram2dcontour": [
           {
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            },
            "colorscale": [
             [
              0,
              "#0d0887"
             ],
             [
              0.1111111111111111,
              "#46039f"
             ],
             [
              0.2222222222222222,
              "#7201a8"
             ],
             [
              0.3333333333333333,
              "#9c179e"
             ],
             [
              0.4444444444444444,
              "#bd3786"
             ],
             [
              0.5555555555555556,
              "#d8576b"
             ],
             [
              0.6666666666666666,
              "#ed7953"
             ],
             [
              0.7777777777777778,
              "#fb9f3a"
             ],
             [
              0.8888888888888888,
              "#fdca26"
             ],
             [
              1,
              "#f0f921"
             ]
            ],
            "type": "histogram2dcontour"
           }
          ],
          "mesh3d": [
           {
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            },
            "type": "mesh3d"
           }
          ],
          "parcoords": [
           {
            "line": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "parcoords"
           }
          ],
          "pie": [
           {
            "automargin": true,
            "type": "pie"
           }
          ],
          "scatter": [
           {
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "scatter"
           }
          ],
          "scatter3d": [
           {
            "line": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "scatter3d"
           }
          ],
          "scattercarpet": [
           {
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "scattercarpet"
           }
          ],
          "scattergeo": [
           {
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "scattergeo"
           }
          ],
          "scattergl": [
           {
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "scattergl"
           }
          ],
          "scattermapbox": [
           {
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "scattermapbox"
           }
          ],
          "scatterpolar": [
           {
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "scatterpolar"
           }
          ],
          "scatterpolargl": [
           {
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "scatterpolargl"
           }
          ],
          "scatterternary": [
           {
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "scatterternary"
           }
          ],
          "surface": [
           {
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            },
            "colorscale": [
             [
              0,
              "#0d0887"
             ],
             [
              0.1111111111111111,
              "#46039f"
             ],
             [
              0.2222222222222222,
              "#7201a8"
             ],
             [
              0.3333333333333333,
              "#9c179e"
             ],
             [
              0.4444444444444444,
              "#bd3786"
             ],
             [
              0.5555555555555556,
              "#d8576b"
             ],
             [
              0.6666666666666666,
              "#ed7953"
             ],
             [
              0.7777777777777778,
              "#fb9f3a"
             ],
             [
              0.8888888888888888,
              "#fdca26"
             ],
             [
              1,
              "#f0f921"
             ]
            ],
            "type": "surface"
           }
          ],
          "table": [
           {
            "cells": {
             "fill": {
              "color": "#EBF0F8"
             },
             "line": {
              "color": "white"
             }
            },
            "header": {
             "fill": {
              "color": "#C8D4E3"
             },
             "line": {
              "color": "white"
             }
            },
            "type": "table"
           }
          ]
         },
         "layout": {
          "annotationdefaults": {
           "arrowcolor": "#2a3f5f",
           "arrowhead": 0,
           "arrowwidth": 1
          },
          "coloraxis": {
           "colorbar": {
            "outlinewidth": 0,
            "ticks": ""
           }
          },
          "colorscale": {
           "diverging": [
            [
             0,
             "#8e0152"
            ],
            [
             0.1,
             "#c51b7d"
            ],
            [
             0.2,
             "#de77ae"
            ],
            [
             0.3,
             "#f1b6da"
            ],
            [
             0.4,
             "#fde0ef"
            ],
            [
             0.5,
             "#f7f7f7"
            ],
            [
             0.6,
             "#e6f5d0"
            ],
            [
             0.7,
             "#b8e186"
            ],
            [
             0.8,
             "#7fbc41"
            ],
            [
             0.9,
             "#4d9221"
            ],
            [
             1,
             "#276419"
            ]
           ],
           "sequential": [
            [
             0,
             "#0d0887"
            ],
            [
             0.1111111111111111,
             "#46039f"
            ],
            [
             0.2222222222222222,
             "#7201a8"
            ],
            [
             0.3333333333333333,
             "#9c179e"
            ],
            [
             0.4444444444444444,
             "#bd3786"
            ],
            [
             0.5555555555555556,
             "#d8576b"
            ],
            [
             0.6666666666666666,
             "#ed7953"
            ],
            [
             0.7777777777777778,
             "#fb9f3a"
            ],
            [
             0.8888888888888888,
             "#fdca26"
            ],
            [
             1,
             "#f0f921"
            ]
           ],
           "sequentialminus": [
            [
             0,
             "#0d0887"
            ],
            [
             0.1111111111111111,
             "#46039f"
            ],
            [
             0.2222222222222222,
             "#7201a8"
            ],
            [
             0.3333333333333333,
             "#9c179e"
            ],
            [
             0.4444444444444444,
             "#bd3786"
            ],
            [
             0.5555555555555556,
             "#d8576b"
            ],
            [
             0.6666666666666666,
             "#ed7953"
            ],
            [
             0.7777777777777778,
             "#fb9f3a"
            ],
            [
             0.8888888888888888,
             "#fdca26"
            ],
            [
             1,
             "#f0f921"
            ]
           ]
          },
          "colorway": [
           "#636efa",
           "#EF553B",
           "#00cc96",
           "#ab63fa",
           "#FFA15A",
           "#19d3f3",
           "#FF6692",
           "#B6E880",
           "#FF97FF",
           "#FECB52"
          ],
          "font": {
           "color": "#2a3f5f"
          },
          "geo": {
           "bgcolor": "white",
           "lakecolor": "white",
           "landcolor": "#E5ECF6",
           "showlakes": true,
           "showland": true,
           "subunitcolor": "white"
          },
          "hoverlabel": {
           "align": "left"
          },
          "hovermode": "closest",
          "mapbox": {
           "style": "light"
          },
          "paper_bgcolor": "white",
          "plot_bgcolor": "#E5ECF6",
          "polar": {
           "angularaxis": {
            "gridcolor": "white",
            "linecolor": "white",
            "ticks": ""
           },
           "bgcolor": "#E5ECF6",
           "radialaxis": {
            "gridcolor": "white",
            "linecolor": "white",
            "ticks": ""
           }
          },
          "scene": {
           "xaxis": {
            "backgroundcolor": "#E5ECF6",
            "gridcolor": "white",
            "gridwidth": 2,
            "linecolor": "white",
            "showbackground": true,
            "ticks": "",
            "zerolinecolor": "white"
           },
           "yaxis": {
            "backgroundcolor": "#E5ECF6",
            "gridcolor": "white",
            "gridwidth": 2,
            "linecolor": "white",
            "showbackground": true,
            "ticks": "",
            "zerolinecolor": "white"
           },
           "zaxis": {
            "backgroundcolor": "#E5ECF6",
            "gridcolor": "white",
            "gridwidth": 2,
            "linecolor": "white",
            "showbackground": true,
            "ticks": "",
            "zerolinecolor": "white"
           }
          },
          "shapedefaults": {
           "line": {
            "color": "#2a3f5f"
           }
          },
          "ternary": {
           "aaxis": {
            "gridcolor": "white",
            "linecolor": "white",
            "ticks": ""
           },
           "baxis": {
            "gridcolor": "white",
            "linecolor": "white",
            "ticks": ""
           },
           "bgcolor": "#E5ECF6",
           "caxis": {
            "gridcolor": "white",
            "linecolor": "white",
            "ticks": ""
           }
          },
          "title": {
           "x": 0.05
          },
          "xaxis": {
           "automargin": true,
           "gridcolor": "white",
           "linecolor": "white",
           "ticks": "",
           "title": {
            "standoff": 15
           },
           "zerolinecolor": "white",
           "zerolinewidth": 2
          },
          "yaxis": {
           "automargin": true,
           "gridcolor": "white",
           "linecolor": "white",
           "ticks": "",
           "title": {
            "standoff": 15
           },
           "zerolinecolor": "white",
           "zerolinewidth": 2
          }
         }
        },
        "width": 1000,
        "xaxis": {
         "dtick": 5,
         "linecolor": "black",
         "linewidth": 1.4,
         "mirror": true,
         "tick0": 5,
         "tickfont": {
          "size": 16
         },
         "title": {
          "font": {
           "size": 24
          },
          "text": "Days of training"
         }
        },
        "yaxis": {
         "dtick": 0.2,
         "linecolor": "black",
         "linewidth": 1.4,
         "mirror": true,
         "range": [
          0.2,
          1.5
         ],
         "tick0": 0.2,
         "tickfont": {
          "size": 16
         },
         "title": {
          "font": {
           "size": 24
          },
          "text": "MQI"
         }
        }
       }
      },
      "text/html": [
       "<div>                            <div id=\"430c0a84-a589-42c5-9d62-2505cda9948c\" class=\"plotly-graph-div\" style=\"height:400px; width:1000px;\"></div>            <script type=\"text/javascript\">                require([\"plotly\"], function(Plotly) {                    window.PLOTLYENV=window.PLOTLYENV || {};                                    if (document.getElementById(\"430c0a84-a589-42c5-9d62-2505cda9948c\")) {                    Plotly.newPlot(                        \"430c0a84-a589-42c5-9d62-2505cda9948c\",                        [{\"marker\": {\"color\": \"darkblue\"}, \"name\": \"$CO$\", \"showlegend\": true, \"type\": \"box\", \"x\": [\"5\", \"5\", \"5\", \"10\", \"10\", \"10\", \"15\", \"15\", \"15\", \"20\", \"20\", \"20\", \"25\", \"25\", \"25\", \"30\", \"30\", \"30\", \"35\", \"35\", \"35\"], \"y\": [0.9157327439376322, 1.141931422122198, 1.3753267664555666, 0.7734489474505007, 1.0208701902969175, 1.318383745433635, 0.6811103989779902, 0.9480640135899379, 1.1563151181652602, 0.586668571538628, 0.9188304807307585, 1.1480904800814558, 0.5922351550621163, 0.8731128454304987, 0.7736240863304849, 0.5631912668565253, 0.763488441690103, 0.7911581929402207, 0.5473779349308381, 0.7840730490365609, 0.7398734115044125]}, {\"marker\": {\"color\": \"teal\"}, \"name\": \"$NO_2$\", \"showlegend\": true, \"type\": \"box\", \"x\": [\"5\", \"5\", \"5\", \"10\", \"10\", \"10\", \"15\", \"15\", \"15\", \"20\", \"20\", \"20\", \"25\", \"25\", \"25\", \"30\", \"30\", \"30\", \"35\", \"35\", \"35\"], \"y\": [0.9361905287701964, 0.8009503940058246, 1.3726249275814641, 0.7567404468304041, 0.6565505098346965, 0.9127558740596345, 0.6992398512605448, 0.6286840459721783, 0.8225391651935511, 0.6921505376296663, 0.6160140304924573, 0.7589717894411446, 0.6425211190397567, 0.577712196531333, 0.7046199489520663, 0.6248168113441706, 0.5632009984945529, 0.7136791795585857, 0.6098486045560773, 0.5485320475009728, 0.7283102358019727]}, {\"marker\": {\"color\": \"darkgoldenrod\"}, \"name\": \"$O_3$\", \"showlegend\": true, \"type\": \"box\", \"x\": [\"5\", \"5\", \"5\", \"10\", \"10\", \"10\", \"15\", \"15\", \"15\", \"20\", \"20\", \"20\", \"25\", \"25\", \"25\", \"30\", \"30\", \"30\", \"35\", \"35\", \"35\"], \"y\": [0.824167730926081, 0.7492143159349163, 0.4672080942645395, 0.6493429071585939, 0.6522550309235219, 0.42634029347076696, 0.5955839169883457, 0.5850421082387657, 0.34815578409909537, 0.5607324247183932, 0.5298587847565817, 0.31549529480300353, 0.5200749058614719, 0.4880332848157327, 0.31488685304736297, 0.5149406817017521, 0.47244295886263316, 0.31107179087932807, 0.481684703527402, 0.4633278318895967, 0.2995868311381968]}, {\"connectgaps\": true, \"line\": {\"color\": \"navy\", \"dash\": \"dot\", \"shape\": \"linear\", \"width\": 2}, \"mode\": \"lines\", \"name\": \"MPC\", \"showlegend\": true, \"type\": \"scatter\", \"x\": [\"0\", \"0\", \"0\", \"5\", \"5\", \"5\", \"10\", \"10\", \"10\", \"15\", \"15\", \"15\", \"20\", \"20\", \"20\", \"25\", \"25\", \"25\", \"30\", \"30\", \"30\", \"35\", \"35\", \"35\", \"40\", \"40\", \"40\"], \"y\": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]}],                        {\"autosize\": true, \"boxmode\": \"group\", \"height\": 400, \"legend\": {\"orientation\": \"h\", \"x\": 0.3, \"y\": 0.85, \"yanchor\": \"bottom\"}, \"plot_bgcolor\": \"rgba(0,0,0,0)\", \"template\": {\"data\": {\"bar\": [{\"error_x\": {\"color\": \"#2a3f5f\"}, \"error_y\": {\"color\": \"#2a3f5f\"}, \"marker\": {\"line\": {\"color\": \"#E5ECF6\", \"width\": 0.5}}, \"type\": \"bar\"}], \"barpolar\": [{\"marker\": {\"line\": {\"color\": \"#E5ECF6\", \"width\": 0.5}}, \"type\": \"barpolar\"}], \"carpet\": [{\"aaxis\": {\"endlinecolor\": \"#2a3f5f\", \"gridcolor\": \"white\", \"linecolor\": \"white\", \"minorgridcolor\": \"white\", \"startlinecolor\": \"#2a3f5f\"}, \"baxis\": {\"endlinecolor\": \"#2a3f5f\", \"gridcolor\": \"white\", \"linecolor\": \"white\", \"minorgridcolor\": \"white\", \"startlinecolor\": \"#2a3f5f\"}, \"type\": \"carpet\"}], \"choropleth\": [{\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}, \"type\": \"choropleth\"}], \"contour\": [{\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}, \"colorscale\": [[0.0, \"#0d0887\"], [0.1111111111111111, \"#46039f\"], [0.2222222222222222, \"#7201a8\"], [0.3333333333333333, \"#9c179e\"], [0.4444444444444444, \"#bd3786\"], [0.5555555555555556, \"#d8576b\"], [0.6666666666666666, \"#ed7953\"], [0.7777777777777778, \"#fb9f3a\"], [0.8888888888888888, \"#fdca26\"], [1.0, \"#f0f921\"]], \"type\": \"contour\"}], \"contourcarpet\": [{\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}, \"type\": \"contourcarpet\"}], \"heatmap\": [{\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}, \"colorscale\": [[0.0, \"#0d0887\"], [0.1111111111111111, \"#46039f\"], [0.2222222222222222, \"#7201a8\"], [0.3333333333333333, \"#9c179e\"], [0.4444444444444444, \"#bd3786\"], [0.5555555555555556, \"#d8576b\"], [0.6666666666666666, \"#ed7953\"], [0.7777777777777778, \"#fb9f3a\"], [0.8888888888888888, \"#fdca26\"], [1.0, \"#f0f921\"]], \"type\": \"heatmap\"}], \"heatmapgl\": [{\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}, \"colorscale\": [[0.0, \"#0d0887\"], [0.1111111111111111, \"#46039f\"], [0.2222222222222222, \"#7201a8\"], [0.3333333333333333, \"#9c179e\"], [0.4444444444444444, \"#bd3786\"], [0.5555555555555556, \"#d8576b\"], [0.6666666666666666, \"#ed7953\"], [0.7777777777777778, \"#fb9f3a\"], [0.8888888888888888, \"#fdca26\"], [1.0, \"#f0f921\"]], \"type\": \"heatmapgl\"}], \"histogram\": [{\"marker\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"histogram\"}], \"histogram2d\": [{\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}, \"colorscale\": [[0.0, \"#0d0887\"], [0.1111111111111111, \"#46039f\"], [0.2222222222222222, \"#7201a8\"], [0.3333333333333333, \"#9c179e\"], [0.4444444444444444, \"#bd3786\"], [0.5555555555555556, \"#d8576b\"], [0.6666666666666666, \"#ed7953\"], [0.7777777777777778, \"#fb9f3a\"], [0.8888888888888888, \"#fdca26\"], [1.0, \"#f0f921\"]], \"type\": \"histogram2d\"}], \"histogram2dcontour\": [{\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}, \"colorscale\": [[0.0, \"#0d0887\"], [0.1111111111111111, \"#46039f\"], [0.2222222222222222, \"#7201a8\"], [0.3333333333333333, \"#9c179e\"], [0.4444444444444444, \"#bd3786\"], [0.5555555555555556, \"#d8576b\"], [0.6666666666666666, \"#ed7953\"], [0.7777777777777778, \"#fb9f3a\"], [0.8888888888888888, \"#fdca26\"], [1.0, \"#f0f921\"]], \"type\": \"histogram2dcontour\"}], \"mesh3d\": [{\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}, \"type\": \"mesh3d\"}], \"parcoords\": [{\"line\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"parcoords\"}], \"pie\": [{\"automargin\": true, \"type\": \"pie\"}], \"scatter\": [{\"marker\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"scatter\"}], \"scatter3d\": [{\"line\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"marker\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"scatter3d\"}], \"scattercarpet\": [{\"marker\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"scattercarpet\"}], \"scattergeo\": [{\"marker\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"scattergeo\"}], \"scattergl\": [{\"marker\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"scattergl\"}], \"scattermapbox\": [{\"marker\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"scattermapbox\"}], \"scatterpolar\": [{\"marker\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"scatterpolar\"}], \"scatterpolargl\": [{\"marker\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"scatterpolargl\"}], \"scatterternary\": [{\"marker\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"scatterternary\"}], \"surface\": [{\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}, \"colorscale\": [[0.0, \"#0d0887\"], [0.1111111111111111, \"#46039f\"], [0.2222222222222222, \"#7201a8\"], [0.3333333333333333, \"#9c179e\"], [0.4444444444444444, \"#bd3786\"], [0.5555555555555556, \"#d8576b\"], [0.6666666666666666, \"#ed7953\"], [0.7777777777777778, \"#fb9f3a\"], [0.8888888888888888, \"#fdca26\"], [1.0, \"#f0f921\"]], \"type\": \"surface\"}], \"table\": [{\"cells\": {\"fill\": {\"color\": \"#EBF0F8\"}, \"line\": {\"color\": \"white\"}}, \"header\": {\"fill\": {\"color\": \"#C8D4E3\"}, \"line\": {\"color\": \"white\"}}, \"type\": \"table\"}]}, \"layout\": {\"annotationdefaults\": {\"arrowcolor\": \"#2a3f5f\", \"arrowhead\": 0, \"arrowwidth\": 1}, \"coloraxis\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"colorscale\": {\"diverging\": [[0, \"#8e0152\"], [0.1, \"#c51b7d\"], [0.2, \"#de77ae\"], [0.3, \"#f1b6da\"], [0.4, \"#fde0ef\"], [0.5, \"#f7f7f7\"], [0.6, \"#e6f5d0\"], [0.7, \"#b8e186\"], [0.8, \"#7fbc41\"], [0.9, \"#4d9221\"], [1, \"#276419\"]], \"sequential\": [[0.0, \"#0d0887\"], [0.1111111111111111, \"#46039f\"], [0.2222222222222222, \"#7201a8\"], [0.3333333333333333, \"#9c179e\"], [0.4444444444444444, \"#bd3786\"], [0.5555555555555556, \"#d8576b\"], [0.6666666666666666, \"#ed7953\"], [0.7777777777777778, \"#fb9f3a\"], [0.8888888888888888, \"#fdca26\"], [1.0, \"#f0f921\"]], \"sequentialminus\": [[0.0, \"#0d0887\"], [0.1111111111111111, \"#46039f\"], [0.2222222222222222, \"#7201a8\"], [0.3333333333333333, \"#9c179e\"], [0.4444444444444444, \"#bd3786\"], [0.5555555555555556, \"#d8576b\"], [0.6666666666666666, \"#ed7953\"], [0.7777777777777778, \"#fb9f3a\"], [0.8888888888888888, \"#fdca26\"], [1.0, \"#f0f921\"]]}, \"colorway\": [\"#636efa\", \"#EF553B\", \"#00cc96\", \"#ab63fa\", \"#FFA15A\", \"#19d3f3\", \"#FF6692\", \"#B6E880\", \"#FF97FF\", \"#FECB52\"], \"font\": {\"color\": \"#2a3f5f\"}, \"geo\": {\"bgcolor\": \"white\", \"lakecolor\": \"white\", \"landcolor\": \"#E5ECF6\", \"showlakes\": true, \"showland\": true, \"subunitcolor\": \"white\"}, \"hoverlabel\": {\"align\": \"left\"}, \"hovermode\": \"closest\", \"mapbox\": {\"style\": \"light\"}, \"paper_bgcolor\": \"white\", \"plot_bgcolor\": \"#E5ECF6\", \"polar\": {\"angularaxis\": {\"gridcolor\": \"white\", \"linecolor\": \"white\", \"ticks\": \"\"}, \"bgcolor\": \"#E5ECF6\", \"radialaxis\": {\"gridcolor\": \"white\", \"linecolor\": \"white\", \"ticks\": \"\"}}, \"scene\": {\"xaxis\": {\"backgroundcolor\": \"#E5ECF6\", \"gridcolor\": \"white\", \"gridwidth\": 2, \"linecolor\": \"white\", \"showbackground\": true, \"ticks\": \"\", \"zerolinecolor\": \"white\"}, \"yaxis\": {\"backgroundcolor\": \"#E5ECF6\", \"gridcolor\": \"white\", \"gridwidth\": 2, \"linecolor\": \"white\", \"showbackground\": true, \"ticks\": \"\", \"zerolinecolor\": \"white\"}, \"zaxis\": {\"backgroundcolor\": \"#E5ECF6\", \"gridcolor\": \"white\", \"gridwidth\": 2, \"linecolor\": \"white\", \"showbackground\": true, \"ticks\": \"\", \"zerolinecolor\": \"white\"}}, \"shapedefaults\": {\"line\": {\"color\": \"#2a3f5f\"}}, \"ternary\": {\"aaxis\": {\"gridcolor\": \"white\", \"linecolor\": \"white\", \"ticks\": \"\"}, \"baxis\": {\"gridcolor\": \"white\", \"linecolor\": \"white\", \"ticks\": \"\"}, \"bgcolor\": \"#E5ECF6\", \"caxis\": {\"gridcolor\": \"white\", \"linecolor\": \"white\", \"ticks\": \"\"}}, \"title\": {\"x\": 0.05}, \"xaxis\": {\"automargin\": true, \"gridcolor\": \"white\", \"linecolor\": \"white\", \"ticks\": \"\", \"title\": {\"standoff\": 15}, \"zerolinecolor\": \"white\", \"zerolinewidth\": 2}, \"yaxis\": {\"automargin\": true, \"gridcolor\": \"white\", \"linecolor\": \"white\", \"ticks\": \"\", \"title\": {\"standoff\": 15}, \"zerolinecolor\": \"white\", \"zerolinewidth\": 2}}}, \"width\": 1000, \"xaxis\": {\"dtick\": 5, \"linecolor\": \"black\", \"linewidth\": 1.4, \"mirror\": true, \"tick0\": 5, \"tickfont\": {\"size\": 16}, \"title\": {\"font\": {\"size\": 24}, \"text\": \"Days of training\"}}, \"yaxis\": {\"dtick\": 0.2, \"linecolor\": \"black\", \"linewidth\": 1.4, \"mirror\": true, \"range\": [0.2, 1.5], \"tick0\": 0.2, \"tickfont\": {\"size\": 16}, \"title\": {\"font\": {\"size\": 24}, \"text\": \"MQI\"}}},                        {\"responsive\": true}                    ).then(function(){\n",
       "                            \n",
       "var gd = document.getElementById('430c0a84-a589-42c5-9d62-2505cda9948c');\n",
       "var x = new MutationObserver(function (mutations, observer) {{\n",
       "        var display = window.getComputedStyle(gd).display;\n",
       "        if (!display || display === 'none') {{\n",
       "            console.log([gd, 'removed!']);\n",
       "            Plotly.purge(gd);\n",
       "            observer.disconnect();\n",
       "        }}\n",
       "}});\n",
       "\n",
       "// Listen for the removal of the full notebook cells\n",
       "var notebookContainer = gd.closest('#notebook-container');\n",
       "if (notebookContainer) {{\n",
       "    x.observe(notebookContainer, {childList: true});\n",
       "}}\n",
       "\n",
       "// Listen for the clearing of the current output cell\n",
       "var outputEl = gd.closest('.output');\n",
       "if (outputEl) {{\n",
       "    x.observe(outputEl, {childList: true});\n",
       "}}\n",
       "\n",
       "                        })                };                });            </script>        </div>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<IPython.core.display.Image object>"
      ]
     },
     "execution_count": 399,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import chart_studio\n",
    "fig = go.Figure() \n",
    "a = np.array([1, 2, 3, 4, 5])\n",
    "b = np.array([1, 3, 2, 3, 1])\n",
    "# Defining x axis\n",
    "x = x\n",
    "fig.add_trace(go.Box(\n",
    "  \n",
    "    # defining y axis in corresponding\n",
    "    # to x-axis\n",
    "    y=MQI,\n",
    "    x=x,\n",
    "    name=r'$CO$',\n",
    "    marker_color='darkblue',\n",
    "    showlegend=True\n",
    "   \n",
    "))\n",
    "fig.add_trace(go.Box(\n",
    "  \n",
    "    # defining y axis in corresponding\n",
    "    # to x-axis\n",
    "    y=MQI2,\n",
    "    x=x,\n",
    "    name=r'$NO_2$',\n",
    "    marker_color='teal',\n",
    "    showlegend=True\n",
    "   \n",
    "))\n",
    "fig.add_trace(go.Box(\n",
    "  \n",
    "    # defining y axis in corresponding\n",
    "    # to x-axis\n",
    "    y=MQI3,\n",
    "    x=x,\n",
    "    name=r'$O_3$',\n",
    "    marker_color='darkgoldenrod',\n",
    "    showlegend=True\n",
    "   \n",
    "))\n",
    "\n",
    "#fig.add_trace(go.Box(\n",
    "  \n",
    "    #defining y axis in corresponding\n",
    "   # to x-axis\n",
    "    #y=RF_R,\n",
    "    #x=x,\n",
    "    #name='SMAE',\n",
    "    #marker_color='olive',\n",
    "   # showlegend=True\n",
    "   \n",
    "#))\n",
    "#fig.add_trace(go.Box(\n",
    "   #y=ANN_R,\n",
    "    #x=x,\n",
    "    #name='XGBoost(NMAE)',\n",
    "    #marker_color='orangered',\n",
    "    #showlegend=True\n",
    "\n",
    "#))\n",
    "fig.add_trace(go.Scatter(x=X,\n",
    "                y=Reg, \n",
    "                name=\"MPC\",\n",
    "                mode = 'lines',\n",
    "                #marker_color='dodgerblue',\n",
    "                line = dict(shape = 'linear',width = 2, color = 'navy', dash = 'dot'),\n",
    "                connectgaps = True,\n",
    "                showlegend=True\n",
    "                        ))\n",
    "#fig.add_trace(go.Scatter(x=X,\n",
    "                #y=Spatial, \n",
    "                #name=\"SGS\",\n",
    "                #mode = 'lines',\n",
    "                #marker_color='dodgerblue',\n",
    "                #line = dict(shape = 'linear',width = 2, color = 'purple', dash = 'dot'),\n",
    "                #connectgaps = True,\n",
    "                #showlegend=True\n",
    "                    \n",
    "                       # ))\n",
    "#fig.add_trace(go.Scatter(x=X,\n",
    "                #y=Intervention, \n",
    "                #name=\"IS/IM\",\n",
    "                #mode = 'lines',\n",
    "                #marker_color='dodgerblue',\n",
    "                #line = dict(shape = 'linear',width = 2, color = 'orange', dash = 'dot'),\n",
    "                #connectgaps = True,\n",
    "                #showlegend=True\n",
    "                \n",
    "                        #))\n",
    "#fig.add_trace(go.Scatter(x=X,\n",
    "                #y=Hs_and_sp, \n",
    "                #name=\"HA/SP\",\n",
    "                    \n",
    "                #mode = 'lines',\n",
    "                #marker_color='dodgerblue',\n",
    "                #line = dict(shape = 'linear',width = 2, color = 'dodgerblue', dash = 'dot'),\n",
    "                #connectgaps = True,\n",
    "                #showlegend=True\n",
    "               \n",
    "                        #))\n",
    "\n",
    "  \n",
    "fig.update_layout(autosize=True,\n",
    "                 #title={'text': \"<b>CO Monthly Calibration Scheme </b>\",\n",
    "        #'y':0.84,\n",
    "        #'x':0.4,\n",
    "        #'xanchor': 'center',\n",
    "        #'yanchor': 'top'}, \n",
    "    width=1000,\n",
    "    height=400,\n",
    "                  \n",
    "  legend=dict( yanchor=\"bottom\",\n",
    "    y=0.85,\n",
    "    x=0.3,\n",
    "    \n",
    "    orientation=\"h\"\n",
    "),\n",
    "             \n",
    "    # group together boxes of the different\n",
    "    # traces for each value of x\n",
    "    boxmode='group',\n",
    "                  plot_bgcolor='rgba(0,0,0,0)'\n",
    ")\n",
    "\n",
    "fig.update_xaxes(title_text=\"Days of training\",tickfont = dict(size=16),\n",
    "                 titlefont = dict(size=24),linewidth=1.4, linecolor='black',tick0 = 5,\n",
    "        dtick = 5,mirror=True)\n",
    "fig.update_yaxes(title_text=\"MQI\",range=[0.2,1.5],tickfont = dict(size=16),titlefont = dict(size=24),\n",
    "                 linewidth=1.4, linecolor='black',tick0 = 0.2,\n",
    "        dtick = 0.2,mirror=True)\n",
    "fig.show()\n",
    "chart_studio.plotly.sign_in('vinylango', 'gybbJVWfRSUoTcRRSa6J')\n",
    "chart_studio.plotly.image.save_as(fig, filename='models_boxplot.png')\n",
    "Image('models_boxplot.png')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 842,
   "id": "variable-conjunction",
   "metadata": {},
   "outputs": [
    {
     "ename": "ValueError",
     "evalue": "operands could not be broadcast together with shapes (0,) (5,) ",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mValueError\u001b[0m                                Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-842-06d7bccece63>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0mx\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0marray\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0my_train\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m960\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      2\u001b[0m \u001b[0my\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0marray\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mpred\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 3\u001b[0;31m \u001b[0mPred\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mm\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0mx\u001b[0m \u001b[0;34m+\u001b[0m \u001b[0mb\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      4\u001b[0m \u001b[0mm\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mb\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mpolyfit\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mx\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m1\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      5\u001b[0m \u001b[0mplt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mplot\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mx\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'o'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;31mValueError\u001b[0m: operands could not be broadcast together with shapes (0,) (5,) "
     ]
    }
   ],
   "source": [
    "x=np.array(y_train[960:])\n",
    "y=np.array(pred)\n",
    "Pred=m*x + b\n",
    "m, b = np.polyfit(x, y, 1)\n",
    "plt.plot(x, y, 'o')\n",
    "plt.plot(x, m*x + b)\n",
    "m,b\n",
    "round(sm.r2_score(x,Pred), 2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "weighted-slope",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "southwest-elite",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
